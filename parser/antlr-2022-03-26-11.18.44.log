2022-03-26 11:18:42:460 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module { $hi = $module.mod }) (ALT structCreation { $hi = $structCreation.dec }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER { $mod = instructions.NewModule($MODULE.line, $MODULE.pos, $ID.text, $moduleContent.m ) }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {
                                    newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                    $mc.m.Add(newObj)
                                    $m = $mc.m
                                 }) (ALT (= mc moduleContent) PUB moduleAction {
                                       newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                       $mc.m.Add(newObj)
                                       $m = $mc.m
                                    }) (ALT (= mc moduleContent) module {
                              newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                              $mc.m.Add(newObj)
                              $m = $mc.m
                           }) (ALT (= mc moduleContent) moduleAction {
                                newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                $mc.m.Add(newObj)
                                $m = $mc.m
                             }) (ALT PUB module {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               }) (ALT PUB moduleAction {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  }) (ALT module {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            }) (ALT moduleAction {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { $ma = $function.fun }) (ALT structCreation { $ma = $structCreation.dec }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { $iv = instructions.NewPush($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $iv = instructions.NewInsert($ID.line, $ID.pos, $ID.text, $exp1.p, $exp2.p) }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER { $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) }))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ instructions LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }) (ALT RETURN expression { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        }))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         }) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        }))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {
                                $lma.ma.Add($expression.p)
                                $ma = $lma.ma
                             }) (ALT expression {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, false, $expression.p, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, true, $expression.p, "") }) (ALT LET ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, false, $expression.p, $tipo.text) }) (ALT LET MUT ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, true, $expression.p, $tipo.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {
                                        StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                        $list.l.Add(StrDef);
                                        $l = $list.l;
                                    }) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {
                                          StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                          $list.l.Add(StrDef);
                                          $l = $list.l;
                                      }) (ALT (= id1 ID) D_PTS types {
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }) (ALT (= id1 ID) D_PTS (= id2 ID) {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) }) (ALT ID listAccessArray IGUAL expression { $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) }))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
    $l = arrayList.New()
    $l.Add($ID.text)
}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                                 }) (ALT CORIZQ expression CORDER {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        }) (ALT CORIZQ types PYC expression CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         }) (ALT CORIZQ types CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, nil)
                            $t.Add(newType)
                         }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT ID D_PTS arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT USIZE { $ty = environment.INTEGER }) (ALT ARRAY { $ty = environment.ARRAY }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IG_IG) (ALT DIFERENTE))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op AND) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op OR) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT primitive { $p = $primitive.p }) (ALT (= exp expr_arit) AS types { $p = expressions.NewCast($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p, $types.ty) }) (ALT (= exp expr_arit) PUNTO TOSTR { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO TOOWN { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO CLONE { $p = expressions.NewClone($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO ABS { $p = expressions.NewAbs( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO SQRT { $p = expressions.NewSqrt( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT AMP (= exp expr_arit) { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) }) (ALT types C_PTS POW PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.INTEGER, $types.ty, $exp1.p, $exp2.p) }) (ALT types C_PTS POWF PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.FLOAT, $types.ty, $exp1.p, $exp2.p) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT expVectors { $p = $expVectors.ev }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT funcVectors { $p = $funcVectors.ev }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT STRING {
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         }) (ALT CHARACTER {
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {
                                        StrExp := environment.NewStructContent($ID.text, $expression.p)
                                        $list.l.Add(StrExp);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS expression {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                }))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT VECTOR1 NOT CORIZQ listParams CORDER { $ev = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l, nil, nil) }) (ALT VECTOR1 NOT CORIZQ listVec CORDER { $ev = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, nil, $listVec.lv, nil) }) (ALT VECTOR2 C_PTS NEW PARIZQ PARDER { $ev = expressions.NewVector($VECTOR2.line, $VECTOR2.pos, nil, nil, nil) }) (ALT VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $ev = expressions.NewVector($VECTOR2.line, $VECTOR2.pos, nil, nil, $expression.p) }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { $lv = expressions.NewVectorList($exp1.start.GetLine(),$exp1.start.GetColumn(), $exp1.p, $exp2.p) }))) (RULE funcVectors (returns interfaces.Expression ev) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expression PARDER { $ev = expressions.NewRemove($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO CONTAINS PARIZQ AMP expression PARDER { $ev = expressions.NewContains($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO LEN PARIZQ PARDER { $ev = expressions.NewLen($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { $ev = expressions.NewCapacity($ID.line, $ID.pos, $ID.text) }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { $cm = expressions.NewModuleAccess($listIdMod.start.GetLine(),$listIdMod.start.GetColumn(), $listIdMod.l, $expression.p ) }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {
                              $list.l.Add($ID.text)
                              $l = $list.l
                           }) (ALT ID C_PTS {
               $l = arrayList.New()
               $l.Add($ID.text)
            })))))
2022-03-26 11:18:42:498 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module { $hi = $module.mod }) (ALT structCreation { $hi = $structCreation.dec }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER { $mod = instructions.NewModule($MODULE.line, $MODULE.pos, $ID.text, $moduleContent.m ) }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {
                                    newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                    $mc.m.Add(newObj)
                                    $m = $mc.m
                                 }) (ALT (= mc moduleContent) PUB moduleAction {
                                       newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                       $mc.m.Add(newObj)
                                       $m = $mc.m
                                    }) (ALT (= mc moduleContent) module {
                              newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                              $mc.m.Add(newObj)
                              $m = $mc.m
                           }) (ALT (= mc moduleContent) moduleAction {
                                newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                $mc.m.Add(newObj)
                                $m = $mc.m
                             }) (ALT PUB module {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               }) (ALT PUB moduleAction {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  }) (ALT module {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            }) (ALT moduleAction {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { $ma = $function.fun }) (ALT structCreation { $ma = $structCreation.dec }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { $iv = instructions.NewPush($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $iv = instructions.NewInsert($ID.line, $ID.pos, $ID.text, $exp1.p, $exp2.p) }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER { $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) }))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ instructions LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN PYC { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }) (ALT RETURN expression { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) }) (ALT RETURN { $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        }))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         }) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        }))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {
                                $lma.ma.Add($expression.p)
                                $ma = $lma.ma
                             }) (ALT expression {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) }) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, false, $expression.p, "") }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, true, $expression.p, "") }) (ALT LET ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, false, $expression.p, $tipo.text) }) (ALT LET MUT ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, true, $expression.p, $tipo.text) }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {
                                        StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                        $list.l.Add(StrDef);
                                        $l = $list.l;
                                    }) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {
                                          StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                          $list.l.Add(StrDef);
                                          $l = $list.l;
                                      }) (ALT (= id1 ID) D_PTS types {
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }) (ALT (= id1 ID) D_PTS (= id2 ID) {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  }))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) }) (ALT ID listAccessArray IGUAL expression { $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) }))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {
                                   $list.l.Add($ID.text)
                                   $l = $list.l
                                  }) (ALT ID {
    $l = arrayList.New()
    $l.Add($ID.text)
}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                                 }) (ALT CORIZQ expression CORDER {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          }))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        }) (ALT CORIZQ types PYC expression CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         }) (ALT CORIZQ types CORDER {
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, nil)
                            $t.Add(newType)
                         }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT ID D_PTS arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT USIZE { $ty = environment.INTEGER }) (ALT ARRAY { $ty = environment.ARRAY }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (= opIz expr_arit) (= op (SET MUL DIV MOD)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IG_IG DIFERENTE)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op AND) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op OR) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT primitive { $p = $primitive.p }) (ALT (= exp expr_arit) AS types { $p = expressions.NewCast($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p, $types.ty) }) (ALT (= exp expr_arit) PUNTO TOSTR { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO TOOWN { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO CLONE { $p = expressions.NewClone($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO ABS { $p = expressions.NewAbs( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT (= exp expr_arit) PUNTO SQRT { $p = expressions.NewSqrt( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT AMP (= exp expr_arit) { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) }) (ALT types C_PTS POW PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.INTEGER, $types.ty, $exp1.p, $exp2.p) }) (ALT types C_PTS POWF PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.FLOAT, $types.ty, $exp1.p, $exp2.p) }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT expVectors { $p = $expVectors.ev }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT funcVectors { $p = $funcVectors.ev }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT STRING {
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         }) (ALT CHARACTER {
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {
                                        StrExp := environment.NewStructContent($ID.text, $expression.p)
                                        $list.l.Add(StrExp);
                                        $l = $list.l;
                                    }) (ALT ID D_PTS expression {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                }))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT VECTOR1 NOT CORIZQ listParams CORDER { $ev = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l, nil, nil) }) (ALT VECTOR1 NOT CORIZQ listVec CORDER { $ev = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, nil, $listVec.lv, nil) }) (ALT VECTOR2 C_PTS NEW PARIZQ PARDER { $ev = expressions.NewVector($VECTOR2.line, $VECTOR2.pos, nil, nil, nil) }) (ALT VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { $ev = expressions.NewVector($VECTOR2.line, $VECTOR2.pos, nil, nil, $expression.p) }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { $lv = expressions.NewVectorList($exp1.start.GetLine(),$exp1.start.GetColumn(), $exp1.p, $exp2.p) }))) (RULE funcVectors (returns interfaces.Expression ev) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expression PARDER { $ev = expressions.NewRemove($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO CONTAINS PARIZQ AMP expression PARDER { $ev = expressions.NewContains($ID.line, $ID.pos, $ID.text, $expression.p) }) (ALT ID PUNTO LEN PARIZQ PARDER { $ev = expressions.NewLen($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { $ev = expressions.NewCapacity($ID.line, $ID.pos, $ID.text) }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { $cm = expressions.NewModuleAccess($listIdMod.start.GetLine(),$listIdMod.start.GetColumn(), $listIdMod.l, $expression.p ) }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {
                              $list.l.Add($ID.text)
                              $l = $list.l
                           }) (ALT ID C_PTS {
               $l = arrayList.New()
               $l.Add($ID.text)
            })))))
2022-03-26 11:18:42:743 left-recursion LogManager.java:25 moduleContent returns [*arrayList.List m]
    :   ( {} PUB<tokenIndex=153> module<tokenIndex=155> {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               } 
        | PUB<tokenIndex=161> moduleAction<tokenIndex=163> {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  } 
        | module<tokenIndex=169> {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            } 
        | moduleAction<tokenIndex=175> {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> PUB<tokenIndex=113> module<tokenIndex=115> {
                                              newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                              $mc.m.Add(newObj)
                                              $m = $mc.m
                                           }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUB<tokenIndex=125> moduleAction<tokenIndex=127> {
                                                 newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                                 $mc.m.Add(newObj)
                                                 $m = $mc.m
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> module<tokenIndex=137> {
                                        newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                                        $mc.m.Add(newObj)
                                        $m = $mc.m
                                     }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> moduleAction<tokenIndex=147> {
                                          newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                          $mc.m.Add(newObj)
                                          $m = $mc.m
                                       }
        )*
    ;
2022-03-26 11:18:42:752 grammar LogManager.java:25 added: (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (BLOCK (ALT {} (PUB (ELEMENT_OPTIONS (= tokenIndex 153))) (module (ELEMENT_OPTIONS (= tokenIndex 155))) {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               }) (ALT (PUB (ELEMENT_OPTIONS (= tokenIndex 161))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 163))) {
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  }) (ALT (module (ELEMENT_OPTIONS (= tokenIndex 169))) {
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            }) (ALT (moduleAction (ELEMENT_OPTIONS (= tokenIndex 175))) {
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (PUB (ELEMENT_OPTIONS (= tokenIndex 113))) (module (ELEMENT_OPTIONS (= tokenIndex 115))) {
                                              newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                              $mc.m.Add(newObj)
                                              $m = $mc.m
                                           }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUB (ELEMENT_OPTIONS (= tokenIndex 125))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 127))) {
                                                 newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                                 $mc.m.Add(newObj)
                                                 $m = $mc.m
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (module (ELEMENT_OPTIONS (= tokenIndex 137))) {
                                        newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                                        $mc.m.Add(newObj)
                                        $m = $mc.m
                                     }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 147))) {
                                          newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                          $mc.m.Add(newObj)
                                          $m = $mc.m
                                       }))))))
2022-03-26 11:18:42:834 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=426> {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              } 
        | AMP<tokenIndex=432> MUT<tokenIndex=434> expression<tokenIndex=436> {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     } 
        | {
          $l = arrayList.New()
       } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=403> expression<tokenIndex=405>{
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=414> AMP<tokenIndex=416> MUT<tokenIndex=418> expression<tokenIndex=420> {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }
        )*
    ;
2022-03-26 11:18:42:837 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 426))) {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 432))) (MUT (ELEMENT_OPTIONS (= tokenIndex 434))) (expression (ELEMENT_OPTIONS (= tokenIndex 436))) {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 403))) (expression (ELEMENT_OPTIONS (= tokenIndex 405))) {
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 414))) (AMP (ELEMENT_OPTIONS (= tokenIndex 416))) (MUT (ELEMENT_OPTIONS (= tokenIndex 418))) (expression (ELEMENT_OPTIONS (= tokenIndex 420))) {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }))))))
2022-03-26 11:18:42:895 left-recursion LogManager.java:25 block returns [*arrayList.List blk]
    :   ( {} instruction<tokenIndex=690> { $blk.Add($instruction.inst) } 
        | expression<tokenIndex=696> { $blk.Add($expression.p) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> instruction<tokenIndex=674> {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> expression<tokenIndex=684> {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }
        )*
    ;
2022-03-26 11:18:42:896 grammar LogManager.java:25 added: (RULE block (returns *arrayList.List blk) (BLOCK (ALT (BLOCK (ALT {} (instruction (ELEMENT_OPTIONS (= tokenIndex 690))) { $blk.Add($instruction.inst) }) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 696))) { $blk.Add($expression.p) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (instruction (ELEMENT_OPTIONS (= tokenIndex 674))) {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (expression (ELEMENT_OPTIONS (= tokenIndex 684))) {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }))))))
2022-03-26 11:18:42:945 left-recursion LogManager.java:25 listMatch returns [*arrayList.List ma]
    :   ( {} expression<tokenIndex=783> {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PLEC<tokenIndex=775> expression<tokenIndex=777> {
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       }
        )*
    ;
2022-03-26 11:18:42:949 grammar LogManager.java:25 added: (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 783))) {
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PLEC (ELEMENT_OPTIONS (= tokenIndex 775))) (expression (ELEMENT_OPTIONS (= tokenIndex 777))) {
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       }))))))
2022-03-26 11:18:42:991 left-recursion LogManager.java:25 listStructDec returns [*arrayList.List l]
    :   ( {} id1=ID<tokenIndex=1127> D_PTS<tokenIndex=1129> types<tokenIndex=1131>{
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                } 
        | id1=ID<tokenIndex=1138> D_PTS<tokenIndex=1140> id2=ID<tokenIndex=1144> {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=1091> id1=ID<tokenIndex=1095> D_PTS<tokenIndex=1097> types<tokenIndex=1099> {
                                                  StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1109> id1=ID<tokenIndex=1113> D_PTS<tokenIndex=1115> id2=ID<tokenIndex=1119> {
                                                    StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                                    $list.l.Add(StrDef);
                                                    $l = $list.l;
                                                }
        )*
    ;
2022-03-26 11:18:42:993 grammar LogManager.java:25 added: (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1127)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1129))) (types (ELEMENT_OPTIONS (= tokenIndex 1131))) {
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1138)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1140))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1144)))) {
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1091))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1095)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1097))) (types (ELEMENT_OPTIONS (= tokenIndex 1099))) {
                                                  StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1109))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1113)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1115))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1119)))) {
                                                    StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                                    $list.l.Add(StrDef);
                                                    $l = $list.l;
                                                }))))))
2022-03-26 11:18:43:023 left-recursion LogManager.java:25 listAccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1209> {
    $l = arrayList.New()
    $l.Add($ID.text)
} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1201> ID<tokenIndex=1203> {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }
        )*
    ;
2022-03-26 11:18:43:025 grammar LogManager.java:25 added: (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1209))) {
    $l = arrayList.New()
    $l.Add($ID.text)
})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1201))) (ID (ELEMENT_OPTIONS (= tokenIndex 1203))) {
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            }))))))
2022-03-26 11:18:43:056 left-recursion LogManager.java:25 listAccessArray returns [*arrayList.List l]
    :   ( {} CORIZQ<tokenIndex=1235> expression<tokenIndex=1237> CORDER<tokenIndex=1239>{
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1226> expression<tokenIndex=1228> CORDER<tokenIndex=1230>{
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           }
        )*
    ;
2022-03-26 11:18:43:057 grammar LogManager.java:25 added: (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1235))) (expression (ELEMENT_OPTIONS (= tokenIndex 1237))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1239))) {
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1226))) (expression (ELEMENT_OPTIONS (= tokenIndex 1228))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1230))) {
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           }))))))
2022-03-26 11:18:43:087 left-recursion LogManager.java:25 listParamsFunc returns [*arrayList.List lpf]
    :   ( {} ID<tokenIndex=1514> D_PTS<tokenIndex=1516> types<tokenIndex=1518>{
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             } 
        | ID<tokenIndex=1523> D_PTS<tokenIndex=1525> AMP<tokenIndex=1527> MUT<tokenIndex=1529> arrayType<tokenIndex=1531> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1539> D_PTS<tokenIndex=1541> AMP<tokenIndex=1543> MUT<tokenIndex=1545> VECTOR2<tokenIndex=1547> MENOR<tokenIndex=1549> id2=ID<tokenIndex=1553> MAYOR<tokenIndex=1555> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              } 
        | ID<tokenIndex=1561> D_PTS<tokenIndex=1563> arrayType<tokenIndex=1565> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1573> D_PTS<tokenIndex=1575> VECTOR2<tokenIndex=1577> MENOR<tokenIndex=1579> id2=ID<tokenIndex=1583> MAYOR<tokenIndex=1585>  {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              } 
        | { $lpf = arrayList.New() } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> COMA<tokenIndex=1410> ID<tokenIndex=1412> D_PTS<tokenIndex=1414> types<tokenIndex=1416> {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> COMA<tokenIndex=1426> ID<tokenIndex=1428> D_PTS<tokenIndex=1430> AMP<tokenIndex=1432> MUT<tokenIndex=1434> arrayType<tokenIndex=1436> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> COMA<tokenIndex=1446> id1=ID<tokenIndex=1450> D_PTS<tokenIndex=1452> AMP<tokenIndex=1454> MUT<tokenIndex=1456> VECTOR2<tokenIndex=1458> MENOR<tokenIndex=1460> id2=ID<tokenIndex=1464> MAYOR<tokenIndex=1466> {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> COMA<tokenIndex=1476> ID<tokenIndex=1478> D_PTS<tokenIndex=1480> arrayType<tokenIndex=1482> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> COMA<tokenIndex=1492> id1=ID<tokenIndex=1496> D_PTS<tokenIndex=1498> VECTOR2<tokenIndex=1500> MENOR<tokenIndex=1502> id2=ID<tokenIndex=1506> MAYOR<tokenIndex=1508>  {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
        )*
    ;
2022-03-26 11:18:43:095 grammar LogManager.java:25 added: (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1514))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1516))) (types (ELEMENT_OPTIONS (= tokenIndex 1518))) {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1523))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1525))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1527))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1529))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1531))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1539)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1541))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1543))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1545))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1547))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1549))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1553)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1555))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1561))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1563))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1565))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1573)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1575))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1577))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1579))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1583)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1585))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1410))) (ID (ELEMENT_OPTIONS (= tokenIndex 1412))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1414))) (types (ELEMENT_OPTIONS (= tokenIndex 1416))) {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1426))) (ID (ELEMENT_OPTIONS (= tokenIndex 1428))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1430))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1432))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1434))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1436))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1446))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1450)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1452))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1454))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1456))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1458))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1460))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1464)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1466))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1476))) (ID (ELEMENT_OPTIONS (= tokenIndex 1478))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1480))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1482))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1492))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1496)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1498))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1500))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1502))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1506)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1508))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }))))))
2022-03-26 11:18:43:129 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=1681> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1673> expression<tokenIndex=1675>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-03-26 11:18:43:132 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 1681))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1673))) (expression (ELEMENT_OPTIONS (= tokenIndex 1675))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-03-26 11:18:43:161 left-recursion LogManager.java:25 expression returns [interfaces.Expression p]
    :   ( {} expr_arit<tokenIndex=1727> { $p = $expr_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> PUNTO<tokenIndex=1737> PUNTO<tokenIndex=1739> expdos=expression<tokenIndex=1743,p=2> { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }
        )*
    ;
2022-03-26 11:18:43:163 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1727))) { $p = $expr_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1737))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1739))) (= expdos (expression (ELEMENT_OPTIONS (= tokenIndex 1743) (= p 2)))) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))))))
2022-03-26 11:18:43:198 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} SUB<tokenIndex=1858> opDe=expr_arit<tokenIndex=1862,p=24> {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)} 
        | NOT<tokenIndex=1868> opDe=expr_arit<tokenIndex=1872,p=23> {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)} 
        | primitive<tokenIndex=1878> { $p = $primitive.p } 
        | AMP<tokenIndex=1956> exp=expr_arit<tokenIndex=1960,p=15> { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) } 
        | types<tokenIndex=1966> C_PTS<tokenIndex=1968> POW<tokenIndex=1970> PARIZQ<tokenIndex=1972> exp1=expression<tokenIndex=1976> COMA<tokenIndex=1978> exp2=expression<tokenIndex=1982> PARDER<tokenIndex=1984> { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.INTEGER, $types.ty, $exp1.p, $exp2.p) } 
        | types<tokenIndex=1990> C_PTS<tokenIndex=1992> POWF<tokenIndex=1994> PARIZQ<tokenIndex=1996> exp1=expression<tokenIndex=2000> COMA<tokenIndex=2002> exp2=expression<tokenIndex=2006> PARDER<tokenIndex=2008> { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.FLOAT, $types.ty, $exp1.p, $exp2.p) } 
        | PARIZQ<tokenIndex=2014> expression<tokenIndex=2016> PARDER<tokenIndex=2018> { $p = $expression.p } 
        | CORIZQ<tokenIndex=2024> listParams<tokenIndex=2026> CORDER<tokenIndex=2028> { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | expVectors<tokenIndex=2034> { $p = $expVectors.ev } 
        | ID<tokenIndex=2040> LLAVEIZQ<tokenIndex=2042> listStructExp<tokenIndex=2044> LLAVEDER<tokenIndex=2046> { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | callFunction<tokenIndex=2052> { $p = $callFunction.cf } 
        | callFunction<tokenIndex=2058> PYC<tokenIndex=2060> { $p = $callFunction.cf } 
        | callModule<tokenIndex=2066> { $p = $callModule.cm } 
        | callModule<tokenIndex=2072> PYC<tokenIndex=2074> { $p = $callModule.cm } 
        | condIf<tokenIndex=2080> { $p = $condIf.ifCond } 
        | condMatch<tokenIndex=2086> { $p = $condMatch.mtch } 
        | loopBucle<tokenIndex=2092> { $p = $loopBucle.lb } 
        | funcVectors<tokenIndex=2098> { $p = $funcVectors.ev } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 29)}?<p=29> op=(MUL<tokenIndex=1763>|DIV<tokenIndex=1765>|MOD<tokenIndex=1767>) opDe=expr_arit<tokenIndex=1772,p=30> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 28)}?<p=28> op=(ADD<tokenIndex=1785>|SUB<tokenIndex=1787>) opDe=expr_arit<tokenIndex=1792,p=29> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 27)}?<p=27> op=(MENOR<tokenIndex=1805>|MENORIGUAL<tokenIndex=1807>|MAYORIGUAL<tokenIndex=1809>|MAYOR<tokenIndex=1811>|IG_IG<tokenIndex=1813>|DIFERENTE<tokenIndex=1815>) opDe=expr_arit<tokenIndex=1820,p=28> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 26)}?<p=26> op=AND<tokenIndex=1832> opDe=expr_arit<tokenIndex=1836,p=27> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> op=OR<tokenIndex=1848> opDe=expr_arit<tokenIndex=1852,p=26> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> AS<tokenIndex=1888> types<tokenIndex=1890> { $p = expressions.NewCast($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p, $types.ty) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> PUNTO<tokenIndex=1900> TOSTR<tokenIndex=1902> { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> PUNTO<tokenIndex=1912> TOOWN<tokenIndex=1914> { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> PUNTO<tokenIndex=1924> CLONE<tokenIndex=1926> { $p = expressions.NewClone($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> PUNTO<tokenIndex=1936> ABS<tokenIndex=1938>  { $p = expressions.NewAbs( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> PUNTO<tokenIndex=1948> SQRT<tokenIndex=1950> { $p = expressions.NewSqrt( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }
        )*
    ;
2022-03-26 11:18:43:211 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 1858))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1862) (= p 24)))) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 1868))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1872) (= p 23)))) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 1878))) { $p = $primitive.p }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 1956))) (= exp (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1960) (= p 15)))) { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) }) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 1966))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 1968))) (POW (ELEMENT_OPTIONS (= tokenIndex 1970))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1972))) (= exp1 (expression (ELEMENT_OPTIONS (= tokenIndex 1976)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1978))) (= exp2 (expression (ELEMENT_OPTIONS (= tokenIndex 1982)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1984))) { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.INTEGER, $types.ty, $exp1.p, $exp2.p) }) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 1990))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 1992))) (POWF (ELEMENT_OPTIONS (= tokenIndex 1994))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1996))) (= exp1 (expression (ELEMENT_OPTIONS (= tokenIndex 2000)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2002))) (= exp2 (expression (ELEMENT_OPTIONS (= tokenIndex 2006)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2008))) { $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.FLOAT, $types.ty, $exp1.p, $exp2.p) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2014))) (expression (ELEMENT_OPTIONS (= tokenIndex 2016))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2018))) { $p = $expression.p }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2024))) (listParams (ELEMENT_OPTIONS (= tokenIndex 2026))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2028))) { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (expVectors (ELEMENT_OPTIONS (= tokenIndex 2034))) { $p = $expVectors.ev }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2040))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 2042))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 2044))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 2046))) { $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2052))) { $p = $callFunction.cf }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2058))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2060))) { $p = $callFunction.cf }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2066))) { $p = $callModule.cm }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2072))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2074))) { $p = $callModule.cm }) (ALT (condIf (ELEMENT_OPTIONS (= tokenIndex 2080))) { $p = $condIf.ifCond }) (ALT (condMatch (ELEMENT_OPTIONS (= tokenIndex 2086))) { $p = $condMatch.mtch }) (ALT (loopBucle (ELEMENT_OPTIONS (= tokenIndex 2092))) { $p = $loopBucle.lb }) (ALT (funcVectors (ELEMENT_OPTIONS (= tokenIndex 2098))) { $p = $funcVectors.ev })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 29)}? (ELEMENT_OPTIONS (= p 29))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1763))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1765))) (MOD (ELEMENT_OPTIONS (= tokenIndex 1767))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1772) (= p 30)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 28)}? (ELEMENT_OPTIONS (= p 28))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1785))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1787))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1792) (= p 29)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 27)}? (ELEMENT_OPTIONS (= p 27))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 1805))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 1807))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 1809))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1811))) (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1813))) (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 1815))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1820) (= p 28)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 26)}? (ELEMENT_OPTIONS (= p 26))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1832)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1836) (= p 27)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1848)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 1852) (= p 26)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (AS (ELEMENT_OPTIONS (= tokenIndex 1888))) (types (ELEMENT_OPTIONS (= tokenIndex 1890))) { $p = expressions.NewCast($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p, $types.ty) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1900))) (TOSTR (ELEMENT_OPTIONS (= tokenIndex 1902))) { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1912))) (TOOWN (ELEMENT_OPTIONS (= tokenIndex 1914))) { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1924))) (CLONE (ELEMENT_OPTIONS (= tokenIndex 1926))) { $p = expressions.NewClone($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1936))) (ABS (ELEMENT_OPTIONS (= tokenIndex 1938))) { $p = expressions.NewAbs( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1948))) (SQRT (ELEMENT_OPTIONS (= tokenIndex 1950))) { $p = expressions.NewSqrt( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) }))))))
2022-03-26 11:18:43:240 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=2185> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=2161> expression<tokenIndex=2163> CORDER<tokenIndex=2165> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=2177> ID<tokenIndex=2179> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2022-03-26 11:18:43:242 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2185))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2161))) (expression (ELEMENT_OPTIONS (= tokenIndex 2163))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2165))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2177))) (ID (ELEMENT_OPTIONS (= tokenIndex 2179))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2022-03-26 11:18:43:269 left-recursion LogManager.java:25 listStructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2214> D_PTS<tokenIndex=2216> expression<tokenIndex=2218>{
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2202> ID<tokenIndex=2204> D_PTS<tokenIndex=2206> expression<tokenIndex=2208> {
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              }
        )*
    ;
2022-03-26 11:18:43:272 grammar LogManager.java:25 added: (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2214))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2216))) (expression (ELEMENT_OPTIONS (= tokenIndex 2218))) {
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2202))) (ID (ELEMENT_OPTIONS (= tokenIndex 2204))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2206))) (expression (ELEMENT_OPTIONS (= tokenIndex 2208))) {
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              }))))))
2022-03-26 11:18:43:294 left-recursion LogManager.java:25 listIdMod returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2413> C_PTS<tokenIndex=2415> {
               $l = arrayList.New()
               $l.Add($ID.text)
            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ID<tokenIndex=2405> C_PTS<tokenIndex=2407> {
                                        $list.l.Add($ID.text)
                                        $l = $list.l
                                     }
        )*
    ;
2022-03-26 11:18:43:295 grammar LogManager.java:25 added: (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2413))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2415))) {
               $l = arrayList.New()
               $l.Add($ID.text)
            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (ID (ELEMENT_OPTIONS (= tokenIndex 2405))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2407))) {
                                        $list.l.Add($ID.text)
                                        $l = $list.l
                                     }))))))
2022-03-26 11:18:43:314 grammar LogManager.java:25 import INT=1
2022-03-26 11:18:43:314 grammar LogManager.java:25 import FLOAT=2
2022-03-26 11:18:43:314 grammar LogManager.java:25 import BOOL=3
2022-03-26 11:18:43:314 grammar LogManager.java:25 import CHAR=4
2022-03-26 11:18:43:314 grammar LogManager.java:25 import STR1=5
2022-03-26 11:18:43:314 grammar LogManager.java:25 import STR2=6
2022-03-26 11:18:43:314 grammar LogManager.java:25 import USIZE=7
2022-03-26 11:18:43:314 grammar LogManager.java:25 import VECTOR1=8
2022-03-26 11:18:43:314 grammar LogManager.java:25 import VECTOR2=9
2022-03-26 11:18:43:315 grammar LogManager.java:25 import STRUCT=10
2022-03-26 11:18:43:315 grammar LogManager.java:25 import ARRAY=11
2022-03-26 11:18:43:315 grammar LogManager.java:25 import AS=12
2022-03-26 11:18:43:315 grammar LogManager.java:25 import TRU=13
2022-03-26 11:18:43:315 grammar LogManager.java:25 import FAL=14
2022-03-26 11:18:43:315 grammar LogManager.java:25 import POWF=15
2022-03-26 11:18:43:315 grammar LogManager.java:25 import POW=16
2022-03-26 11:18:43:315 grammar LogManager.java:25 import PRINT=17
2022-03-26 11:18:43:315 grammar LogManager.java:25 import LET=18
2022-03-26 11:18:43:315 grammar LogManager.java:25 import MUT=19
2022-03-26 11:18:43:315 grammar LogManager.java:25 import FUNC=20
2022-03-26 11:18:43:315 grammar LogManager.java:25 import ARROW1=21
2022-03-26 11:18:43:315 grammar LogManager.java:25 import ARROW2=22
2022-03-26 11:18:43:315 grammar LogManager.java:25 import ABS=23
2022-03-26 11:18:43:315 grammar LogManager.java:25 import SQRT=24
2022-03-26 11:18:43:315 grammar LogManager.java:25 import TOSTR=25
2022-03-26 11:18:43:315 grammar LogManager.java:25 import TOOWN=26
2022-03-26 11:18:43:315 grammar LogManager.java:25 import CLONE=27
2022-03-26 11:18:43:315 grammar LogManager.java:25 import NEW=28
2022-03-26 11:18:43:315 grammar LogManager.java:25 import LEN=29
2022-03-26 11:18:43:315 grammar LogManager.java:25 import PUSH=30
2022-03-26 11:18:43:315 grammar LogManager.java:25 import REMOVE=31
2022-03-26 11:18:43:315 grammar LogManager.java:25 import CONTAINS=32
2022-03-26 11:18:43:315 grammar LogManager.java:25 import INSERT=33
2022-03-26 11:18:43:316 grammar LogManager.java:25 import CAPACITY=34
2022-03-26 11:18:43:316 grammar LogManager.java:25 import WCAPACITY=35
2022-03-26 11:18:43:316 grammar LogManager.java:25 import MAIN=36
2022-03-26 11:18:43:316 grammar LogManager.java:25 import IF=37
2022-03-26 11:18:43:316 grammar LogManager.java:25 import ELSE=38
2022-03-26 11:18:43:316 grammar LogManager.java:25 import MATCH=39
2022-03-26 11:18:43:316 grammar LogManager.java:25 import LOOP=40
2022-03-26 11:18:43:316 grammar LogManager.java:25 import WHILE=41
2022-03-26 11:18:43:316 grammar LogManager.java:25 import FOR=42
2022-03-26 11:18:43:316 grammar LogManager.java:25 import IN=43
2022-03-26 11:18:43:316 grammar LogManager.java:25 import BREAK=44
2022-03-26 11:18:43:316 grammar LogManager.java:25 import CONTINUE=45
2022-03-26 11:18:43:316 grammar LogManager.java:25 import RETURN=46
2022-03-26 11:18:43:316 grammar LogManager.java:25 import MODULE=47
2022-03-26 11:18:43:316 grammar LogManager.java:25 import PUB=48
2022-03-26 11:18:43:316 grammar LogManager.java:25 import NUMBER=49
2022-03-26 11:18:43:316 grammar LogManager.java:25 import STRING=50
2022-03-26 11:18:43:316 grammar LogManager.java:25 import ID=51
2022-03-26 11:18:43:316 grammar LogManager.java:25 import CHARACTER=52
2022-03-26 11:18:43:316 grammar LogManager.java:25 import PUNTO=53
2022-03-26 11:18:43:316 grammar LogManager.java:25 import C_PTS=54
2022-03-26 11:18:43:316 grammar LogManager.java:25 import D_PTS=55
2022-03-26 11:18:43:316 grammar LogManager.java:25 import PYC=56
2022-03-26 11:18:43:316 grammar LogManager.java:25 import COMA=57
2022-03-26 11:18:43:317 grammar LogManager.java:25 import DIFERENTE=58
2022-03-26 11:18:43:317 grammar LogManager.java:25 import IG_IG=59
2022-03-26 11:18:43:317 grammar LogManager.java:25 import NOT=60
2022-03-26 11:18:43:317 grammar LogManager.java:25 import OR=61
2022-03-26 11:18:43:317 grammar LogManager.java:25 import PLEC=62
2022-03-26 11:18:43:317 grammar LogManager.java:25 import UNDERSCORE=63
2022-03-26 11:18:43:317 grammar LogManager.java:25 import AND=64
2022-03-26 11:18:43:317 grammar LogManager.java:25 import IGUAL=65
2022-03-26 11:18:43:317 grammar LogManager.java:25 import MAYORIGUAL=66
2022-03-26 11:18:43:317 grammar LogManager.java:25 import MENORIGUAL=67
2022-03-26 11:18:43:317 grammar LogManager.java:25 import MAYOR=68
2022-03-26 11:18:43:317 grammar LogManager.java:25 import MENOR=69
2022-03-26 11:18:43:317 grammar LogManager.java:25 import MUL=70
2022-03-26 11:18:43:317 grammar LogManager.java:25 import DIV=71
2022-03-26 11:18:43:317 grammar LogManager.java:25 import ADD=72
2022-03-26 11:18:43:317 grammar LogManager.java:25 import SUB=73
2022-03-26 11:18:43:317 grammar LogManager.java:25 import MOD=74
2022-03-26 11:18:43:317 grammar LogManager.java:25 import PARIZQ=75
2022-03-26 11:18:43:317 grammar LogManager.java:25 import PARDER=76
2022-03-26 11:18:43:317 grammar LogManager.java:25 import LLAVEIZQ=77
2022-03-26 11:18:43:317 grammar LogManager.java:25 import LLAVEDER=78
2022-03-26 11:18:43:318 grammar LogManager.java:25 import CORIZQ=79
2022-03-26 11:18:43:318 grammar LogManager.java:25 import CORDER=80
2022-03-26 11:18:43:318 grammar LogManager.java:25 import AMP=81
2022-03-26 11:18:43:318 grammar LogManager.java:25 import WHITESPACE=82
2022-03-26 11:18:43:318 grammar LogManager.java:25 import COMMENT=83
2022-03-26 11:18:43:318 grammar LogManager.java:25 import LINE_COMMENT=84
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'i64'=1
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'f64'=2
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'bool'=3
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'char'=4
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'String'=5
2022-03-26 11:18:43:318 grammar LogManager.java:25 import '&str'=6
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'usize'=7
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'vec'=8
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'Vec'=9
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'struct'=10
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'array'=11
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'as'=12
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'true'=13
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'false'=14
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'powf'=15
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'pow'=16
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'println!'=17
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'let'=18
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'mut'=19
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'fn'=20
2022-03-26 11:18:43:318 grammar LogManager.java:25 import '->'=21
2022-03-26 11:18:43:318 grammar LogManager.java:25 import '=>'=22
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'abs()'=23
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'sqrt()'=24
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'to_string()'=25
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'to_owned()'=26
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'clone()'=27
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'new'=28
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'len'=29
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'push'=30
2022-03-26 11:18:43:318 grammar LogManager.java:25 import 'remove'=31
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'contains'=32
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'insert'=33
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'capacity'=34
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'with_capacity'=35
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'main'=36
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'if'=37
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'else'=38
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'match'=39
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'loop'=40
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'while'=41
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'for'=42
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'in'=43
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'break'=44
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'continue'=45
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'return'=46
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'mod'=47
2022-03-26 11:18:43:319 grammar LogManager.java:25 import 'pub'=48
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '.'=53
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '::'=54
2022-03-26 11:18:43:319 grammar LogManager.java:25 import ':'=55
2022-03-26 11:18:43:319 grammar LogManager.java:25 import ';'=56
2022-03-26 11:18:43:319 grammar LogManager.java:25 import ','=57
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '!='=58
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '=='=59
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '!'=60
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '||'=61
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '|'=62
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '_'=63
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '&&'=64
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '='=65
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '>='=66
2022-03-26 11:18:43:319 grammar LogManager.java:25 import '<='=67
2022-03-26 11:18:43:323 grammar LogManager.java:25 import '>'=68
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '<'=69
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '*'=70
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '/'=71
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '+'=72
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '-'=73
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '%'=74
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '('=75
2022-03-26 11:18:43:324 grammar LogManager.java:25 import ')'=76
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '{'=77
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '}'=78
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '['=79
2022-03-26 11:18:43:324 grammar LogManager.java:25 import ']'=80
2022-03-26 11:18:43:324 grammar LogManager.java:25 import '&'=81
2022-03-26 11:18:43:324 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, ARRAY=11, AS=12, TRU=13, FAL=14, POWF=15, POW=16, PRINT=17, LET=18, MUT=19, FUNC=20, ARROW1=21, ARROW2=22, ABS=23, SQRT=24, TOSTR=25, TOOWN=26, CLONE=27, NEW=28, LEN=29, PUSH=30, REMOVE=31, CONTAINS=32, INSERT=33, CAPACITY=34, WCAPACITY=35, MAIN=36, IF=37, ELSE=38, MATCH=39, LOOP=40, WHILE=41, FOR=42, IN=43, BREAK=44, CONTINUE=45, RETURN=46, MODULE=47, PUB=48, NUMBER=49, STRING=50, ID=51, CHARACTER=52, PUNTO=53, C_PTS=54, D_PTS=55, PYC=56, COMA=57, DIFERENTE=58, IG_IG=59, NOT=60, OR=61, PLEC=62, UNDERSCORE=63, AND=64, IGUAL=65, MAYORIGUAL=66, MENORIGUAL=67, MAYOR=68, MENOR=69, MUL=70, DIV=71, ADD=72, SUB=73, MOD=74, PARIZQ=75, PARDER=76, LLAVEIZQ=77, LLAVEDER=78, CORIZQ=79, CORDER=80, AMP=81, WHITESPACE=82, COMMENT=83, LINE_COMMENT=84, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'Vec'=9, 'struct'=10, 'array'=11, 'as'=12, 'true'=13, 'false'=14, 'powf'=15, 'pow'=16, 'println!'=17, 'let'=18, 'mut'=19, 'fn'=20, '->'=21, '=>'=22, 'abs()'=23, 'sqrt()'=24, 'to_string()'=25, 'to_owned()'=26, 'clone()'=27, 'new'=28, 'len'=29, 'push'=30, 'remove'=31, 'contains'=32, 'insert'=33, 'capacity'=34, 'with_capacity'=35, 'main'=36, 'if'=37, 'else'=38, 'match'=39, 'loop'=40, 'while'=41, 'for'=42, 'in'=43, 'break'=44, 'continue'=45, 'return'=46, 'mod'=47, 'pub'=48, '.'=53, '::'=54, ':'=55, ';'=56, ','=57, '!='=58, '=='=59, '!'=60, '||'=61, '|'=62, '_'=63, '&&'=64, '='=65, '>='=66, '<='=67, '>'=68, '<'=69, '*'=70, '/'=71, '+'=72, '-'=73, '%'=74, '('=75, ')'=76, '{'=77, '}'=78, '['=79, ']'=80, '&'=81}
2022-03-26 11:18:43:325 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, ARRAY=11, AS=12, TRU=13, FAL=14, POWF=15, POW=16, PRINT=17, LET=18, MUT=19, FUNC=20, ARROW1=21, ARROW2=22, ABS=23, SQRT=24, TOSTR=25, TOOWN=26, CLONE=27, NEW=28, LEN=29, PUSH=30, REMOVE=31, CONTAINS=32, INSERT=33, CAPACITY=34, WCAPACITY=35, MAIN=36, IF=37, ELSE=38, MATCH=39, LOOP=40, WHILE=41, FOR=42, IN=43, BREAK=44, CONTINUE=45, RETURN=46, MODULE=47, PUB=48, NUMBER=49, STRING=50, ID=51, CHARACTER=52, PUNTO=53, C_PTS=54, D_PTS=55, PYC=56, COMA=57, DIFERENTE=58, IG_IG=59, NOT=60, OR=61, PLEC=62, UNDERSCORE=63, AND=64, IGUAL=65, MAYORIGUAL=66, MENORIGUAL=67, MAYOR=68, MENOR=69, MUL=70, DIV=71, ADD=72, SUB=73, MOD=74, PARIZQ=75, PARDER=76, LLAVEIZQ=77, LLAVEDER=78, CORIZQ=79, CORDER=80, AMP=81, WHITESPACE=82, COMMENT=83, LINE_COMMENT=84}
2022-03-26 11:18:43:326 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec'=8, 'Vec'=9, 'struct'=10, 'array'=11, 'as'=12, 'true'=13, 'false'=14, 'powf'=15, 'pow'=16, 'println!'=17, 'let'=18, 'mut'=19, 'fn'=20, '->'=21, '=>'=22, 'abs()'=23, 'sqrt()'=24, 'to_string()'=25, 'to_owned()'=26, 'clone()'=27, 'new'=28, 'len'=29, 'push'=30, 'remove'=31, 'contains'=32, 'insert'=33, 'capacity'=34, 'with_capacity'=35, 'main'=36, 'if'=37, 'else'=38, 'match'=39, 'loop'=40, 'while'=41, 'for'=42, 'in'=43, 'break'=44, 'continue'=45, 'return'=46, 'mod'=47, 'pub'=48, '.'=53, '::'=54, ':'=55, ';'=56, ','=57, '!='=58, '=='=59, '!'=60, '||'=61, '|'=62, '_'=63, '&&'=64, '='=65, '>='=66, '<='=67, '>'=68, '<'=69, '*'=70, '/'=71, '+'=72, '-'=73, '%'=74, '('=75, ')'=76, '{'=77, '}'=78, '['=79, ']'=80, '&'=81}
2022-03-26 11:18:43:417 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-03-26 11:18:43:417 LL1 LogManager.java:25 look=[{10, 18, 20, 47}, 20]
2022-03-26 11:18:43:417 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:417 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-03-26 11:18:43:417 LL1 LogManager.java:25 look=[{10, 18, 20, 47}, <EOF>]
2022-03-26 11:18:43:417 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:417 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[18, 20, 47, 10]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 3 in rule moduleContent
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[48, 48, 47, {10, 20}]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 4 in rule moduleContent
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[null, null, null, null]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 5 in rule moduleContent
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[null, 78]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 6 in rule moduleAction
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[20, 10]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 7 in rule instructions
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[{10, 17..18, 37, 39..42, 44..46, 51}, 78]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[17, 18, 51, 37, 39, 41, 40, 42, 44, 45, 46, 10, 51]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 9 in rule insVectors
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[51, 51]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 10 in rule listParamsCall
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, 81, null]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 11 in rule listParamsCall
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 12 in rule listParamsCall
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[null, 76]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 13 in rule transBreak
2022-03-26 11:18:43:418 LL1 LogManager.java:25 look=[44, 44]
2022-03-26 11:18:43:418 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:418 LL1 LogManager.java:25 
DECISION 14 in rule transReturn
2022-03-26 11:18:43:419 LL1 LogManager.java:25 look=[46, 46, 46, 46]
2022-03-26 11:18:43:419 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:419 LL1 LogManager.java:25 
DECISION 15 in rule condIf
2022-03-26 11:18:43:421 LL1 LogManager.java:25 look=[38, null]
2022-03-26 11:18:43:421 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:421 LL1 LogManager.java:25 
DECISION 16 in rule condElse
2022-03-26 11:18:43:422 LL1 LogManager.java:25 look=[38, null]
2022-03-26 11:18:43:422 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:422 LL1 LogManager.java:25 
DECISION 17 in rule block
2022-03-26 11:18:43:422 LL1 LogManager.java:25 look=[{10, 17..18, 37, 39..42, 44..46, 51}, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-03-26 11:18:43:422 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:422 LL1 LogManager.java:25 
DECISION 18 in rule block
2022-03-26 11:18:43:422 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:422 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:422 LL1 LogManager.java:25 
DECISION 19 in rule block
2022-03-26 11:18:43:422 LL1 LogManager.java:25 look=[null, {57, 78}]
2022-03-26 11:18:43:422 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:422 LL1 LogManager.java:25 
DECISION 20 in rule condMatch
2022-03-26 11:18:43:423 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, {63, 78}]
2022-03-26 11:18:43:423 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:423 LL1 LogManager.java:25 
DECISION 21 in rule listArms
2022-03-26 11:18:43:423 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-03-26 11:18:43:423 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:423 LL1 LogManager.java:25 
DECISION 22 in rule listMatch
2022-03-26 11:18:43:423 LL1 LogManager.java:25 look=[null, 22]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 23 in rule defaultArm
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[63, 63, 78]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 24 in rule declaration
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[18, 18, 18, 18, 18, 18, 18]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 25 in rule vectDeclaration
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[18, 18, 18, 18]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 26 in rule listStructDec
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[51, 51]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 27 in rule listStructDec
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 28 in rule listStructDec
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[null, 78]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 29 in rule assignment
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[51, 51, 51]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 30 in rule listAccessStruct
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[null, 65]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 31 in rule listAccessArray
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[null, 65]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 32 in rule arrayType
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[79, 79, 79]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 33 in rule function
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[20, 20, 20, 20]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 34 in rule listParamsFunc
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[51, 51, 51, 51, 51, null]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 35 in rule listParamsFunc
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[null, null, null, null, null]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:424 LL1 LogManager.java:25 
DECISION 36 in rule listParamsFunc
2022-03-26 11:18:43:424 LL1 LogManager.java:25 look=[null, 76]
2022-03-26 11:18:43:424 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 37 in rule types
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 6, 8, 10, 7, 11]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 38 in rule listParams
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[null, {76, 80}]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 39 in rule callFunction
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[51, 51]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 40 in rule expression
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 41 in rule expr_arit
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[73, 60, {13..14, 49..52}, 81, {1..8, 10..11}, {1..8, 10..11}, 75, 79, {8..9}, 51, 51, 51, 51, 51, 37, 39, 40, 51]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 42 in rule expr_arit
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null, null, null]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 43 in rule expr_arit
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 44 in rule primitive
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[49, 50, 52, 13, 14, 51]
2022-03-26 11:18:43:425 LL1 LogManager.java:25 LL(1)? true
2022-03-26 11:18:43:425 LL1 LogManager.java:25 
DECISION 45 in rule listArray
2022-03-26 11:18:43:425 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:426 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:426 LL1 LogManager.java:25 
DECISION 46 in rule listArray
2022-03-26 11:18:43:426 LL1 LogManager.java:25 look=[null, null]
2022-03-26 11:18:43:426 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:426 LL1 LogManager.java:25 
DECISION 47 in rule listStructExp
2022-03-26 11:18:43:426 LL1 LogManager.java:25 look=[null, 78]
2022-03-26 11:18:43:426 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:426 LL1 LogManager.java:25 
DECISION 48 in rule expVectors
2022-03-26 11:18:43:426 LL1 LogManager.java:25 look=[8, 8, 9, 9]
2022-03-26 11:18:43:426 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:426 LL1 LogManager.java:25 
DECISION 49 in rule funcVectors
2022-03-26 11:18:43:426 LL1 LogManager.java:25 look=[51, 51, 51, 51]
2022-03-26 11:18:43:426 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:426 LL1 LogManager.java:25 
DECISION 50 in rule listIdMod
2022-03-26 11:18:43:426 LL1 LogManager.java:25 look=[null, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-03-26 11:18:43:426 LL1 LogManager.java:25 LL(1)? false
2022-03-26 11:18:43:447 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-26 11:18:43:504 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-03-26 11:18:43:505 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-03-26 11:18:43:506 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-03-26 11:18:43:508 action-translator LogManager.java:25 translate  $hi = $declaration.dec 
2022-03-26 11:18:43:508 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,29:20]
2022-03-26 11:18:43:508 action-translator LogManager.java:25 qattr [@-1,8:18='declaration',<0>,29:26].[@-1,20:22='dec',<0>,29:38]
2022-03-26 11:18:43:508 action-translator LogManager.java:25 translate  $hi = $function.fun 
2022-03-26 11:18:43:508 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,30:13]
2022-03-26 11:18:43:508 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,30:19].[@-1,17:19='fun',<0>,30:28]
2022-03-26 11:18:43:509 action-translator LogManager.java:25 translate  $hi = $module.mod 
2022-03-26 11:18:43:509 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,31:11]
2022-03-26 11:18:43:509 action-translator LogManager.java:25 qattr [@-1,8:13='module',<0>,31:17].[@-1,15:17='mod',<0>,31:24]
2022-03-26 11:18:43:509 action-translator LogManager.java:25 translate  $hi = $structCreation.dec 
2022-03-26 11:18:43:509 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,32:19]
2022-03-26 11:18:43:509 action-translator LogManager.java:25 qattr [@-1,8:21='structCreation',<0>,32:25].[@-1,23:25='dec',<0>,32:40]
2022-03-26 11:18:43:511 action-translator LogManager.java:25 translate  $mod = instructions.NewModule($MODULE.line, $MODULE.pos, $ID.text, $moduleContent.m ) 
2022-03-26 11:18:43:511 action-translator LogManager.java:25 attr [@-1,2:4='mod',<0>,36:46]
2022-03-26 11:18:43:511 action-translator LogManager.java:25 qattr [@-1,32:37='MODULE',<0>,36:76].[@-1,39:42='line',<0>,36:83]
2022-03-26 11:18:43:511 action-translator LogManager.java:25 qattr [@-1,46:51='MODULE',<0>,36:90].[@-1,53:55='pos',<0>,36:97]
2022-03-26 11:18:43:511 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,36:103].[@-1,62:65='text',<0>,36:106]
2022-03-26 11:18:43:511 action-translator LogManager.java:25 qattr [@-1,69:81='moduleContent',<0>,36:113].[@-1,83:83='m',<0>,36:127]
2022-03-26 11:18:43:512 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:512 action-translator LogManager.java:25 translate 
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD,  $module.mod)
                  $m.Add(newObj)
               
2022-03-26 11:18:43:512 action-translator LogManager.java:25 attr [@-1,21:21='m',<0>,3:19]
2022-03-26 11:18:43:512 action-translator LogManager.java:25 qattr [@-1,137:142='module',<0>,4:95].[@-1,144:146='mod',<0>,4:102]
2022-03-26 11:18:43:512 action-translator LogManager.java:25 attr [@-1,169:169='m',<0>,5:19]
2022-03-26 11:18:43:512 action-translator LogManager.java:25 translate 
                     $m = arrayList.New()
                     newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                     $m.Add(newObj)
                  
2022-03-26 11:18:43:513 action-translator LogManager.java:25 attr [@-1,24:24='m',<0>,8:22]
2022-03-26 11:18:43:513 action-translator LogManager.java:25 qattr [@-1,143:154='moduleAction',<0>,9:98].[@-1,156:157='ma',<0>,9:111]
2022-03-26 11:18:43:513 action-translator LogManager.java:25 attr [@-1,183:183='m',<0>,10:22]
2022-03-26 11:18:43:513 action-translator LogManager.java:25 translate 
               $m = arrayList.New()
               newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD, $module.mod)
               $m.Add(newObj)
            
2022-03-26 11:18:43:513 action-translator LogManager.java:25 attr [@-1,18:18='m',<0>,13:16]
2022-03-26 11:18:43:513 action-translator LogManager.java:25 qattr [@-1,131:136='module',<0>,14:92].[@-1,138:140='mod',<0>,14:99]
2022-03-26 11:18:43:513 action-translator LogManager.java:25 attr [@-1,160:160='m',<0>,15:16]
2022-03-26 11:18:43:514 action-translator LogManager.java:25 translate 
                  $m = arrayList.New()
                  newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                  $m.Add(newObj)
               
2022-03-26 11:18:43:514 action-translator LogManager.java:25 attr [@-1,21:21='m',<0>,18:19]
2022-03-26 11:18:43:514 action-translator LogManager.java:25 qattr [@-1,138:149='moduleAction',<0>,19:96].[@-1,151:152='ma',<0>,19:109]
2022-03-26 11:18:43:514 action-translator LogManager.java:25 attr [@-1,175:175='m',<0>,20:19]
2022-03-26 11:18:43:515 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-26 11:18:43:515 action-translator LogManager.java:25 translate 
                                              newObj := environment.NewModuleObject(environment.PUBLIC, environment.MOD, $module.mod)
                                              $mc.m.Add(newObj)
                                              $m = $mc.m
                                           
2022-03-26 11:18:43:516 action-translator LogManager.java:25 qattr [@-1,124:129='module',<0>,25:122].[@-1,131:133='mod',<0>,25:129]
2022-03-26 11:18:43:516 action-translator LogManager.java:25 qattr [@-1,184:185='mc',<0>,26:47].[@-1,187:187='m',<0>,26:50]
2022-03-26 11:18:43:516 action-translator LogManager.java:25 attr [@-1,249:249='m',<0>,27:47]
2022-03-26 11:18:43:516 action-translator LogManager.java:25 qattr [@-1,254:255='mc',<0>,27:52].[@-1,257:257='m',<0>,27:55]
2022-03-26 11:18:43:516 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-26 11:18:43:516 action-translator LogManager.java:25 translate 
                                                 newObj := environment.NewModuleObject(environment.PUBLIC, environment.INST, $moduleAction.ma)
                                                 $mc.m.Add(newObj)
                                                 $m = $mc.m
                                              
2022-03-26 11:18:43:517 action-translator LogManager.java:25 qattr [@-1,128:139='moduleAction',<0>,30:126].[@-1,141:142='ma',<0>,30:139]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 qattr [@-1,196:197='mc',<0>,31:50].[@-1,199:199='m',<0>,31:53]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 attr [@-1,264:264='m',<0>,32:50]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 qattr [@-1,269:270='mc',<0>,32:55].[@-1,272:272='m',<0>,32:58]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-26 11:18:43:517 action-translator LogManager.java:25 translate 
                                        newObj := environment.NewModuleObject(environment.PRIVATE, environment.MOD,  $module.mod)
                                        $mc.m.Add(newObj)
                                        $m = $mc.m
                                     
2022-03-26 11:18:43:517 action-translator LogManager.java:25 qattr [@-1,120:125='module',<0>,35:118].[@-1,127:129='mod',<0>,35:125]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 qattr [@-1,174:175='mc',<0>,36:41].[@-1,177:177='m',<0>,36:44]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 attr [@-1,233:233='m',<0>,37:41]
2022-03-26 11:18:43:517 action-translator LogManager.java:25 qattr [@-1,238:239='mc',<0>,37:46].[@-1,241:241='m',<0>,37:49]
2022-03-26 11:18:43:518 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-26 11:18:43:518 action-translator LogManager.java:25 translate 
                                          newObj := environment.NewModuleObject(environment.PRIVATE, environment.INST, $moduleAction.ma)
                                          $mc.m.Add(newObj)
                                          $m = $mc.m
                                       
2022-03-26 11:18:43:518 action-translator LogManager.java:25 qattr [@-1,122:133='moduleAction',<0>,40:120].[@-1,135:136='ma',<0>,40:133]
2022-03-26 11:18:43:518 action-translator LogManager.java:25 qattr [@-1,183:184='mc',<0>,41:43].[@-1,186:186='m',<0>,41:46]
2022-03-26 11:18:43:518 action-translator LogManager.java:25 attr [@-1,244:244='m',<0>,42:43]
2022-03-26 11:18:43:518 action-translator LogManager.java:25 qattr [@-1,249:250='mc',<0>,42:48].[@-1,252:252='m',<0>,42:51]
2022-03-26 11:18:43:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-26 11:18:43:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-26 11:18:43:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-03-26 11:18:43:520 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-26 11:18:43:521 action-translator LogManager.java:25 translate  $ma = $function.fun 
2022-03-26 11:18:43:521 action-translator LogManager.java:25 attr [@-1,2:3='ma',<0>,83:13]
2022-03-26 11:18:43:521 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,83:19].[@-1,17:19='fun',<0>,83:28]
2022-03-26 11:18:43:521 action-translator LogManager.java:25 translate  $ma = $structCreation.dec 
2022-03-26 11:18:43:521 action-translator LogManager.java:25 attr [@-1,2:3='ma',<0>,84:19]
2022-03-26 11:18:43:521 action-translator LogManager.java:25 qattr [@-1,8:21='structCreation',<0>,84:25].[@-1,23:25='dec',<0>,84:40]
2022-03-26 11:18:43:522 action-translator LogManager.java:25 translate  $mainInst = $block.blk 
2022-03-26 11:18:43:522 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,89:52]
2022-03-26 11:18:43:522 action-translator LogManager.java:25 qattr [@-1,14:18='block',<0>,89:64].[@-1,20:22='blk',<0>,89:70]
2022-03-26 11:18:43:523 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-03-26 11:18:43:523 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,94:5]
2022-03-26 11:18:43:523 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-03-26 11:18:43:524 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,100:13]
2022-03-26 11:18:43:525 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-03-26 11:18:43:525 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,106:19]
2022-03-26 11:18:43:525 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,106:27].[@-1,21:22='pr',<0>,106:38]
2022-03-26 11:18:43:525 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-03-26 11:18:43:525 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,107:20]
2022-03-26 11:18:43:525 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,107:28].[@-1,22:24='dec',<0>,107:40]
2022-03-26 11:18:43:525 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2022-03-26 11:18:43:525 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,108:19]
2022-03-26 11:18:43:525 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,108:27].[@-1,21:23='ass',<0>,108:38]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 translate  $inst = $condIf.ifCond 
2022-03-26 11:18:43:526 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,109:11]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 qattr [@-1,10:15='condIf',<0>,109:19].[@-1,17:22='ifCond',<0>,109:26]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 translate  $inst = $condMatch.mtch 
2022-03-26 11:18:43:526 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,110:14]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 qattr [@-1,10:18='condMatch',<0>,110:22].[@-1,20:23='mtch',<0>,110:32]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 translate  $inst = $loopWhile.lw 
2022-03-26 11:18:43:526 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,111:14]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 qattr [@-1,10:18='loopWhile',<0>,111:22].[@-1,20:21='lw',<0>,111:32]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 translate  $inst = $loopBucle.lb 
2022-03-26 11:18:43:526 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,112:14]
2022-03-26 11:18:43:526 action-translator LogManager.java:25 qattr [@-1,10:18='loopBucle',<0>,112:22].[@-1,20:21='lb',<0>,112:32]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 translate  $inst = $loopForin.lfi 
2022-03-26 11:18:43:527 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,113:14]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 qattr [@-1,10:18='loopForin',<0>,113:22].[@-1,20:22='lfi',<0>,113:32]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 translate  $inst = $transBreak.brk 
2022-03-26 11:18:43:527 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,114:19]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 qattr [@-1,10:19='transBreak',<0>,114:27].[@-1,21:23='brk',<0>,114:38]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 translate  $inst = $transContinue.cnt 
2022-03-26 11:18:43:527 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,115:22]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 qattr [@-1,10:22='transContinue',<0>,115:30].[@-1,24:26='cnt',<0>,115:44]
2022-03-26 11:18:43:527 action-translator LogManager.java:25 translate  $inst = $transReturn.rt 
2022-03-26 11:18:43:528 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,116:16]
2022-03-26 11:18:43:528 action-translator LogManager.java:25 qattr [@-1,10:20='transReturn',<0>,116:24].[@-1,22:23='rt',<0>,116:36]
2022-03-26 11:18:43:529 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2022-03-26 11:18:43:529 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,117:19]
2022-03-26 11:18:43:529 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,117:27].[@-1,25:27='dec',<0>,117:42]
2022-03-26 11:18:43:529 action-translator LogManager.java:25 translate  $inst = $insVectors.iv 
2022-03-26 11:18:43:529 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,118:19]
2022-03-26 11:18:43:529 action-translator LogManager.java:25 qattr [@-1,10:19='insVectors',<0>,118:27].[@-1,21:22='iv',<0>,118:38]
2022-03-26 11:18:43:530 action-translator LogManager.java:25 translate  $iv = instructions.NewPush($ID.line, $ID.pos, $ID.text, $expression.p) 
2022-03-26 11:18:43:530 action-translator LogManager.java:25 attr [@-1,2:3='iv',<0>,122:43]
2022-03-26 11:18:43:530 action-translator LogManager.java:25 qattr [@-1,29:30='ID',<0>,122:70].[@-1,32:35='line',<0>,122:73]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,122:80].[@-1,42:44='pos',<0>,122:83]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,122:89].[@-1,51:54='text',<0>,122:92]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,58:67='expression',<0>,122:99].[@-1,69:69='p',<0>,122:110]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 translate  $iv = instructions.NewInsert($ID.line, $ID.pos, $ID.text, $exp1.p, $exp2.p) 
2022-03-26 11:18:43:531 action-translator LogManager.java:25 attr [@-1,2:3='iv',<0>,123:71]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,123:100].[@-1,34:37='line',<0>,123:103]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,123:110].[@-1,44:46='pos',<0>,123:113]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,123:119].[@-1,53:56='text',<0>,123:122]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,60:63='exp1',<0>,123:129].[@-1,65:65='p',<0>,123:134]
2022-03-26 11:18:43:531 action-translator LogManager.java:25 qattr [@-1,69:72='exp2',<0>,123:138].[@-1,74:74='p',<0>,123:143]
2022-03-26 11:18:43:532 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:532 action-translator LogManager.java:25 translate 
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              
2022-03-26 11:18:43:532 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,3:54].[@-1,67:67='p',<0>,3:65]
2022-03-26 11:18:43:532 action-translator LogManager.java:25 attr [@-1,96:96='l',<0>,4:18]
2022-03-26 11:18:43:532 action-translator LogManager.java:25 attr [@-1,135:135='l',<0>,5:18]
2022-03-26 11:18:43:532 action-translator LogManager.java:25 translate 
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     
2022-03-26 11:18:43:532 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,8:61].[@-1,74:74='p',<0>,8:72]
2022-03-26 11:18:43:532 action-translator LogManager.java:25 attr [@-1,109:109='l',<0>,9:25]
2022-03-26 11:18:43:532 action-translator LogManager.java:25 attr [@-1,155:155='l',<0>,10:25]
2022-03-26 11:18:43:533 action-translator LogManager.java:25 translate 
          $l = arrayList.New()
       
2022-03-26 11:18:43:533 action-translator LogManager.java:25 attr [@-1,13:13='l',<0>,13:11]
2022-03-26 11:18:43:533 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-26 11:18:43:533 action-translator LogManager.java:25 translate 
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                
2022-03-26 11:18:43:533 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,18:88].[@-1,101:101='p',<0>,18:99]
2022-03-26 11:18:43:533 action-translator LogManager.java:25 qattr [@-1,164:167='list',<0>,19:52].[@-1,169:169='l',<0>,19:57]
2022-03-26 11:18:43:533 action-translator LogManager.java:25 setAttr [@-1,236:236='l',<0>,20:52] [@-1,239:246=' $list.l',<0>,20:55]
2022-03-26 11:18:43:533 action-translator LogManager.java:25 translate  $list.l
2022-03-26 11:18:43:534 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,17:107].[@-1,7:7='l',<0>,17:112]
2022-03-26 11:18:43:534 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-26 11:18:43:534 action-translator LogManager.java:25 translate 
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   
2022-03-26 11:18:43:534 action-translator LogManager.java:25 qattr [@-1,93:102='expression',<0>,23:91].[@-1,104:104='p',<0>,23:102]
2022-03-26 11:18:43:535 action-translator LogManager.java:25 qattr [@-1,169:172='list',<0>,24:55].[@-1,174:174='l',<0>,24:60]
2022-03-26 11:18:43:535 action-translator LogManager.java:25 setAttr [@-1,244:244='l',<0>,25:55] [@-1,247:254=' $list.l',<0>,25:58]
2022-03-26 11:18:43:535 action-translator LogManager.java:25 translate  $list.l
2022-03-26 11:18:43:535 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,22:158].[@-1,7:7='l',<0>,22:163]
2022-03-26 11:18:43:535 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-03-26 11:18:43:535 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-26 11:18:43:535 action-translator LogManager.java:25 translate  $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) 
2022-03-26 11:18:43:536 action-translator LogManager.java:25 attr [@-1,2:3='lw',<0>,153:45]
2022-03-26 11:18:43:536 action-translator LogManager.java:25 qattr [@-1,30:34='WHILE',<0>,153:73].[@-1,36:39='line',<0>,153:79]
2022-03-26 11:18:43:536 action-translator LogManager.java:25 qattr [@-1,43:47='WHILE',<0>,153:86].[@-1,49:51='pos',<0>,153:92]
2022-03-26 11:18:43:536 action-translator LogManager.java:25 qattr [@-1,55:64='expression',<0>,153:98].[@-1,66:66='p',<0>,153:109]
2022-03-26 11:18:43:536 action-translator LogManager.java:25 qattr [@-1,70:74='block',<0>,153:113].[@-1,76:78='blk',<0>,153:119]
2022-03-26 11:18:43:536 action-translator LogManager.java:25 translate  $lb = instructions.NewLoop($LOOP.line, $LOOP.pos, $block.blk) 
2022-03-26 11:18:43:536 action-translator LogManager.java:25 attr [@-1,2:3='lb',<0>,157:33]
2022-03-26 11:18:43:537 action-translator LogManager.java:25 qattr [@-1,29:32='LOOP',<0>,157:60].[@-1,34:37='line',<0>,157:65]
2022-03-26 11:18:43:537 action-translator LogManager.java:25 qattr [@-1,41:44='LOOP',<0>,157:72].[@-1,46:48='pos',<0>,157:77]
2022-03-26 11:18:43:537 action-translator LogManager.java:25 qattr [@-1,52:56='block',<0>,157:83].[@-1,58:60='blk',<0>,157:89]
2022-03-26 11:18:43:537 action-translator LogManager.java:25 translate  $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $instructions.insts) 
2022-03-26 11:18:43:537 action-translator LogManager.java:25 attr [@-1,2:4='lfi',<0>,161:56]
2022-03-26 11:18:43:538 action-translator LogManager.java:25 qattr [@-1,31:33='FOR',<0>,161:85].[@-1,35:38='line',<0>,161:89]
2022-03-26 11:18:43:538 action-translator LogManager.java:25 qattr [@-1,42:44='FOR',<0>,161:96].[@-1,46:48='pos',<0>,161:100]
2022-03-26 11:18:43:538 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,161:106].[@-1,55:58='text',<0>,161:109]
2022-03-26 11:18:43:538 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,161:116].[@-1,73:73='p',<0>,161:127]
2022-03-26 11:18:43:538 action-translator LogManager.java:25 qattr [@-1,77:88='instructions',<0>,161:131].[@-1,90:94='insts',<0>,161:144]
2022-03-26 11:18:43:539 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) 
2022-03-26 11:18:43:539 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,165:21]
2022-03-26 11:18:43:539 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,165:50].[@-1,37:40='line',<0>,165:56]
2022-03-26 11:18:43:539 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,165:63].[@-1,50:52='pos',<0>,165:69]
2022-03-26 11:18:43:539 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,165:75].[@-1,67:67='p',<0>,165:86]
2022-03-26 11:18:43:540 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) 
2022-03-26 11:18:43:540 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,166:10]
2022-03-26 11:18:43:540 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,166:39].[@-1,37:40='line',<0>,166:45]
2022-03-26 11:18:43:540 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,166:52].[@-1,50:52='pos',<0>,166:58]
2022-03-26 11:18:43:540 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2022-03-26 11:18:43:540 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,170:13]
2022-03-26 11:18:43:540 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,170:45].[@-1,43:46='line',<0>,170:54]
2022-03-26 11:18:43:540 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,170:61].[@-1,59:61='pos',<0>,170:70]
2022-03-26 11:18:43:541 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) 
2022-03-26 11:18:43:541 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,174:26]
2022-03-26 11:18:43:541 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,174:55].[@-1,38:41='line',<0>,174:62]
2022-03-26 11:18:43:541 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,174:69].[@-1,52:54='pos',<0>,174:76]
2022-03-26 11:18:43:541 action-translator LogManager.java:25 qattr [@-1,58:67='expression',<0>,174:82].[@-1,69:69='p',<0>,174:93]
2022-03-26 11:18:43:541 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2022-03-26 11:18:43:542 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,175:14]
2022-03-26 11:18:43:542 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,175:43].[@-1,38:41='line',<0>,175:50]
2022-03-26 11:18:43:542 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,175:57].[@-1,52:54='pos',<0>,175:64]
2022-03-26 11:18:43:542 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, $expression.p) 
2022-03-26 11:18:43:542 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,176:22]
2022-03-26 11:18:43:542 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,176:51].[@-1,38:41='line',<0>,176:58]
2022-03-26 11:18:43:542 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,176:65].[@-1,52:54='pos',<0>,176:72]
2022-03-26 11:18:43:542 action-translator LogManager.java:25 qattr [@-1,58:67='expression',<0>,176:78].[@-1,69:69='p',<0>,176:89]
2022-03-26 11:18:43:543 action-translator LogManager.java:25 translate  $rt = instructions.NewReturn($RETURN.line, $RETURN.pos, nil) 
2022-03-26 11:18:43:543 action-translator LogManager.java:25 attr [@-1,2:3='rt',<0>,177:11]
2022-03-26 11:18:43:543 action-translator LogManager.java:25 qattr [@-1,31:36='RETURN',<0>,177:40].[@-1,38:41='line',<0>,177:47]
2022-03-26 11:18:43:543 action-translator LogManager.java:25 qattr [@-1,45:50='RETURN',<0>,177:54].[@-1,52:54='pos',<0>,177:61]
2022-03-26 11:18:43:544 action-translator LogManager.java:25 translate 
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            
2022-03-26 11:18:43:544 action-translator LogManager.java:25 attr [@-1,206:211='ifCond',<0>,187:13]
2022-03-26 11:18:43:544 action-translator LogManager.java:25 qattr [@-1,235:236='IF',<0>,187:42].[@-1,238:241='line',<0>,187:45]
2022-03-26 11:18:43:544 action-translator LogManager.java:25 qattr [@-1,245:246='IF',<0>,187:52].[@-1,248:250='pos',<0>,187:55]
2022-03-26 11:18:43:544 action-translator LogManager.java:25 qattr [@-1,254:263='expression',<0>,187:61].[@-1,265:265='p',<0>,187:72]
2022-03-26 11:18:43:544 action-translator LogManager.java:25 qattr [@-1,269:273='block',<0>,187:76].[@-1,275:277='blk',<0>,187:82]
2022-03-26 11:18:43:544 action-translator LogManager.java:25 qattr [@-1,287:294='condElse',<0>,187:94].[@-1,296:302='blkelse',<0>,187:103]
2022-03-26 11:18:43:545 action-translator LogManager.java:25 translate 
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    
2022-03-26 11:18:43:545 action-translator LogManager.java:25 attr [@-1,69:72='elif',<0>,195:5]
2022-03-26 11:18:43:545 action-translator LogManager.java:25 qattr [@-1,96:99='ELSE',<0>,195:32].[@-1,101:104='line',<0>,195:37]
2022-03-26 11:18:43:545 action-translator LogManager.java:25 qattr [@-1,108:111='ELSE',<0>,195:44].[@-1,113:115='pos',<0>,195:49]
2022-03-26 11:18:43:545 action-translator LogManager.java:25 qattr [@-1,119:128='expression',<0>,195:55].[@-1,130:130='p',<0>,195:66]
2022-03-26 11:18:43:545 action-translator LogManager.java:25 qattr [@-1,134:138='block',<0>,195:70].[@-1,140:142='blk',<0>,195:76]
2022-03-26 11:18:43:546 action-translator LogManager.java:25 translate  $blkelse = $block.blk 
2022-03-26 11:18:43:546 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,200:33]
2022-03-26 11:18:43:546 action-translator LogManager.java:25 qattr [@-1,13:17='block',<0>,200:44].[@-1,19:21='blk',<0>,200:50]
2022-03-26 11:18:43:546 action-translator LogManager.java:25 translate  $blkelse = arrayList.New() 
2022-03-26 11:18:43:546 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,201:4]
2022-03-26 11:18:43:547 action-translator LogManager.java:25 translate 
    $blk = arrayList.New()
  
2022-03-26 11:18:43:547 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,206:5]
2022-03-26 11:18:43:547 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:547 action-translator LogManager.java:25 translate  $blk.Add($instruction.inst) 
2022-03-26 11:18:43:547 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,2:43]
2022-03-26 11:18:43:547 action-translator LogManager.java:25 qattr [@-1,11:21='instruction',<0>,2:52].[@-1,23:26='inst',<0>,2:64]
2022-03-26 11:18:43:547 action-translator LogManager.java:25 translate  $blk.Add($expression.p) 
2022-03-26 11:18:43:547 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,3:39]
2022-03-26 11:18:43:547 action-translator LogManager.java:25 qattr [@-1,11:20='expression',<0>,3:48].[@-1,22:22='p',<0>,3:59]
2022-03-26 11:18:43:547 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-26 11:18:43:547 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      
2022-03-26 11:18:43:547 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,7:39].[@-1,48:50='blk',<0>,7:46]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 qattr [@-1,57:67='instruction',<0>,7:55].[@-1,69:72='inst',<0>,7:67]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 attr [@-1,115:117='blk',<0>,8:39]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 qattr [@-1,122:127='bloque',<0>,8:46].[@-1,129:131='blk',<0>,8:53]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-26 11:18:43:548 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     
2022-03-26 11:18:43:548 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,11:39].[@-1,48:50='blk',<0>,11:46]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,11:55].[@-1,68:68='p',<0>,11:66]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 attr [@-1,111:113='blk',<0>,12:39]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 qattr [@-1,118:123='bloque',<0>,12:46].[@-1,125:127='blk',<0>,12:53]
2022-03-26 11:18:43:548 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-26 11:18:43:548 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-26 11:18:43:549 action-translator LogManager.java:25 translate 
        arrarms := arrayList.New()
        larms := localctx.(*CondMatchContext).GetE()
        for _, e := range larms {
            arrarms.Add(e.GetArms())
        }
        $mtch = instructions.NewMatch($MATCH.line, $MATCH.pos, $expression.p, arrarms, $defaultArm.defa)
        
2022-03-26 11:18:43:549 action-translator LogManager.java:25 attr [@-1,185:188='mtch',<0>,228:9]
2022-03-26 11:18:43:549 action-translator LogManager.java:25 qattr [@-1,215:219='MATCH',<0>,228:39].[@-1,221:224='line',<0>,228:45]
2022-03-26 11:18:43:550 action-translator LogManager.java:25 qattr [@-1,228:232='MATCH',<0>,228:52].[@-1,234:236='pos',<0>,228:58]
2022-03-26 11:18:43:550 action-translator LogManager.java:25 qattr [@-1,240:249='expression',<0>,228:64].[@-1,251:251='p',<0>,228:75]
2022-03-26 11:18:43:550 action-translator LogManager.java:25 qattr [@-1,264:273='defaultArm',<0>,228:88].[@-1,275:278='defa',<0>,228:99]
2022-03-26 11:18:43:551 action-translator LogManager.java:25 translate 
         $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
         
2022-03-26 11:18:43:551 action-translator LogManager.java:25 attr [@-1,12:15='arms',<0>,234:10]
2022-03-26 11:18:43:551 action-translator LogManager.java:25 qattr [@-1,40:48='listMatch',<0>,234:38].[@-1,50:54='start',<0>,234:48]
2022-03-26 11:18:43:551 action-translator LogManager.java:25 qattr [@-1,67:75='listMatch',<0>,234:65].[@-1,77:81='start',<0>,234:75]
2022-03-26 11:18:43:551 action-translator LogManager.java:25 qattr [@-1,97:105='listMatch',<0>,234:95].[@-1,107:108='ma',<0>,234:105]
2022-03-26 11:18:43:551 action-translator LogManager.java:25 qattr [@-1,112:116='block',<0>,234:110].[@-1,118:120='blk',<0>,234:116]
2022-03-26 11:18:43:552 action-translator LogManager.java:25 translate 
        $arms = instructions.NewArm($listMatch.start.GetLine(),$listMatch.start.GetColumn(), $listMatch.ma, $block.blk)
        
2022-03-26 11:18:43:552 action-translator LogManager.java:25 attr [@-1,11:14='arms',<0>,237:9]
2022-03-26 11:18:43:552 action-translator LogManager.java:25 qattr [@-1,39:47='listMatch',<0>,237:37].[@-1,49:53='start',<0>,237:47]
2022-03-26 11:18:43:552 action-translator LogManager.java:25 qattr [@-1,66:74='listMatch',<0>,237:64].[@-1,76:80='start',<0>,237:74]
2022-03-26 11:18:43:552 action-translator LogManager.java:25 qattr [@-1,96:104='listMatch',<0>,237:94].[@-1,106:107='ma',<0>,237:104]
2022-03-26 11:18:43:552 action-translator LogManager.java:25 qattr [@-1,111:115='block',<0>,237:109].[@-1,117:119='blk',<0>,237:115]
2022-03-26 11:18:43:553 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:553 action-translator LogManager.java:25 translate 
                 $ma = arrayList.New()
                 $ma.Add($expression.p)
              
2022-03-26 11:18:43:553 action-translator LogManager.java:25 attr [@-1,20:21='ma',<0>,3:18]
2022-03-26 11:18:43:553 action-translator LogManager.java:25 attr [@-1,60:61='ma',<0>,4:18]
2022-03-26 11:18:43:553 action-translator LogManager.java:25 qattr [@-1,68:77='expression',<0>,4:26].[@-1,79:79='p',<0>,4:37]
2022-03-26 11:18:43:553 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:554 action-translator LogManager.java:25 translate 
                                          $lma.ma.Add($expression.p)
                                          $ma = $lma.ma
                                       
2022-03-26 11:18:43:554 action-translator LogManager.java:25 qattr [@-1,45:47='lma',<0>,9:43].[@-1,49:50='ma',<0>,9:47]
2022-03-26 11:18:43:554 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,9:55].[@-1,68:68='p',<0>,9:66]
2022-03-26 11:18:43:554 action-translator LogManager.java:25 attr [@-1,115:116='ma',<0>,10:43]
2022-03-26 11:18:43:554 action-translator LogManager.java:25 qattr [@-1,121:123='lma',<0>,10:49].[@-1,125:126='ma',<0>,10:53]
2022-03-26 11:18:43:554 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:555 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-03-26 11:18:43:555 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,253:33]
2022-03-26 11:18:43:555 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,253:41].[@-1,16:18='blk',<0>,253:47]
2022-03-26 11:18:43:556 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-03-26 11:18:43:556 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,254:51]
2022-03-26 11:18:43:556 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,254:59].[@-1,16:18='blk',<0>,254:65]
2022-03-26 11:18:43:556 action-translator LogManager.java:25 translate  $defa = arrayList.New() 
2022-03-26 11:18:43:556 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,255:4]
2022-03-26 11:18:43:557 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-03-26 11:18:43:557 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,259:35]
2022-03-26 11:18:43:557 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,259:63].[@-1,36:39='line',<0>,259:69]
2022-03-26 11:18:43:557 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,259:75].[@-1,48:50='pos',<0>,259:81]
2022-03-26 11:18:43:557 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,259:86].[@-1,64:64='l',<0>,259:97]
2022-03-26 11:18:43:558 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, true) 
2022-03-26 11:18:43:558 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,263:46]
2022-03-26 11:18:43:558 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,263:81].[@-1,41:44='line',<0>,263:85]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,263:92].[@-1,52:54='pos',<0>,263:96]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,263:102].[@-1,61:64='text',<0>,263:105]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,263:112].[@-1,74:75='ty',<0>,263:118]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,263:123].[@-1,90:90='p',<0>,263:134]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, true) 
2022-03-26 11:18:43:559 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,264:46]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,264:81].[@-1,41:44='line',<0>,264:85]
2022-03-26 11:18:43:559 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,264:92].[@-1,52:54='pos',<0>,264:96]
2022-03-26 11:18:43:560 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,264:102].[@-1,61:64='text',<0>,264:105]
2022-03-26 11:18:43:560 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,264:134].[@-1,101:101='p',<0>,264:145]
2022-03-26 11:18:43:560 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expression.p, false) 
2022-03-26 11:18:43:561 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,265:46]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,265:81].[@-1,41:44='line',<0>,265:85]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,265:92].[@-1,52:54='pos',<0>,265:96]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,265:102].[@-1,61:64='text',<0>,265:105]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,265:112].[@-1,74:75='ty',<0>,265:118]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,79:88='expression',<0>,265:123].[@-1,90:90='p',<0>,265:134]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, $expression.p, false) 
2022-03-26 11:18:43:561 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,266:46]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,266:81].[@-1,41:44='line',<0>,266:85]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,266:92].[@-1,52:54='pos',<0>,266:96]
2022-03-26 11:18:43:561 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,266:102].[@-1,61:64='text',<0>,266:105]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,266:134].[@-1,101:101='p',<0>,266:145]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, true) 
2022-03-26 11:18:43:562 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,267:48]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,267:88].[@-1,46:49='line',<0>,267:92]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,267:99].[@-1,57:59='pos',<0>,267:103]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,267:109].[@-1,66:69='text',<0>,267:112]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,267:119].[@-1,83:83='t',<0>,267:129]
2022-03-26 11:18:43:562 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,267:133].[@-1,98:98='p',<0>,267:144]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 translate  $dec = instructions.NewArrayDeclaration($LET.line, $LET.pos, $ID.text, $arrayType.t, $expression.p, false) 
2022-03-26 11:18:43:563 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,268:46]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 qattr [@-1,42:44='LET',<0>,268:86].[@-1,46:49='line',<0>,268:90]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 qattr [@-1,53:55='LET',<0>,268:97].[@-1,57:59='pos',<0>,268:101]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 qattr [@-1,63:64='ID',<0>,268:107].[@-1,66:69='text',<0>,268:110]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 qattr [@-1,73:81='arrayType',<0>,268:117].[@-1,83:83='t',<0>,268:127]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,268:131].[@-1,98:98='p',<0>,268:142]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 translate  $dec = $vectDeclaration.vec 
2022-03-26 11:18:43:563 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,269:20]
2022-03-26 11:18:43:563 action-translator LogManager.java:25 qattr [@-1,9:23='vectDeclaration',<0>,269:27].[@-1,25:27='vec',<0>,269:43]
2022-03-26 11:18:43:565 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, false, $expression.p, "") 
2022-03-26 11:18:43:565 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,273:60]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,273:101].[@-1,47:50='line',<0>,273:105]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,273:112].[@-1,58:60='pos',<0>,273:116]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,273:122].[@-1,67:70='text',<0>,273:125]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,273:132].[@-1,80:81='ty',<0>,273:138]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 qattr [@-1,92:101='expression',<0>,273:150].[@-1,103:103='p',<0>,273:161]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, true, $expression.p, "") 
2022-03-26 11:18:43:566 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,274:64]
2022-03-26 11:18:43:566 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,274:105].[@-1,47:50='line',<0>,274:109]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,274:116].[@-1,58:60='pos',<0>,274:120]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,274:126].[@-1,67:70='text',<0>,274:129]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,274:136].[@-1,80:81='ty',<0>,274:142]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,274:153].[@-1,102:102='p',<0>,274:164]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, false, $expression.p, $tipo.text) 
2022-03-26 11:18:43:567 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,275:62]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,275:103].[@-1,47:50='line',<0>,275:107]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,275:114].[@-1,58:60='pos',<0>,275:118]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,275:124].[@-1,67:70='text',<0>,275:127]
2022-03-26 11:18:43:567 action-translator LogManager.java:25 qattr [@-1,103:112='expression',<0>,275:163].[@-1,114:114='p',<0>,275:174]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 qattr [@-1,118:121='tipo',<0>,275:178].[@-1,123:126='text',<0>,275:183]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 translate  $vec = instructions.NewVectorDeclaration($LET.line, $LET.pos, $ID.text, environment.WILDCARD, true, $expression.p, $tipo.text) 
2022-03-26 11:18:43:568 action-translator LogManager.java:25 attr [@-1,2:4='vec',<0>,276:66]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 qattr [@-1,43:45='LET',<0>,276:107].[@-1,47:50='line',<0>,276:111]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 qattr [@-1,54:56='LET',<0>,276:118].[@-1,58:60='pos',<0>,276:122]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,276:128].[@-1,67:70='text',<0>,276:131]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 qattr [@-1,102:111='expression',<0>,276:166].[@-1,113:113='p',<0>,276:177]
2022-03-26 11:18:43:568 action-translator LogManager.java:25 qattr [@-1,117:120='tipo',<0>,276:181].[@-1,122:125='text',<0>,276:186]
2022-03-26 11:18:43:569 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2022-03-26 11:18:43:569 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,280:46]
2022-03-26 11:18:43:569 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,280:76].[@-1,39:42='line',<0>,280:83]
2022-03-26 11:18:43:569 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,280:90].[@-1,53:55='pos',<0>,280:97]
2022-03-26 11:18:43:569 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,280:103].[@-1,62:65='text',<0>,280:106]
2022-03-26 11:18:43:570 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,280:113].[@-1,83:83='l',<0>,280:127]
2022-03-26 11:18:43:571 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:571 action-translator LogManager.java:25 translate 
                    StrDef := environment.NewStructType($id1.text, $types.ty, "")
                    $l = arrayList.New();
                    $l.Add(StrDef);
                
2022-03-26 11:18:43:571 action-translator LogManager.java:25 qattr [@-1,59:61='id1',<0>,3:57].[@-1,63:66='text',<0>,3:61]
2022-03-26 11:18:43:571 action-translator LogManager.java:25 qattr [@-1,70:74='types',<0>,3:68].[@-1,76:77='ty',<0>,3:74]
2022-03-26 11:18:43:571 action-translator LogManager.java:25 setAttr [@-1,106:106='l',<0>,4:21] [@-1,109:124=' arrayList.New()',<0>,4:24]
2022-03-26 11:18:43:571 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-26 11:18:43:571 action-translator LogManager.java:25 attr [@-1,149:149='l',<0>,5:21]
2022-03-26 11:18:43:571 action-translator LogManager.java:25 translate 
                      StrDef := environment.NewStructType($id1.text, environment.WILDCARD, $id2.text)
                      $l = arrayList.New();
                      $l.Add(StrDef);
                  
2022-03-26 11:18:43:571 action-translator LogManager.java:25 qattr [@-1,61:63='id1',<0>,8:59].[@-1,65:68='text',<0>,8:63]
2022-03-26 11:18:43:571 action-translator LogManager.java:25 qattr [@-1,94:96='id2',<0>,8:92].[@-1,98:101='text',<0>,8:96]
2022-03-26 11:18:43:572 action-translator LogManager.java:25 setAttr [@-1,128:128='l',<0>,9:23] [@-1,131:146=' arrayList.New()',<0>,9:26]
2022-03-26 11:18:43:572 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-26 11:18:43:572 action-translator LogManager.java:25 attr [@-1,173:173='l',<0>,10:23]
2022-03-26 11:18:43:572 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-26 11:18:43:572 action-translator LogManager.java:25 translate 
                                                  StrDef := environment.NewStructType($id1.text, $types.ty, "")
                                                  $list.l.Add(StrDef);
                                                  $l = $list.l;
                                              
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,89:91='id1',<0>,15:87].[@-1,93:96='text',<0>,15:91]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,100:104='types',<0>,15:98].[@-1,106:107='ty',<0>,15:104]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,166:169='list',<0>,16:51].[@-1,171:171='l',<0>,16:56]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 setAttr [@-1,238:238='l',<0>,17:51] [@-1,241:248=' $list.l',<0>,17:54]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 translate  $list.l
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,14:152].[@-1,7:7='l',<0>,14:157]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-26 11:18:43:573 action-translator LogManager.java:25 translate 
                                                    StrDef := environment.NewStructType($id1.text,environment.WILDCARD, $id2.text)
                                                    $list.l.Add(StrDef);
                                                    $l = $list.l;
                                                
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,91:93='id1',<0>,20:89].[@-1,95:98='text',<0>,20:93]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,123:125='id2',<0>,20:121].[@-1,127:130='text',<0>,20:125]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 qattr [@-1,187:190='list',<0>,21:53].[@-1,192:192='l',<0>,21:58]
2022-03-26 11:18:43:573 action-translator LogManager.java:25 setAttr [@-1,261:261='l',<0>,22:53] [@-1,264:271=' $list.l',<0>,22:56]
2022-03-26 11:18:43:574 action-translator LogManager.java:25 translate  $list.l
2022-03-26 11:18:43:574 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,19:163].[@-1,7:7='l',<0>,19:168]
2022-03-26 11:18:43:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-03-26 11:18:43:574 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-26 11:18:43:574 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)
2022-03-26 11:18:43:574 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,307:24]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,307:58].[@-1,39:42='line',<0>,307:61]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,307:68].[@-1,49:51='pos',<0>,307:71]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,307:77].[@-1,58:61='text',<0>,307:80]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,307:87].[@-1,76:76='p',<0>,307:98]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 translate  $ass = instructions.NewStructAssign($listAccessStruct.start.GetLine(),$listAccessStruct.start.GetColumn(), $listAccessStruct.l, $expression.p) 
2022-03-26 11:18:43:575 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,308:38]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,38:53='listAccessStruct',<0>,308:74].[@-1,55:59='start',<0>,308:91]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,72:87='listAccessStruct',<0>,308:108].[@-1,89:93='start',<0>,308:125]
2022-03-26 11:18:43:575 action-translator LogManager.java:25 qattr [@-1,109:124='listAccessStruct',<0>,308:145].[@-1,126:126='l',<0>,308:162]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 qattr [@-1,130:139='expression',<0>,308:166].[@-1,141:141='p',<0>,308:177]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 translate  $ass = instructions.NewArrayAssign($ID.line, $ID.pos, $ID.text, $listAccessArray.l, $expression.p) 
2022-03-26 11:18:43:576 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,309:40]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,309:75].[@-1,40:43='line',<0>,309:78]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,309:85].[@-1,50:52='pos',<0>,309:88]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,309:94].[@-1,59:62='text',<0>,309:97]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 qattr [@-1,66:80='listAccessArray',<0>,309:104].[@-1,82:82='l',<0>,309:120]
2022-03-26 11:18:43:576 action-translator LogManager.java:25 qattr [@-1,86:95='expression',<0>,309:124].[@-1,97:97='p',<0>,309:135]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:577 action-translator LogManager.java:25 translate 
    $l = arrayList.New()
    $l.Add($ID.text)

2022-03-26 11:18:43:577 action-translator LogManager.java:25 attr [@-1,7:7='l',<0>,3:5]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 attr [@-1,33:33='l',<0>,4:5]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,4:12].[@-1,43:46='text',<0>,4:15]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:577 action-translator LogManager.java:25 translate 
                                             $list.l.Add($ID.text)
                                             $l = $list.l
                                            
2022-03-26 11:18:43:577 action-translator LogManager.java:25 qattr [@-1,48:51='list',<0>,9:46].[@-1,53:53='l',<0>,9:51]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,9:58].[@-1,63:66='text',<0>,9:61]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 attr [@-1,116:116='l',<0>,10:46]
2022-03-26 11:18:43:577 action-translator LogManager.java:25 qattr [@-1,121:124='list',<0>,10:51].[@-1,126:126='l',<0>,10:56]
2022-03-26 11:18:43:578 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:578 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:578 action-translator LogManager.java:25 translate 
                              $l = arrayList.New()
                              $l.Add($expression.p)
                          
2022-03-26 11:18:43:578 action-translator LogManager.java:25 attr [@-1,33:33='l',<0>,3:31]
2022-03-26 11:18:43:578 action-translator LogManager.java:25 attr [@-1,85:85='l',<0>,4:31]
2022-03-26 11:18:43:578 action-translator LogManager.java:25 qattr [@-1,92:101='expression',<0>,4:38].[@-1,103:103='p',<0>,4:49]
2022-03-26 11:18:43:578 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:579 action-translator LogManager.java:25 translate 
                                                            $list.l.Add($expression.p)
                                                            $l = $list.l
                                                           
2022-03-26 11:18:43:579 action-translator LogManager.java:25 qattr [@-1,63:66='list',<0>,9:61].[@-1,68:68='l',<0>,9:66]
2022-03-26 11:18:43:579 action-translator LogManager.java:25 qattr [@-1,75:84='expression',<0>,9:73].[@-1,86:86='p',<0>,9:84]
2022-03-26 11:18:43:579 action-translator LogManager.java:25 attr [@-1,151:151='l',<0>,10:61]
2022-03-26 11:18:43:579 action-translator LogManager.java:25 qattr [@-1,156:159='list',<0>,10:66].[@-1,161:161='l',<0>,10:71]
2022-03-26 11:18:43:579 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:580 action-translator LogManager.java:25 translate 
                                        newType := environment.NewArrayType(environment.ARRAY, $expression.p)
                                       $arrayType.t.Add(newType)
                                       $t = $arrayType.t
                                        
2022-03-26 11:18:43:580 action-translator LogManager.java:25 qattr [@-1,98:107='expression',<0>,336:96].[@-1,109:109='p',<0>,336:107]
2022-03-26 11:18:43:580 action-translator LogManager.java:25 qattr [@-1,153:161='arrayType',<0>,337:40].[@-1,163:163='t',<0>,337:50]
2022-03-26 11:18:43:580 action-translator LogManager.java:25 attr [@-1,219:219='t',<0>,338:40]
2022-03-26 11:18:43:580 action-translator LogManager.java:25 qattr [@-1,224:232='arrayType',<0>,338:45].[@-1,234:234='t',<0>,338:55]
2022-03-26 11:18:43:581 action-translator LogManager.java:25 translate 
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, $expression.p)
                            $t.Add(newType)
                         
2022-03-26 11:18:43:581 action-translator LogManager.java:25 attr [@-1,31:31='t',<0>,341:29]
2022-03-26 11:18:43:581 action-translator LogManager.java:25 qattr [@-1,117:121='types',<0>,342:65].[@-1,123:124='ty',<0>,342:71]
2022-03-26 11:18:43:581 action-translator LogManager.java:25 qattr [@-1,128:137='expression',<0>,342:76].[@-1,139:139='p',<0>,342:87]
2022-03-26 11:18:43:581 action-translator LogManager.java:25 attr [@-1,172:172='t',<0>,343:29]
2022-03-26 11:18:43:581 action-translator LogManager.java:25 translate 
                            $t = arrayList.New()
                            newType := environment.NewArrayType($types.ty, nil)
                            $t.Add(newType)
                         
2022-03-26 11:18:43:581 action-translator LogManager.java:25 attr [@-1,31:31='t',<0>,346:29]
2022-03-26 11:18:43:582 action-translator LogManager.java:25 qattr [@-1,117:121='types',<0>,347:65].[@-1,123:124='ty',<0>,347:71]
2022-03-26 11:18:43:582 action-translator LogManager.java:25 attr [@-1,162:162='t',<0>,348:29]
2022-03-26 11:18:43:582 action-translator LogManager.java:25 translate 
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        
2022-03-26 11:18:43:583 action-translator LogManager.java:25 attr [@-1,27:29='fun',<0>,354:25]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,59:62='FUNC',<0>,354:57].[@-1,64:67='line',<0>,354:62]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,71:74='FUNC',<0>,354:69].[@-1,76:78='pos',<0>,354:74]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,354:80].[@-1,85:88='text',<0>,354:83]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,354:90].[@-1,107:109='lpf',<0>,354:105]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,354:133].[@-1,141:143='blk',<0>,354:139]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       
2022-03-26 11:18:43:583 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,357:24]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,357:56].[@-1,63:66='line',<0>,357:61]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,357:68].[@-1,75:77='pos',<0>,357:73]
2022-03-26 11:18:43:583 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,357:79].[@-1,84:87='text',<0>,357:82]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,91:104='listParamsFunc',<0>,357:89].[@-1,106:108='lpf',<0>,357:104]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,112:116='types',<0>,357:110].[@-1,118:119='ty',<0>,357:116]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,123:127='block',<0>,357:121].[@-1,129:131='blk',<0>,357:127]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       
2022-03-26 11:18:43:584 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,360:24]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,360:56].[@-1,63:66='line',<0>,360:61]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,360:68].[@-1,75:77='pos',<0>,360:73]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,81:83='id1',<0>,360:79].[@-1,85:88='text',<0>,360:83]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,360:90].[@-1,107:109='lpf',<0>,360:105]
2022-03-26 11:18:43:584 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,360:133].[@-1,141:143='blk',<0>,360:139]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,147:149='id2',<0>,360:145].[@-1,151:154='text',<0>,360:149]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       
2022-03-26 11:18:43:585 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,363:24]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,363:56].[@-1,63:66='line',<0>,363:61]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,363:68].[@-1,75:77='pos',<0>,363:73]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,81:83='id1',<0>,363:79].[@-1,85:88='text',<0>,363:83]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,363:90].[@-1,107:109='lpf',<0>,363:105]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,363:133].[@-1,141:143='blk',<0>,363:139]
2022-03-26 11:18:43:585 action-translator LogManager.java:25 qattr [@-1,147:149='id2',<0>,363:145].[@-1,151:154='text',<0>,363:149]
2022-03-26 11:18:43:586 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:587 action-translator LogManager.java:25 translate 
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                $lpf.Add(newParam)
             
2022-03-26 11:18:43:587 action-translator LogManager.java:25 attr [@-1,19:21='lpf',<0>,3:17]
2022-03-26 11:18:43:587 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:63].[@-1,108:111='line',<0>,4:66]
2022-03-26 11:18:43:587 action-translator LogManager.java:25 qattr [@-1,115:116='ID',<0>,4:73].[@-1,118:120='pos',<0>,4:76]
2022-03-26 11:18:43:587 action-translator LogManager.java:25 qattr [@-1,124:125='ID',<0>,4:82].[@-1,127:130='text',<0>,4:85]
2022-03-26 11:18:43:587 action-translator LogManager.java:25 qattr [@-1,134:138='types',<0>,4:92].[@-1,140:141='ty',<0>,4:98]
2022-03-26 11:18:43:587 action-translator LogManager.java:25 attr [@-1,166:168='lpf',<0>,5:17]
2022-03-26 11:18:43:587 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                 $lpf.Add(newParam)
              
2022-03-26 11:18:43:587 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,8:18]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,9:64].[@-1,110:113='line',<0>,9:67]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,9:74].[@-1,120:122='pos',<0>,9:77]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,9:83].[@-1,129:132='text',<0>,9:86]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 attr [@-1,177:179='lpf',<0>,10:18]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              
2022-03-26 11:18:43:588 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,13:18]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,14:64].[@-1,111:114='line',<0>,14:68]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,14:75].[@-1,122:124='pos',<0>,14:79]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,14:85].[@-1,132:135='text',<0>,14:89]
2022-03-26 11:18:43:588 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,14:118].[@-1,165:168='text',<0>,14:122]
2022-03-26 11:18:43:589 action-translator LogManager.java:25 attr [@-1,190:192='lpf',<0>,15:18]
2022-03-26 11:18:43:589 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"")
                 $lpf.Add(newParam)
              
2022-03-26 11:18:43:589 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,18:18]
2022-03-26 11:18:43:589 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,19:64].[@-1,110:113='line',<0>,19:67]
2022-03-26 11:18:43:589 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,19:74].[@-1,120:122='pos',<0>,19:77]
2022-03-26 11:18:43:589 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,19:83].[@-1,129:132='text',<0>,19:86]
2022-03-26 11:18:43:589 action-translator LogManager.java:25 attr [@-1,176:178='lpf',<0>,20:18]
2022-03-26 11:18:43:590 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                 $lpf.Add(newParam)
              
2022-03-26 11:18:43:590 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,23:18]
2022-03-26 11:18:43:590 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,24:64].[@-1,111:114='line',<0>,24:68]
2022-03-26 11:18:43:590 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,24:75].[@-1,122:124='pos',<0>,24:79]
2022-03-26 11:18:43:590 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,24:85].[@-1,132:135='text',<0>,24:89]
2022-03-26 11:18:43:590 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,24:118].[@-1,165:168='text',<0>,24:122]
2022-03-26 11:18:43:591 action-translator LogManager.java:25 attr [@-1,190:192='lpf',<0>,25:18]
2022-03-26 11:18:43:591 action-translator LogManager.java:25 translate  $lpf = arrayList.New() 
2022-03-26 11:18:43:591 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,27:12]
2022-03-26 11:18:43:591 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-26 11:18:43:592 action-translator LogManager.java:25 translate 
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "")
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              
2022-03-26 11:18:43:592 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,31:76].[@-1,81:84='line',<0>,31:79]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 qattr [@-1,88:89='ID',<0>,31:86].[@-1,91:93='pos',<0>,31:89]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 qattr [@-1,97:98='ID',<0>,31:95].[@-1,100:103='text',<0>,31:98]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 qattr [@-1,107:111='types',<0>,31:105].[@-1,113:114='ty',<0>,31:111]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 qattr [@-1,152:155='list',<0>,32:30].[@-1,157:159='lpf',<0>,32:35]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 attr [@-1,206:208='lpf',<0>,33:30]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 qattr [@-1,213:216='list',<0>,33:37].[@-1,218:220='lpf',<0>,33:42]
2022-03-26 11:18:43:592 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-26 11:18:43:593 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-26 11:18:43:593 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,36:70].[@-1,75:78='line',<0>,36:73]
2022-03-26 11:18:43:593 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,36:80].[@-1,85:87='pos',<0>,36:83]
2022-03-26 11:18:43:593 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,36:89].[@-1,94:97='text',<0>,36:92]
2022-03-26 11:18:43:593 action-translator LogManager.java:25 qattr [@-1,148:151='list',<0>,37:24].[@-1,153:155='lpf',<0>,37:29]
2022-03-26 11:18:43:593 action-translator LogManager.java:25 attr [@-1,196:198='lpf',<0>,38:24]
2022-03-26 11:18:43:593 action-translator LogManager.java:25 qattr [@-1,203:206='list',<0>,38:31].[@-1,208:210='lpf',<0>,38:36]
2022-03-26 11:18:43:593 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-26 11:18:43:594 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-26 11:18:43:594 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,41:70].[@-1,76:79='line',<0>,41:74]
2022-03-26 11:18:43:594 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,41:81].[@-1,87:89='pos',<0>,41:85]
2022-03-26 11:18:43:594 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,41:91].[@-1,97:100='text',<0>,41:95]
2022-03-26 11:18:43:594 action-translator LogManager.java:25 qattr [@-1,126:128='id2',<0>,41:124].[@-1,130:133='text',<0>,41:128]
2022-03-26 11:18:43:594 action-translator LogManager.java:25 qattr [@-1,161:164='list',<0>,42:24].[@-1,166:168='lpf',<0>,42:29]
2022-03-26 11:18:43:594 action-translator LogManager.java:25 attr [@-1,209:211='lpf',<0>,43:24]
2022-03-26 11:18:43:594 action-translator LogManager.java:25 qattr [@-1,216:219='list',<0>,43:31].[@-1,221:223='lpf',<0>,43:36]
2022-03-26 11:18:43:595 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-26 11:18:43:595 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "")
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-26 11:18:43:595 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,46:70].[@-1,75:78='line',<0>,46:73]
2022-03-26 11:18:43:595 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,46:80].[@-1,85:87='pos',<0>,46:83]
2022-03-26 11:18:43:595 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,46:89].[@-1,94:97='text',<0>,46:92]
2022-03-26 11:18:43:595 action-translator LogManager.java:25 qattr [@-1,148:151='list',<0>,47:24].[@-1,153:155='lpf',<0>,47:29]
2022-03-26 11:18:43:595 action-translator LogManager.java:25 attr [@-1,196:198='lpf',<0>,48:24]
2022-03-26 11:18:43:595 action-translator LogManager.java:25 qattr [@-1,203:206='list',<0>,48:31].[@-1,208:210='lpf',<0>,48:36]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-26 11:18:43:596 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-03-26 11:18:43:596 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,51:70].[@-1,76:79='line',<0>,51:74]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,51:81].[@-1,87:89='pos',<0>,51:85]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,51:91].[@-1,97:100='text',<0>,51:95]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 qattr [@-1,126:128='id2',<0>,51:124].[@-1,130:133='text',<0>,51:128]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 qattr [@-1,161:164='list',<0>,52:24].[@-1,166:168='lpf',<0>,52:29]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 attr [@-1,209:211='lpf',<0>,53:24]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 qattr [@-1,216:219='list',<0>,53:31].[@-1,221:223='lpf',<0>,53:36]
2022-03-26 11:18:43:596 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-03-26 11:18:43:596 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2022-03-26 11:18:43:596 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-03-26 11:18:43:597 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,422:8]
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-03-26 11:18:43:597 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,423:10]
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-03-26 11:18:43:597 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,424:9]
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-03-26 11:18:43:597 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,425:9]
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-03-26 11:18:43:597 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,426:9]
2022-03-26 11:18:43:597 action-translator LogManager.java:25 translate  $ty = environment.STR 
2022-03-26 11:18:43:597 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,427:9]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-03-26 11:18:43:598 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,428:12]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-03-26 11:18:43:598 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,429:11]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-03-26 11:18:43:598 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,430:10]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2022-03-26 11:18:43:598 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,431:10]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-03-26 11:18:43:598 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-03-26 11:18:43:598 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:599 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:599 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-03-26 11:18:43:599 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,446:42]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,446:71].[@-1,34:37='line',<0>,446:74]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,446:81].[@-1,44:46='pos',<0>,446:84]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,446:90].[@-1,53:56='text',<0>,446:93]
2022-03-26 11:18:43:599 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,446:100].[@-1,75:75='l',<0>,446:115]
2022-03-26 11:18:43:600 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-03-26 11:18:43:600 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,447:42]
2022-03-26 11:18:43:600 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,447:71].[@-1,34:37='line',<0>,447:74]
2022-03-26 11:18:43:600 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,447:81].[@-1,44:46='pos',<0>,447:84]
2022-03-26 11:18:43:600 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,447:90].[@-1,53:56='text',<0>,447:93]
2022-03-26 11:18:43:600 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,447:100].[@-1,75:75='l',<0>,447:115]
2022-03-26 11:18:43:600 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:601 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-03-26 11:18:43:601 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:42]
2022-03-26 11:18:43:601 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,2:47].[@-1,17:17='p',<0>,2:57]
2022-03-26 11:18:43:601 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-03-26 11:18:43:601 action-translator LogManager.java:25 translate  $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) 
2022-03-26 11:18:43:601 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:145]
2022-03-26 11:18:43:602 action-translator LogManager.java:25 qattr [@-1,28:33='expuno',<0>,5:171].[@-1,35:39='start',<0>,5:178]
2022-03-26 11:18:43:602 action-translator LogManager.java:25 qattr [@-1,52:57='expuno',<0>,5:195].[@-1,59:63='start',<0>,5:202]
2022-03-26 11:18:43:602 action-translator LogManager.java:25 qattr [@-1,79:84='expuno',<0>,5:222].[@-1,86:86='p',<0>,5:229]
2022-03-26 11:18:43:602 action-translator LogManager.java:25 qattr [@-1,90:95='expdos',<0>,5:233].[@-1,97:97='p',<0>,5:240]
2022-03-26 11:18:43:602 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-03-26 11:18:43:604 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:604 action-translator LogManager.java:25 translate $p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)
2022-03-26 11:18:43:604 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:72]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:102].[@-1,35:38='line',<0>,2:106]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:112].[@-1,45:47='pos',<0>,2:116]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:121].[@-1,55:55='p',<0>,2:126]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 translate $p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)
2022-03-26 11:18:43:605 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,3:69]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:99].[@-1,35:38='line',<0>,3:103]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,41:43='NOT',<0>,3:109].[@-1,45:47='pos',<0>,3:113]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,3:118].[@-1,55:55='p',<0>,3:123]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 qattr [@-1,58:60='NOT',<0>,3:126].[@-1,62:65='text',<0>,3:130]
2022-03-26 11:18:43:605 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-03-26 11:18:43:605 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,4:39]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,4:44].[@-1,17:17='p',<0>,4:54]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 translate  $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) 
2022-03-26 11:18:43:606 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:69]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,26:28='AMP',<0>,5:93].[@-1,30:33='line',<0>,5:97]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,37:39='AMP',<0>,5:104].[@-1,41:43='pos',<0>,5:108]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,47:49='exp',<0>,5:114].[@-1,51:51='p',<0>,5:118]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 translate  $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.INTEGER, $types.ty, $exp1.p, $exp2.p) 
2022-03-26 11:18:43:606 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:215]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,26:30='types',<0>,6:239].[@-1,32:36='start',<0>,6:245]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,49:53='types',<0>,6:262].[@-1,55:59='start',<0>,6:268]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,96:100='types',<0>,6:309].[@-1,102:103='ty',<0>,6:315]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,107:110='exp1',<0>,6:320].[@-1,112:112='p',<0>,6:325]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 qattr [@-1,116:119='exp2',<0>,6:329].[@-1,121:121='p',<0>,6:334]
2022-03-26 11:18:43:606 action-translator LogManager.java:25 translate  $p = expressions.NewPow($types.start.GetLine(),$types.start.GetColumn(), environment.FLOAT, $types.ty, $exp1.p, $exp2.p) 
2022-03-26 11:18:43:606 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,7:216]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,26:30='types',<0>,7:240].[@-1,32:36='start',<0>,7:246]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,49:53='types',<0>,7:263].[@-1,55:59='start',<0>,7:269]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,94:98='types',<0>,7:308].[@-1,100:101='ty',<0>,7:314]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,105:108='exp1',<0>,7:319].[@-1,110:110='p',<0>,7:324]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,114:117='exp2',<0>,7:328].[@-1,119:119='p',<0>,7:333]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-03-26 11:18:43:607 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,8:88]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,8:93].[@-1,18:18='p',<0>,8:104]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 translate  $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2022-03-26 11:18:43:607 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:88]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,9:114].[@-1,35:38='line',<0>,9:121]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,9:128].[@-1,49:51='pos',<0>,9:135]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,9:141].[@-1,66:66='l',<0>,9:152]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 translate  $p = $expVectors.ev 
2022-03-26 11:18:43:607 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:40]
2022-03-26 11:18:43:607 action-translator LogManager.java:25 qattr [@-1,7:16='expVectors',<0>,10:45].[@-1,18:19='ev',<0>,10:56]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 translate  $p = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2022-03-26 11:18:43:608 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,11:115]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,11:145].[@-1,35:38='line',<0>,11:148]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,11:155].[@-1,45:47='pos',<0>,11:158]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,11:164].[@-1,54:57='text',<0>,11:167]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,11:174].[@-1,75:75='l',<0>,11:188]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-03-26 11:18:43:608 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:42]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,12:47].[@-1,20:21='cf',<0>,12:60]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-03-26 11:18:43:608 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:63]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,13:68].[@-1,20:21='cf',<0>,13:81]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-03-26 11:18:43:608 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:40]
2022-03-26 11:18:43:608 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,14:45].[@-1,18:19='cm',<0>,14:56]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-03-26 11:18:43:609 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,15:61]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,15:66].[@-1,18:19='cm',<0>,15:77]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 translate  $p = $condIf.ifCond 
2022-03-26 11:18:43:609 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,16:36]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 qattr [@-1,7:12='condIf',<0>,16:41].[@-1,14:19='ifCond',<0>,16:48]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 translate  $p = $condMatch.mtch 
2022-03-26 11:18:43:609 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,17:39]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 qattr [@-1,7:15='condMatch',<0>,17:44].[@-1,17:20='mtch',<0>,17:54]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 translate  $p = $loopBucle.lb 
2022-03-26 11:18:43:609 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,18:39]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 qattr [@-1,7:15='loopBucle',<0>,18:44].[@-1,17:18='lb',<0>,18:54]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 translate  $p = $funcVectors.ev 
2022-03-26 11:18:43:609 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,19:41]
2022-03-26 11:18:43:609 action-translator LogManager.java:25 qattr [@-1,7:17='funcVectors',<0>,19:46].[@-1,19:20='ev',<0>,19:58]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 29)
2022-03-26 11:18:43:610 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-26 11:18:43:610 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,22:166]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,22:196].[@-1,36:40='start',<0>,22:201]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,22:218].[@-1,58:62='start',<0>,22:223]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,22:242].[@-1,82:82='p',<0>,22:247]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,22:250].[@-1,88:91='text',<0>,22:253]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,22:259].[@-1,99:99='p',<0>,22:264]
2022-03-26 11:18:43:610 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 28)
2022-03-26 11:18:43:611 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-26 11:18:43:611 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,23:155]
2022-03-26 11:18:43:611 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,23:185].[@-1,36:40='start',<0>,23:190]
2022-03-26 11:18:43:611 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,23:207].[@-1,58:62='start',<0>,23:212]
2022-03-26 11:18:43:611 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,23:231].[@-1,82:82='p',<0>,23:236]
2022-03-26 11:18:43:611 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,23:239].[@-1,88:91='text',<0>,23:242]
2022-03-26 11:18:43:611 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,23:248].[@-1,99:99='p',<0>,23:253]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 27)
2022-03-26 11:18:43:612 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-26 11:18:43:612 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,24:265]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,24:295].[@-1,36:40='start',<0>,24:300]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,24:317].[@-1,58:62='start',<0>,24:322]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,24:341].[@-1,82:82='p',<0>,24:346]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,24:349].[@-1,88:91='text',<0>,24:352]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,24:358].[@-1,99:99='p',<0>,24:363]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-03-26 11:18:43:612 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-26 11:18:43:612 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,25:132]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,25:162].[@-1,36:40='start',<0>,25:167]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,25:184].[@-1,58:62='start',<0>,25:189]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,25:208].[@-1,82:82='p',<0>,25:213]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,25:216].[@-1,88:91='text',<0>,25:219]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,25:225].[@-1,99:99='p',<0>,25:230]
2022-03-26 11:18:43:612 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2022-03-26 11:18:43:613 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-03-26 11:18:43:613 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,26:131]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,26:161].[@-1,36:40='start',<0>,26:166]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,26:183].[@-1,58:62='start',<0>,26:188]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,26:207].[@-1,82:82='p',<0>,26:212]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,26:215].[@-1,88:91='text',<0>,26:218]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,26:224].[@-1,99:99='p',<0>,26:229]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2022-03-26 11:18:43:613 action-translator LogManager.java:25 translate  $p = expressions.NewCast($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p, $types.ty) 
2022-03-26 11:18:43:613 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,27:115]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,27:29='exp',<0>,27:140].[@-1,31:35='start',<0>,27:144]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,48:50='exp',<0>,27:161].[@-1,52:56='start',<0>,27:165]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,72:74='exp',<0>,27:185].[@-1,76:76='p',<0>,27:189]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 qattr [@-1,80:84='types',<0>,27:193].[@-1,86:87='ty',<0>,27:199]
2022-03-26 11:18:43:613 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate  $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) 
2022-03-26 11:18:43:614 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,28:118]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,31:33='exp',<0>,28:147].[@-1,35:39='start',<0>,28:151]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,52:54='exp',<0>,28:168].[@-1,56:60='start',<0>,28:172]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,76:78='exp',<0>,28:192].[@-1,80:80='p',<0>,28:196]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate  $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) 
2022-03-26 11:18:43:614 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,29:118]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,31:33='exp',<0>,29:147].[@-1,35:39='start',<0>,29:151]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,52:54='exp',<0>,29:168].[@-1,56:60='start',<0>,29:172]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,76:78='exp',<0>,29:192].[@-1,80:80='p',<0>,29:196]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate  $p = expressions.NewClone($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) 
2022-03-26 11:18:43:614 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,30:118]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,28:30='exp',<0>,30:144].[@-1,32:36='start',<0>,30:148]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,49:51='exp',<0>,30:165].[@-1,53:57='start',<0>,30:169]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 qattr [@-1,73:75='exp',<0>,30:189].[@-1,77:77='p',<0>,30:193]
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-03-26 11:18:43:614 action-translator LogManager.java:25 translate  $p = expressions.NewAbs( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) 
2022-03-26 11:18:43:615 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,31:117]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 qattr [@-1,27:29='exp',<0>,31:142].[@-1,31:35='start',<0>,31:146]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 qattr [@-1,48:50='exp',<0>,31:163].[@-1,52:56='start',<0>,31:167]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 qattr [@-1,72:74='exp',<0>,31:187].[@-1,76:76='p',<0>,31:191]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate  $p = expressions.NewSqrt( $exp.start.GetLine(),$exp.start.GetColumn(), $exp.p ) 
2022-03-26 11:18:43:615 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,32:117]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 qattr [@-1,28:30='exp',<0>,32:143].[@-1,32:36='start',<0>,32:147]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 qattr [@-1,49:51='exp',<0>,32:164].[@-1,53:57='start',<0>,32:168]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 qattr [@-1,73:75='exp',<0>,32:188].[@-1,77:77='p',<0>,32:192]
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 29)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 28)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 27)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-03-26 11:18:43:615 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-03-26 11:18:43:616 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,489:34].[@-1,43:46='text',<0>,489:41]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,490:47].[@-1,110:113='text',<0>,490:54]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,494:17]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,257:262='NUMBER',<0>,494:47].[@-1,264:267='line',<0>,494:54]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,270:275='NUMBER',<0>,494:60].[@-1,277:279='pos',<0>,494:67]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,366:371='NUMBER',<0>,496:41].[@-1,373:376='text',<0>,496:48]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 attr [@-1,485:485='p',<0>,500:17]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,515:520='NUMBER',<0>,500:47].[@-1,522:525='line',<0>,500:54]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,528:533='NUMBER',<0>,500:60].[@-1,535:537='pos',<0>,500:67]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 translate 
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         
2022-03-26 11:18:43:616 action-translator LogManager.java:25 qattr [@-1,23:28='STRING',<0>,504:21].[@-1,30:33='text',<0>,504:28]
2022-03-26 11:18:43:616 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,505:14]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,80:85='STRING',<0>,505:44].[@-1,87:90='line',<0>,505:51]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,94:99='STRING',<0>,505:58].[@-1,101:103='pos',<0>,505:65]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 translate 
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,22:30='CHARACTER',<0>,508:20].[@-1,32:35='text',<0>,508:30]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 attr [@-1,51:51='p',<0>,509:13]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,81:89='CHARACTER',<0>,509:43].[@-1,91:94='line',<0>,509:53]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,98:106='CHARACTER',<0>,509:60].[@-1,108:110='pos',<0>,509:70]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) 
2022-03-26 11:18:43:617 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,511:8]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,511:38].[@-1,36:39='line',<0>,511:42]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,511:49].[@-1,47:49='pos',<0>,511:53]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) 
2022-03-26 11:18:43:617 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,512:8]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,512:38].[@-1,36:39='line',<0>,512:42]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,512:49].[@-1,47:49='pos',<0>,512:53]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 translate  $p = $list.p
2022-03-26 11:18:43:617 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,513:19]
2022-03-26 11:18:43:617 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,513:24].[@-1,12:12='p',<0>,513:29]
2022-03-26 11:18:43:618 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:618 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2022-03-26 11:18:43:618 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2022-03-26 11:18:43:618 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2022-03-26 11:18:43:618 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2022-03-26 11:18:43:618 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2022-03-26 11:18:43:618 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-26 11:18:43:619 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) 
2022-03-26 11:18:43:619 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:136]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:168].[@-1,39:43='start',<0>,5:173]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:191].[@-1,62:66='start',<0>,5:196]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:216].[@-1,87:87='p',<0>,5:221]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,5:225].[@-1,102:102='p',<0>,5:236]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:619 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2022-03-26 11:18:43:619 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2022-03-26 11:18:43:619 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-03-26 11:18:43:619 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:620 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:620 action-translator LogManager.java:25 translate 
                    StrExp := environment.NewStructContent($ID.text, $expression.p)
                    $l = arrayList.New();
                    $l.Add(StrExp);
                
2022-03-26 11:18:43:620 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,3:60].[@-1,65:68='text',<0>,3:63]
2022-03-26 11:18:43:620 action-translator LogManager.java:25 qattr [@-1,72:81='expression',<0>,3:70].[@-1,83:83='p',<0>,3:81]
2022-03-26 11:18:43:620 action-translator LogManager.java:25 setAttr [@-1,108:108='l',<0>,4:21] [@-1,111:126=' arrayList.New()',<0>,4:24]
2022-03-26 11:18:43:620 action-translator LogManager.java:25 translate  arrayList.New()
2022-03-26 11:18:43:620 action-translator LogManager.java:25 attr [@-1,151:151='l',<0>,5:21]
2022-03-26 11:18:43:620 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:621 action-translator LogManager.java:25 translate 
                                                  StrExp := environment.NewStructContent($ID.text, $expression.p)
                                                  $list.l.Add(StrExp);
                                                  $l = $list.l;
                                              
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,10:90].[@-1,95:98='text',<0>,10:93]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,102:111='expression',<0>,10:100].[@-1,113:113='p',<0>,10:111]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,11:51].[@-1,173:173='l',<0>,11:56]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 setAttr [@-1,240:240='l',<0>,12:51] [@-1,243:250=' $list.l',<0>,12:54]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 translate  $list.l
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,9:153].[@-1,7:7='l',<0>,9:158]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:621 action-translator LogManager.java:25 translate  $ev = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, $listParams.l, nil, nil) 
2022-03-26 11:18:43:621 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,536:41]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,30:36='VECTOR1',<0>,536:69].[@-1,38:41='line',<0>,536:77]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,45:51='VECTOR1',<0>,536:84].[@-1,53:55='pos',<0>,536:92]
2022-03-26 11:18:43:621 action-translator LogManager.java:25 qattr [@-1,59:68='listParams',<0>,536:98].[@-1,70:70='l',<0>,536:109]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 translate  $ev = expressions.NewVector($VECTOR1.line, $VECTOR1.pos, nil, $listVec.lv, nil) 
2022-03-26 11:18:43:622 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,537:38]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 qattr [@-1,30:36='VECTOR1',<0>,537:66].[@-1,38:41='line',<0>,537:74]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 qattr [@-1,45:51='VECTOR1',<0>,537:81].[@-1,53:55='pos',<0>,537:89]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 qattr [@-1,64:70='listVec',<0>,537:100].[@-1,72:73='lv',<0>,537:108]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 translate  $ev = expressions.NewVector($VECTOR2.line, $VECTOR2.pos, nil, nil, nil) 
2022-03-26 11:18:43:622 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,538:36]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 qattr [@-1,30:36='VECTOR2',<0>,538:64].[@-1,38:41='line',<0>,538:72]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 qattr [@-1,45:51='VECTOR2',<0>,538:79].[@-1,53:55='pos',<0>,538:87]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 translate  $ev = expressions.NewVector($VECTOR2.line, $VECTOR2.pos, nil, nil, $expression.p) 
2022-03-26 11:18:43:622 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,539:53]
2022-03-26 11:18:43:622 action-translator LogManager.java:25 qattr [@-1,30:36='VECTOR2',<0>,539:81].[@-1,38:41='line',<0>,539:89]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 qattr [@-1,45:51='VECTOR2',<0>,539:96].[@-1,53:55='pos',<0>,539:104]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 qattr [@-1,69:78='expression',<0>,539:120].[@-1,80:80='p',<0>,539:131]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 translate  $lv = expressions.NewVectorList($exp1.start.GetLine(),$exp1.start.GetColumn(), $exp1.p, $exp2.p) 
2022-03-26 11:18:43:623 action-translator LogManager.java:25 attr [@-1,2:3='lv',<0>,543:40]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 qattr [@-1,34:37='exp1',<0>,543:72].[@-1,39:43='start',<0>,543:77]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 qattr [@-1,56:59='exp1',<0>,543:94].[@-1,61:65='start',<0>,543:99]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 qattr [@-1,81:84='exp1',<0>,543:119].[@-1,86:86='p',<0>,543:124]
2022-03-26 11:18:43:623 action-translator LogManager.java:25 qattr [@-1,90:93='exp2',<0>,543:128].[@-1,95:95='p',<0>,543:133]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 translate  $ev = expressions.NewRemove($ID.line, $ID.pos, $ID.text, $expression.p) 
2022-03-26 11:18:43:624 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,547:45]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,547:73].[@-1,33:36='line',<0>,547:76]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,547:83].[@-1,43:45='pos',<0>,547:86]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,547:92].[@-1,52:55='text',<0>,547:95]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,59:68='expression',<0>,547:102].[@-1,70:70='p',<0>,547:113]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 translate  $ev = expressions.NewContains($ID.line, $ID.pos, $ID.text, $expression.p) 
2022-03-26 11:18:43:624 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,548:51]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,548:81].[@-1,35:38='line',<0>,548:84]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,548:91].[@-1,45:47='pos',<0>,548:94]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,548:100].[@-1,54:57='text',<0>,548:103]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,61:70='expression',<0>,548:110].[@-1,72:72='p',<0>,548:121]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 translate  $ev = expressions.NewLen($ID.line, $ID.pos, $ID.text) 
2022-03-26 11:18:43:624 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,549:31]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,27:28='ID',<0>,549:56].[@-1,30:33='line',<0>,549:59]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,549:66].[@-1,40:42='pos',<0>,549:69]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,549:75].[@-1,49:52='text',<0>,549:78]
2022-03-26 11:18:43:624 action-translator LogManager.java:25 translate  $ev = expressions.NewCapacity($ID.line, $ID.pos, $ID.text) 
2022-03-26 11:18:43:625 action-translator LogManager.java:25 attr [@-1,2:3='ev',<0>,550:36]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,550:66].[@-1,35:38='line',<0>,550:69]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,550:76].[@-1,45:47='pos',<0>,550:79]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,550:85].[@-1,54:57='text',<0>,550:88]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 translate  $cm = expressions.NewModuleAccess($listIdMod.start.GetLine(),$listIdMod.start.GetColumn(), $listIdMod.l, $expression.p ) 
2022-03-26 11:18:43:625 action-translator LogManager.java:25 attr [@-1,2:3='cm',<0>,554:25]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,36:44='listIdMod',<0>,554:59].[@-1,46:50='start',<0>,554:69]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,63:71='listIdMod',<0>,554:86].[@-1,73:77='start',<0>,554:96]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,93:101='listIdMod',<0>,554:116].[@-1,103:103='l',<0>,554:126]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,107:116='expression',<0>,554:130].[@-1,118:118='p',<0>,554:141]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 translate 
2022-03-26 11:18:43:625 action-translator LogManager.java:25 translate 
               $l = arrayList.New()
               $l.Add($ID.text)
            
2022-03-26 11:18:43:625 action-translator LogManager.java:25 attr [@-1,18:18='l',<0>,3:16]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 attr [@-1,55:55='l',<0>,4:16]
2022-03-26 11:18:43:625 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,4:23].[@-1,65:68='text',<0>,4:26]
2022-03-26 11:18:43:626 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:43:626 action-translator LogManager.java:25 translate 
                                        $list.l.Add($ID.text)
                                        $l = $list.l
                                     
2022-03-26 11:18:43:626 action-translator LogManager.java:25 qattr [@-1,43:46='list',<0>,9:41].[@-1,48:48='l',<0>,9:46]
2022-03-26 11:18:43:626 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,9:53].[@-1,58:61='text',<0>,9:56]
2022-03-26 11:18:43:626 action-translator LogManager.java:25 attr [@-1,106:106='l',<0>,10:41]
2022-03-26 11:18:43:626 action-translator LogManager.java:25 qattr [@-1,111:114='list',<0>,10:46].[@-1,116:116='l',<0>,10:51]
2022-03-26 11:18:43:626 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-03-26 11:18:44:112 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-26 11:18:44:112 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-26 11:18:44:182 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-03-26 11:18:44:182 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

