2022-04-10 17:59:39:906 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { }) (ALT module {  }) (ALT structCreation { }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER {  }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {}) (ALT (= mc moduleContent) PUB moduleAction { }) (ALT (= mc moduleContent) module { }) (ALT (= mc moduleContent) moduleAction {}) (ALT PUB module {}) (ALT PUB moduleAction {}) (ALT module {}) (ALT moduleAction { }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { }) (ALT structCreation { }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {}) (ALT (= list listParamsCall) COMA AMP MUT expression {}) (ALT expression { }) (ALT AMP MUT expression { }) (ALT { }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER {}))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ block LLAVEDER { }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { }) (ALT BREAK { }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { }) (ALT RETURN PYC { }) (ALT RETURN expression { }) (ALT RETURN { }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse { }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER { }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {}))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {}) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {}))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {}) (ALT expression { }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression {}) (ALT LET MUT ID IGUAL expression {}) (ALT LET ID D_PTS types IGUAL expression {}) (ALT LET ID IGUAL expression {}) (ALT LET MUT ID D_PTS arrayType IGUAL expression {}) (ALT LET ID D_PTS arrayType IGUAL expression {}) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET ID D_PTS typeVect IGUAL expression { }) (ALT LET MUT ID D_PTS typeVect IGUAL expression { }))) (RULE typeVect (returns ) (BLOCK (ALT VECTOR2 MENOR (= tv typeVect) MAYOR) (ALT VECTOR2 MENOR types MAYOR) (ALT VECTOR2 MENOR ID MAYOR))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS arrayType {}) (ALT (= id1 ID) D_PTS types {}) (ALT (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= id1 ID) D_PTS arrayType {}))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { }) (ALT listAccessStruct IGUAL expression { }) (ALT ID listAccessArray IGUAL expression { }) (ALT ID CORIZQ (= e1 expression) CORDER listArrStr IGUAL (= e2 expression) { }))) (RULE listArrStr (returns *arrayList.List l) (BLOCK (ALT (= list listArrStr) PUNTO ID {}) (ALT PUNTO ID {}))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {}) (ALT ID {}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {}) (ALT CORIZQ expression CORDER {}))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {}) (ALT CORIZQ types PYC expression CORDER {}) (ALT CORIZQ (= exp1 expression) PYC (= exp2 expression) CORDER {}) (ALT CORIZQ types CORDER {}))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {}) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {}) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {}))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {}) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR {}) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT (= id2 ID) { }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS (= id2 ID) {}) (ALT ID D_PTS types { }) (ALT ID D_PTS AMP MUT arrayType { }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {}) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR { }) (ALT ID D_PTS arrayType { }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR { }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR { }) (ALT (= id1 ID) D_PTS AMP MUT (= id2 ID) { }) (ALT (= id1 ID) (+ (BLOCK (ALT D_PTS))) (? (BLOCK (ALT AMP MUT))) (= id2 ID) {}) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT USIZE { $ty = environment.INTEGER }) (ALT ARRAY { $ty = environment.ARRAY }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { }) (ALT ID PARIZQ listParamsCall PARDER { }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) {}))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT types C_PTS POW PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT types C_PTS POWF PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= exp expr_arit) AS types { }) (ALT (= exp expr_arit) PUNTO TOSTR { }) (ALT (= exp expr_arit) PUNTO TOOWN { }) (ALT (= exp expr_arit) PUNTO CLONE { }) (ALT (= exp expr_arit) PUNTO ABS { }) (ALT (= exp expr_arit) PUNTO SQRT { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER PYC { }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { }) (ALT (= ex1 expr_arit) PUNTO CONTAINS PARIZQ AMP (= ex2 expression) PARDER { }) (ALT (= exp expr_arit) PUNTO LEN PARIZQ PARDER { }) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IG_IG) (ALT DIFERENTE))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (= opIz expr_arit) (= op AND) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op OR) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT expVectors { $p = $expVectors.ev }) (ALT CORIZQ listParams CORDER { }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { }) (ALT primitive { $p = $primitive.p }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT AMP (= exp expr_arit) { }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos, num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT STRING {
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         }) (ALT CHARACTER {
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { }) (ALT (= list listArray) PUNTO ID { }) (ALT ID { }))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {}) (ALT ID D_PTS expression {}))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT VECTOR1 CORIZQ listParams CORDER { }) (ALT VECTOR1 CORIZQ listVec CORDER { }) (ALT VECTOR2 C_PTS NEW PARIZQ PARDER { }) (ALT VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {}) (ALT ID C_PTS {})))))
2022-04-10 17:59:39:947 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { }) (ALT module {  }) (ALT structCreation { }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER {  }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {}) (ALT (= mc moduleContent) PUB moduleAction { }) (ALT (= mc moduleContent) module { }) (ALT (= mc moduleContent) moduleAction {}) (ALT PUB module {}) (ALT PUB moduleAction {}) (ALT module {}) (ALT moduleAction { }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { }) (ALT structCreation { }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {}) (ALT (= list listParamsCall) COMA AMP MUT expression {}) (ALT expression { }) (ALT AMP MUT expression { }) (ALT { }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER {}))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ block LLAVEDER { }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { }) (ALT BREAK { }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { }) (ALT RETURN PYC { }) (ALT RETURN expression { }) (ALT RETURN { }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse { }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER { }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {}))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {}) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {}))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {}) (ALT expression { }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression {}) (ALT LET MUT ID IGUAL expression {}) (ALT LET ID D_PTS types IGUAL expression {}) (ALT LET ID IGUAL expression {}) (ALT LET MUT ID D_PTS arrayType IGUAL expression {}) (ALT LET ID D_PTS arrayType IGUAL expression {}) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET ID D_PTS typeVect IGUAL expression { }) (ALT LET MUT ID D_PTS typeVect IGUAL expression { }))) (RULE typeVect (returns ) (BLOCK (ALT VECTOR2 MENOR (= tv typeVect) MAYOR) (ALT VECTOR2 MENOR types MAYOR) (ALT VECTOR2 MENOR ID MAYOR))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS arrayType {}) (ALT (= id1 ID) D_PTS types {}) (ALT (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= id1 ID) D_PTS arrayType {}))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { }) (ALT listAccessStruct IGUAL expression { }) (ALT ID listAccessArray IGUAL expression { }) (ALT ID CORIZQ (= e1 expression) CORDER listArrStr IGUAL (= e2 expression) { }))) (RULE listArrStr (returns *arrayList.List l) (BLOCK (ALT (= list listArrStr) PUNTO ID {}) (ALT PUNTO ID {}))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {}) (ALT ID {}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {}) (ALT CORIZQ expression CORDER {}))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {}) (ALT CORIZQ types PYC expression CORDER {}) (ALT CORIZQ (= exp1 expression) PYC (= exp2 expression) CORDER {}) (ALT CORIZQ types CORDER {}))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {}) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {}) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {}))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {}) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR {}) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR {}) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT (= id2 ID) { }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS (= id2 ID) {}) (ALT ID D_PTS types { }) (ALT ID D_PTS AMP MUT arrayType { }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {}) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR { }) (ALT ID D_PTS arrayType { }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR { }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR { }) (ALT (= id1 ID) D_PTS AMP MUT (= id2 ID) { }) (ALT (= id1 ID) (+ (BLOCK (ALT D_PTS))) (? (BLOCK (ALT AMP MUT))) (= id2 ID) {}) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT USIZE { $ty = environment.INTEGER }) (ALT ARRAY { $ty = environment.ARRAY }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { }) (ALT ID PARIZQ listParamsCall PARDER { }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) {}))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT types C_PTS POW PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT types C_PTS POWF PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT (= opIz expr_arit) (= op (SET MUL DIV MOD)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= exp expr_arit) AS types { }) (ALT (= exp expr_arit) PUNTO TOSTR { }) (ALT (= exp expr_arit) PUNTO TOOWN { }) (ALT (= exp expr_arit) PUNTO CLONE { }) (ALT (= exp expr_arit) PUNTO ABS { }) (ALT (= exp expr_arit) PUNTO SQRT { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER PYC { }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { }) (ALT (= ex1 expr_arit) PUNTO CONTAINS PARIZQ AMP (= ex2 expression) PARDER { }) (ALT (= exp expr_arit) PUNTO LEN PARIZQ PARDER { }) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IG_IG DIFERENTE)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (= opIz expr_arit) (= op AND) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op OR) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT expVectors { $p = $expVectors.ev }) (ALT CORIZQ listParams CORDER { }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { }) (ALT primitive { $p = $primitive.p }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT AMP (= exp expr_arit) { }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos, num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT STRING {
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         }) (ALT CHARACTER {
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { }) (ALT (= list listArray) PUNTO ID { }) (ALT ID { }))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {}) (ALT ID D_PTS expression {}))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT VECTOR1 CORIZQ listParams CORDER { }) (ALT VECTOR1 CORIZQ listVec CORDER { }) (ALT VECTOR2 C_PTS NEW PARIZQ PARDER { }) (ALT VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {}) (ALT ID C_PTS {})))))
2022-04-10 17:59:40:142 left-recursion LogManager.java:25 moduleContent returns [*arrayList.List m]
    :   ( {} PUB<tokenIndex=153> module<tokenIndex=155> {} 
        | PUB<tokenIndex=161> moduleAction<tokenIndex=163> {} 
        | module<tokenIndex=169> {} 
        | moduleAction<tokenIndex=175> { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> PUB<tokenIndex=113> module<tokenIndex=115> {}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUB<tokenIndex=125> moduleAction<tokenIndex=127> { }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> module<tokenIndex=137> { }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> moduleAction<tokenIndex=147> {}
        )*
    ;
2022-04-10 17:59:40:149 grammar LogManager.java:25 added: (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (BLOCK (ALT {} (PUB (ELEMENT_OPTIONS (= tokenIndex 153))) (module (ELEMENT_OPTIONS (= tokenIndex 155))) {}) (ALT (PUB (ELEMENT_OPTIONS (= tokenIndex 161))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 163))) {}) (ALT (module (ELEMENT_OPTIONS (= tokenIndex 169))) {}) (ALT (moduleAction (ELEMENT_OPTIONS (= tokenIndex 175))) { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (PUB (ELEMENT_OPTIONS (= tokenIndex 113))) (module (ELEMENT_OPTIONS (= tokenIndex 115))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUB (ELEMENT_OPTIONS (= tokenIndex 125))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 127))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (module (ELEMENT_OPTIONS (= tokenIndex 137))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 147))) {}))))))
2022-04-10 17:59:40:211 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=426> { } 
        | AMP<tokenIndex=432> MUT<tokenIndex=434> expression<tokenIndex=436> { } 
        | { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=403> expression<tokenIndex=405>{}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=414> AMP<tokenIndex=416> MUT<tokenIndex=418> expression<tokenIndex=420> {}
        )*
    ;
2022-04-10 17:59:40:213 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 426))) { }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 432))) (MUT (ELEMENT_OPTIONS (= tokenIndex 434))) (expression (ELEMENT_OPTIONS (= tokenIndex 436))) { }) (ALT { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 403))) (expression (ELEMENT_OPTIONS (= tokenIndex 405))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 414))) (AMP (ELEMENT_OPTIONS (= tokenIndex 416))) (MUT (ELEMENT_OPTIONS (= tokenIndex 418))) (expression (ELEMENT_OPTIONS (= tokenIndex 420))) {}))))))
2022-04-10 17:59:40:271 left-recursion LogManager.java:25 block returns [*arrayList.List blk]
    :   ( {} instruction<tokenIndex=690> { $blk.Add($instruction.inst) } 
        | expression<tokenIndex=696> { $blk.Add($expression.p) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> instruction<tokenIndex=674> {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> expression<tokenIndex=684> {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }
        )*
    ;
2022-04-10 17:59:40:273 grammar LogManager.java:25 added: (RULE block (returns *arrayList.List blk) (BLOCK (ALT (BLOCK (ALT {} (instruction (ELEMENT_OPTIONS (= tokenIndex 690))) { $blk.Add($instruction.inst) }) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 696))) { $blk.Add($expression.p) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (instruction (ELEMENT_OPTIONS (= tokenIndex 674))) {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (expression (ELEMENT_OPTIONS (= tokenIndex 684))) {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }))))))
2022-04-10 17:59:40:314 left-recursion LogManager.java:25 listMatch returns [*arrayList.List ma]
    :   ( {} expression<tokenIndex=783> { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PLEC<tokenIndex=775> expression<tokenIndex=777> {}
        )*
    ;
2022-04-10 17:59:40:316 grammar LogManager.java:25 added: (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 783))) { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PLEC (ELEMENT_OPTIONS (= tokenIndex 775))) (expression (ELEMENT_OPTIONS (= tokenIndex 777))) {}))))))
2022-04-10 17:59:40:347 left-recursion LogManager.java:25 listStructDec returns [*arrayList.List l]
    :   ( {} id1=ID<tokenIndex=1218> D_PTS<tokenIndex=1220> types<tokenIndex=1222>{} 
        | id1=ID<tokenIndex=1229> D_PTS<tokenIndex=1231> id2=ID<tokenIndex=1235> {} 
        | id1=ID<tokenIndex=1243> D_PTS<tokenIndex=1245> arrayType<tokenIndex=1247> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> COMA<tokenIndex=1164> id1=ID<tokenIndex=1168> D_PTS<tokenIndex=1170> types<tokenIndex=1172> {}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=1182> id1=ID<tokenIndex=1186> D_PTS<tokenIndex=1188> id2=ID<tokenIndex=1192> {}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=1202> id1=ID<tokenIndex=1206> D_PTS<tokenIndex=1208> arrayType<tokenIndex=1210> {}
        )*
    ;
2022-04-10 17:59:40:350 grammar LogManager.java:25 added: (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1218)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1220))) (types (ELEMENT_OPTIONS (= tokenIndex 1222))) {}) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1229)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1231))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1235)))) {}) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1243)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1245))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1247))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1164))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1168)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1170))) (types (ELEMENT_OPTIONS (= tokenIndex 1172))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1182))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1186)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1188))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1192)))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1202))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1206)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1208))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1210))) {}))))))
2022-04-10 17:59:40:379 left-recursion LogManager.java:25 listArrStr returns [*arrayList.List l]
    :   ( {} PUNTO<tokenIndex=1335> ID<tokenIndex=1337> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1327> ID<tokenIndex=1329> {}
        )*
    ;
2022-04-10 17:59:40:380 grammar LogManager.java:25 added: (RULE listArrStr (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1335))) (ID (ELEMENT_OPTIONS (= tokenIndex 1337))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1327))) (ID (ELEMENT_OPTIONS (= tokenIndex 1329))) {}))))))
2022-04-10 17:59:40:403 left-recursion LogManager.java:25 listAccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1362> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1354> ID<tokenIndex=1356> {}
        )*
    ;
2022-04-10 17:59:40:405 grammar LogManager.java:25 added: (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1362))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1354))) (ID (ELEMENT_OPTIONS (= tokenIndex 1356))) {}))))))
2022-04-10 17:59:40:434 left-recursion LogManager.java:25 listAccessArray returns [*arrayList.List l]
    :   ( {} CORIZQ<tokenIndex=1388> expression<tokenIndex=1390> CORDER<tokenIndex=1392>{} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1379> expression<tokenIndex=1381> CORDER<tokenIndex=1383>{}
        )*
    ;
2022-04-10 17:59:40:436 grammar LogManager.java:25 added: (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1388))) (expression (ELEMENT_OPTIONS (= tokenIndex 1390))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1392))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1379))) (expression (ELEMENT_OPTIONS (= tokenIndex 1381))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1383))) {}))))))
2022-04-10 17:59:40:465 left-recursion LogManager.java:25 listParamsFunc returns [*arrayList.List lpf]
    :   ( {} ID<tokenIndex=1780> D_PTS<tokenIndex=1782> types<tokenIndex=1784>{ } 
        | ID<tokenIndex=1789> D_PTS<tokenIndex=1791> AMP<tokenIndex=1793> MUT<tokenIndex=1795> arrayType<tokenIndex=1797> { } 
        | id1=ID<tokenIndex=1805> D_PTS<tokenIndex=1807> AMP<tokenIndex=1809> MUT<tokenIndex=1811> VECTOR2<tokenIndex=1813> MENOR<tokenIndex=1815> id2=ID<tokenIndex=1819> MAYOR<tokenIndex=1821> {} 
        | id1=ID<tokenIndex=1829> D_PTS<tokenIndex=1831> AMP<tokenIndex=1833> MUT<tokenIndex=1835> VECTOR2<tokenIndex=1837> MENOR<tokenIndex=1839> types<tokenIndex=1841> MAYOR<tokenIndex=1843> { } 
        | ID<tokenIndex=1849> D_PTS<tokenIndex=1851> arrayType<tokenIndex=1853> { } 
        | id1=ID<tokenIndex=1861> D_PTS<tokenIndex=1863> VECTOR2<tokenIndex=1865> MENOR<tokenIndex=1867> id2=ID<tokenIndex=1871> MAYOR<tokenIndex=1873>  { } 
        | id1=ID<tokenIndex=1881> D_PTS<tokenIndex=1883> VECTOR2<tokenIndex=1885> MENOR<tokenIndex=1887> types<tokenIndex=1889> MAYOR<tokenIndex=1891>  { } 
        | id1=ID<tokenIndex=1899> D_PTS<tokenIndex=1901> AMP<tokenIndex=1903> MUT<tokenIndex=1905> id2=ID<tokenIndex=1909> { } 
        | id1=ID<tokenIndex=1917> D_PTS<tokenIndex=1919> +(AMP<tokenIndex=1923> MUT<tokenIndex=1925>)? id2=ID<tokenIndex=1931> {} 
        | { $lpf = arrayList.New() } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> COMA<tokenIndex=1580> ID<tokenIndex=1582> D_PTS<tokenIndex=1584> types<tokenIndex=1586> {}
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> COMA<tokenIndex=1596> ID<tokenIndex=1598> D_PTS<tokenIndex=1600> AMP<tokenIndex=1602> MUT<tokenIndex=1604> arrayType<tokenIndex=1606> {}
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> COMA<tokenIndex=1616> id1=ID<tokenIndex=1620> D_PTS<tokenIndex=1622> AMP<tokenIndex=1624> MUT<tokenIndex=1626> VECTOR2<tokenIndex=1628> MENOR<tokenIndex=1630> id2=ID<tokenIndex=1634> MAYOR<tokenIndex=1636> {}
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> COMA<tokenIndex=1646> id1=ID<tokenIndex=1650> D_PTS<tokenIndex=1652> AMP<tokenIndex=1654> MUT<tokenIndex=1656> VECTOR2<tokenIndex=1658> MENOR<tokenIndex=1660> types<tokenIndex=1662> MAYOR<tokenIndex=1664> {}
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> COMA<tokenIndex=1674> ID<tokenIndex=1676> D_PTS<tokenIndex=1678> arrayType<tokenIndex=1680> {}
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> COMA<tokenIndex=1690> id1=ID<tokenIndex=1694> D_PTS<tokenIndex=1696> VECTOR2<tokenIndex=1698> MENOR<tokenIndex=1700> id2=ID<tokenIndex=1704> MAYOR<tokenIndex=1706>  {}
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> COMA<tokenIndex=1716> id1=ID<tokenIndex=1720> D_PTS<tokenIndex=1722> VECTOR2<tokenIndex=1724> MENOR<tokenIndex=1726> types<tokenIndex=1728> MAYOR<tokenIndex=1730>  {}
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> COMA<tokenIndex=1740> id1=ID<tokenIndex=1744> D_PTS<tokenIndex=1746> AMP<tokenIndex=1748> MUT<tokenIndex=1750> id2=ID<tokenIndex=1754> { }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> COMA<tokenIndex=1764> id1=ID<tokenIndex=1768> D_PTS<tokenIndex=1770> id2=ID<tokenIndex=1774> {}
        )*
    ;
2022-04-10 17:59:40:477 grammar LogManager.java:25 added: (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1780))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1782))) (types (ELEMENT_OPTIONS (= tokenIndex 1784))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1789))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1791))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1793))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1795))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1797))) { }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1805)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1807))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1809))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1811))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1813))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1815))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1819)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1821))) {}) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1829)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1831))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1833))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1835))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1837))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1839))) (types (ELEMENT_OPTIONS (= tokenIndex 1841))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1843))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1849))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1851))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1853))) { }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1861)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1863))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1865))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1867))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1871)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1873))) { }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1881)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1883))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1885))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1887))) (types (ELEMENT_OPTIONS (= tokenIndex 1889))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1891))) { }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1899)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1901))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1903))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1905))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1909)))) { }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1917)))) (+ (BLOCK (ALT (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1919)))))) (? (BLOCK (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 1923))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1925)))))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1931)))) {}) (ALT { $lpf = arrayList.New() })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1580))) (ID (ELEMENT_OPTIONS (= tokenIndex 1582))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1584))) (types (ELEMENT_OPTIONS (= tokenIndex 1586))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1596))) (ID (ELEMENT_OPTIONS (= tokenIndex 1598))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1600))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1602))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1604))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1606))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1616))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1620)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1622))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1624))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1626))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1628))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1630))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1634)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1636))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1646))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1650)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1652))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1654))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1656))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1658))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1660))) (types (ELEMENT_OPTIONS (= tokenIndex 1662))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1664))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1674))) (ID (ELEMENT_OPTIONS (= tokenIndex 1676))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1678))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1680))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1690))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1694)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1696))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1698))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1700))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1704)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1706))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1716))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1720)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1722))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1724))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1726))) (types (ELEMENT_OPTIONS (= tokenIndex 1728))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1730))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1740))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1744)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1746))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1748))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1750))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1754)))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1764))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1768)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1770))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1774)))) {}))))))
2022-04-10 17:59:40:494 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=2027> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2019> expression<tokenIndex=2021>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-04-10 17:59:40:495 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 2027))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2019))) (expression (ELEMENT_OPTIONS (= tokenIndex 2021))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-04-10 17:59:40:511 left-recursion LogManager.java:25 expression returns [interfaces.Expression p]
    :   ( {} expr_arit<tokenIndex=2073> { $p = $expr_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> PUNTO<tokenIndex=2083> PUNTO<tokenIndex=2085> expdos=expression<tokenIndex=2089,p=2> {}
        )*
    ;
2022-04-10 17:59:40:512 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2073))) { $p = $expr_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2083))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2085))) (= expdos (expression (ELEMENT_OPTIONS (= tokenIndex 2089) (= p 2)))) {}))))))
2022-04-10 17:59:40:529 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} SUB<tokenIndex=2102> opDe=expr_arit<tokenIndex=2106,p=33> {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)} 
        | types<tokenIndex=2112> C_PTS<tokenIndex=2114> POW<tokenIndex=2116> PARIZQ<tokenIndex=2118> exp1=expression<tokenIndex=2122> COMA<tokenIndex=2124> exp2=expression<tokenIndex=2128> PARDER<tokenIndex=2130> { } 
        | types<tokenIndex=2136> C_PTS<tokenIndex=2138> POWF<tokenIndex=2140> PARIZQ<tokenIndex=2142> exp1=expression<tokenIndex=2146> COMA<tokenIndex=2148> exp2=expression<tokenIndex=2152> PARDER<tokenIndex=2154> { } 
        | ID<tokenIndex=2254> PUNTO<tokenIndex=2256> REMOVE<tokenIndex=2258> PARIZQ<tokenIndex=2260> expression<tokenIndex=2262> PARDER<tokenIndex=2264> { } 
        | ID<tokenIndex=2270> PUNTO<tokenIndex=2272> REMOVE<tokenIndex=2274> PARIZQ<tokenIndex=2276> expression<tokenIndex=2278> PARDER<tokenIndex=2280> PYC<tokenIndex=2282> { } 
        | ID<tokenIndex=2288> PUNTO<tokenIndex=2290> CAPACITY<tokenIndex=2292> PARIZQ<tokenIndex=2294> PARDER<tokenIndex=2296> { } 
        | NOT<tokenIndex=2388> opDe=expr_arit<tokenIndex=2392,p=16> {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)} 
        | expVectors<tokenIndex=2430> { $p = $expVectors.ev } 
        | CORIZQ<tokenIndex=2436> listParams<tokenIndex=2438> CORDER<tokenIndex=2440> { } 
        | ID<tokenIndex=2446> LLAVEIZQ<tokenIndex=2448> listStructExp<tokenIndex=2450> LLAVEDER<tokenIndex=2452> { } 
        | primitive<tokenIndex=2458> { $p = $primitive.p } 
        | PARIZQ<tokenIndex=2464> expression<tokenIndex=2466> PARDER<tokenIndex=2468> { $p = $expression.p } 
        | callFunction<tokenIndex=2474> { $p = $callFunction.cf } 
        | callFunction<tokenIndex=2480> PYC<tokenIndex=2482> { $p = $callFunction.cf } 
        | callModule<tokenIndex=2488> { $p = $callModule.cm } 
        | callModule<tokenIndex=2494> PYC<tokenIndex=2496> { $p = $callModule.cm } 
        | condIf<tokenIndex=2502> { $p = $condIf.ifCond } 
        | condMatch<tokenIndex=2508> { $p = $condMatch.mtch } 
        | loopBucle<tokenIndex=2514> { $p = $loopBucle.lb } 
        | AMP<tokenIndex=2520> exp=expr_arit<tokenIndex=2524,p=1> { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 30)}?<p=30> op=(MUL<tokenIndex=2167>|DIV<tokenIndex=2169>|MOD<tokenIndex=2171>) opDe=expr_arit<tokenIndex=2176,p=31> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=2347>|SUB<tokenIndex=2349>) opDe=expr_arit<tokenIndex=2354,p=19> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MENOR<tokenIndex=2367>|MENORIGUAL<tokenIndex=2369>|MAYORIGUAL<tokenIndex=2371>|MAYOR<tokenIndex=2373>|IG_IG<tokenIndex=2375>|DIFERENTE<tokenIndex=2377>) opDe=expr_arit<tokenIndex=2382,p=18> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=AND<tokenIndex=2404> opDe=expr_arit<tokenIndex=2408,p=16> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=OR<tokenIndex=2420> opDe=expr_arit<tokenIndex=2424,p=15> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 29)}?<p=29> AS<tokenIndex=2186> types<tokenIndex=2188> { }
                  | {p.Precpred(p.GetParserRuleContext(), 28)}?<p=28> PUNTO<tokenIndex=2198> TOSTR<tokenIndex=2200> { }
                  | {p.Precpred(p.GetParserRuleContext(), 27)}?<p=27> PUNTO<tokenIndex=2210> TOOWN<tokenIndex=2212> { }
                  | {p.Precpred(p.GetParserRuleContext(), 26)}?<p=26> PUNTO<tokenIndex=2222> CLONE<tokenIndex=2224> { }
                  | {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> PUNTO<tokenIndex=2234> ABS<tokenIndex=2236>  { }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> PUNTO<tokenIndex=2246> SQRT<tokenIndex=2248> { }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> PUNTO<tokenIndex=2306> CONTAINS<tokenIndex=2308> PARIZQ<tokenIndex=2310> AMP<tokenIndex=2312> ex2=expression<tokenIndex=2316> PARDER<tokenIndex=2318> { }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> PUNTO<tokenIndex=2328> LEN<tokenIndex=2330> PARIZQ<tokenIndex=2332> PARDER<tokenIndex=2334> { }
        )*
    ;
2022-04-10 17:59:40:544 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 2102))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2106) (= p 33)))) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 2112))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2114))) (POW (ELEMENT_OPTIONS (= tokenIndex 2116))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2118))) (= exp1 (expression (ELEMENT_OPTIONS (= tokenIndex 2122)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2124))) (= exp2 (expression (ELEMENT_OPTIONS (= tokenIndex 2128)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2130))) { }) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 2136))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2138))) (POWF (ELEMENT_OPTIONS (= tokenIndex 2140))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2142))) (= exp1 (expression (ELEMENT_OPTIONS (= tokenIndex 2146)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2148))) (= exp2 (expression (ELEMENT_OPTIONS (= tokenIndex 2152)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2154))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2254))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2256))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2258))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2260))) (expression (ELEMENT_OPTIONS (= tokenIndex 2262))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2264))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2270))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2272))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2274))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2276))) (expression (ELEMENT_OPTIONS (= tokenIndex 2278))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2280))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2282))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2288))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2290))) (CAPACITY (ELEMENT_OPTIONS (= tokenIndex 2292))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2294))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2296))) { }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 2388))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2392) (= p 16)))) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (expVectors (ELEMENT_OPTIONS (= tokenIndex 2430))) { $p = $expVectors.ev }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2436))) (listParams (ELEMENT_OPTIONS (= tokenIndex 2438))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2440))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2446))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 2448))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 2450))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 2452))) { }) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 2458))) { $p = $primitive.p }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2464))) (expression (ELEMENT_OPTIONS (= tokenIndex 2466))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2468))) { $p = $expression.p }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2474))) { $p = $callFunction.cf }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2480))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2482))) { $p = $callFunction.cf }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2488))) { $p = $callModule.cm }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2494))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2496))) { $p = $callModule.cm }) (ALT (condIf (ELEMENT_OPTIONS (= tokenIndex 2502))) { $p = $condIf.ifCond }) (ALT (condMatch (ELEMENT_OPTIONS (= tokenIndex 2508))) { $p = $condMatch.mtch }) (ALT (loopBucle (ELEMENT_OPTIONS (= tokenIndex 2514))) { $p = $loopBucle.lb }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 2520))) (= exp (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2524) (= p 1)))) { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 30)}? (ELEMENT_OPTIONS (= p 30))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2167))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2169))) (MOD (ELEMENT_OPTIONS (= tokenIndex 2171))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2176) (= p 31)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 2347))) (SUB (ELEMENT_OPTIONS (= tokenIndex 2349))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2354) (= p 19)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2367))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2369))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2371))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2373))) (IG_IG (ELEMENT_OPTIONS (= tokenIndex 2375))) (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 2377))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2382) (= p 18)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 2404)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2408) (= p 16)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 2420)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2424) (= p 15)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 29)}? (ELEMENT_OPTIONS (= p 29))) (AS (ELEMENT_OPTIONS (= tokenIndex 2186))) (types (ELEMENT_OPTIONS (= tokenIndex 2188))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 28)}? (ELEMENT_OPTIONS (= p 28))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2198))) (TOSTR (ELEMENT_OPTIONS (= tokenIndex 2200))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 27)}? (ELEMENT_OPTIONS (= p 27))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2210))) (TOOWN (ELEMENT_OPTIONS (= tokenIndex 2212))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 26)}? (ELEMENT_OPTIONS (= p 26))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2222))) (CLONE (ELEMENT_OPTIONS (= tokenIndex 2224))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2234))) (ABS (ELEMENT_OPTIONS (= tokenIndex 2236))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2246))) (SQRT (ELEMENT_OPTIONS (= tokenIndex 2248))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2306))) (CONTAINS (ELEMENT_OPTIONS (= tokenIndex 2308))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2310))) (AMP (ELEMENT_OPTIONS (= tokenIndex 2312))) (= ex2 (expression (ELEMENT_OPTIONS (= tokenIndex 2316)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2318))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2328))) (LEN (ELEMENT_OPTIONS (= tokenIndex 2330))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2332))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2334))) { }))))))
2022-04-10 17:59:40:562 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=2611> { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=2587> expression<tokenIndex=2589> CORDER<tokenIndex=2591> { }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=2603> ID<tokenIndex=2605> { }
        )*
    ;
2022-04-10 17:59:40:564 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2611))) { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2587))) (expression (ELEMENT_OPTIONS (= tokenIndex 2589))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2591))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2603))) (ID (ELEMENT_OPTIONS (= tokenIndex 2605))) { }))))))
2022-04-10 17:59:40:581 left-recursion LogManager.java:25 listStructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2640> D_PTS<tokenIndex=2642> expression<tokenIndex=2644>{} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2628> ID<tokenIndex=2630> D_PTS<tokenIndex=2632> expression<tokenIndex=2634> {}
        )*
    ;
2022-04-10 17:59:40:582 grammar LogManager.java:25 added: (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2640))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2642))) (expression (ELEMENT_OPTIONS (= tokenIndex 2644))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2628))) (ID (ELEMENT_OPTIONS (= tokenIndex 2630))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2632))) (expression (ELEMENT_OPTIONS (= tokenIndex 2634))) {}))))))
2022-04-10 17:59:40:595 left-recursion LogManager.java:25 listIdMod returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2766> C_PTS<tokenIndex=2768> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ID<tokenIndex=2758> C_PTS<tokenIndex=2760> {}
        )*
    ;
2022-04-10 17:59:40:596 grammar LogManager.java:25 added: (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2766))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2768))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (ID (ELEMENT_OPTIONS (= tokenIndex 2758))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2760))) {}))))))
2022-04-10 17:59:40:610 grammar LogManager.java:25 import INT=1
2022-04-10 17:59:40:610 grammar LogManager.java:25 import FLOAT=2
2022-04-10 17:59:40:610 grammar LogManager.java:25 import BOOL=3
2022-04-10 17:59:40:610 grammar LogManager.java:25 import CHAR=4
2022-04-10 17:59:40:610 grammar LogManager.java:25 import STR1=5
2022-04-10 17:59:40:610 grammar LogManager.java:25 import STR2=6
2022-04-10 17:59:40:610 grammar LogManager.java:25 import USIZE=7
2022-04-10 17:59:40:610 grammar LogManager.java:25 import VECTOR1=8
2022-04-10 17:59:40:610 grammar LogManager.java:25 import VECTOR2=9
2022-04-10 17:59:40:610 grammar LogManager.java:25 import STRUCT=10
2022-04-10 17:59:40:610 grammar LogManager.java:25 import ARRAY=11
2022-04-10 17:59:40:611 grammar LogManager.java:25 import AS=12
2022-04-10 17:59:40:611 grammar LogManager.java:25 import TRU=13
2022-04-10 17:59:40:611 grammar LogManager.java:25 import FAL=14
2022-04-10 17:59:40:611 grammar LogManager.java:25 import POWF=15
2022-04-10 17:59:40:611 grammar LogManager.java:25 import POW=16
2022-04-10 17:59:40:611 grammar LogManager.java:25 import PRINT=17
2022-04-10 17:59:40:611 grammar LogManager.java:25 import LET=18
2022-04-10 17:59:40:611 grammar LogManager.java:25 import MUT=19
2022-04-10 17:59:40:611 grammar LogManager.java:25 import FUNC=20
2022-04-10 17:59:40:611 grammar LogManager.java:25 import ARROW1=21
2022-04-10 17:59:40:611 grammar LogManager.java:25 import ARROW2=22
2022-04-10 17:59:40:611 grammar LogManager.java:25 import ABS=23
2022-04-10 17:59:40:611 grammar LogManager.java:25 import SQRT=24
2022-04-10 17:59:40:611 grammar LogManager.java:25 import TOSTR=25
2022-04-10 17:59:40:611 grammar LogManager.java:25 import TOOWN=26
2022-04-10 17:59:40:611 grammar LogManager.java:25 import CLONE=27
2022-04-10 17:59:40:611 grammar LogManager.java:25 import NEW=28
2022-04-10 17:59:40:611 grammar LogManager.java:25 import LEN=29
2022-04-10 17:59:40:611 grammar LogManager.java:25 import PUSH=30
2022-04-10 17:59:40:611 grammar LogManager.java:25 import REMOVE=31
2022-04-10 17:59:40:611 grammar LogManager.java:25 import CONTAINS=32
2022-04-10 17:59:40:611 grammar LogManager.java:25 import INSERT=33
2022-04-10 17:59:40:611 grammar LogManager.java:25 import CAPACITY=34
2022-04-10 17:59:40:611 grammar LogManager.java:25 import WCAPACITY=35
2022-04-10 17:59:40:611 grammar LogManager.java:25 import MAIN=36
2022-04-10 17:59:40:611 grammar LogManager.java:25 import IF=37
2022-04-10 17:59:40:611 grammar LogManager.java:25 import ELSE=38
2022-04-10 17:59:40:611 grammar LogManager.java:25 import MATCH=39
2022-04-10 17:59:40:611 grammar LogManager.java:25 import LOOP=40
2022-04-10 17:59:40:611 grammar LogManager.java:25 import WHILE=41
2022-04-10 17:59:40:611 grammar LogManager.java:25 import FOR=42
2022-04-10 17:59:40:611 grammar LogManager.java:25 import IN=43
2022-04-10 17:59:40:611 grammar LogManager.java:25 import BREAK=44
2022-04-10 17:59:40:611 grammar LogManager.java:25 import CONTINUE=45
2022-04-10 17:59:40:611 grammar LogManager.java:25 import RETURN=46
2022-04-10 17:59:40:611 grammar LogManager.java:25 import MODULE=47
2022-04-10 17:59:40:611 grammar LogManager.java:25 import PUB=48
2022-04-10 17:59:40:612 grammar LogManager.java:25 import NUMBER=49
2022-04-10 17:59:40:612 grammar LogManager.java:25 import STRING=50
2022-04-10 17:59:40:612 grammar LogManager.java:25 import ID=51
2022-04-10 17:59:40:612 grammar LogManager.java:25 import CHARACTER=52
2022-04-10 17:59:40:612 grammar LogManager.java:25 import PUNTO=53
2022-04-10 17:59:40:612 grammar LogManager.java:25 import C_PTS=54
2022-04-10 17:59:40:612 grammar LogManager.java:25 import D_PTS=55
2022-04-10 17:59:40:612 grammar LogManager.java:25 import PYC=56
2022-04-10 17:59:40:612 grammar LogManager.java:25 import COMA=57
2022-04-10 17:59:40:612 grammar LogManager.java:25 import DIFERENTE=58
2022-04-10 17:59:40:612 grammar LogManager.java:25 import IG_IG=59
2022-04-10 17:59:40:612 grammar LogManager.java:25 import NOT=60
2022-04-10 17:59:40:612 grammar LogManager.java:25 import OR=61
2022-04-10 17:59:40:612 grammar LogManager.java:25 import PLEC=62
2022-04-10 17:59:40:612 grammar LogManager.java:25 import UNDERSCORE=63
2022-04-10 17:59:40:612 grammar LogManager.java:25 import AND=64
2022-04-10 17:59:40:612 grammar LogManager.java:25 import IGUAL=65
2022-04-10 17:59:40:612 grammar LogManager.java:25 import MAYORIGUAL=66
2022-04-10 17:59:40:612 grammar LogManager.java:25 import MENORIGUAL=67
2022-04-10 17:59:40:612 grammar LogManager.java:25 import MAYOR=68
2022-04-10 17:59:40:612 grammar LogManager.java:25 import MENOR=69
2022-04-10 17:59:40:612 grammar LogManager.java:25 import MUL=70
2022-04-10 17:59:40:612 grammar LogManager.java:25 import DIV=71
2022-04-10 17:59:40:612 grammar LogManager.java:25 import ADD=72
2022-04-10 17:59:40:612 grammar LogManager.java:25 import SUB=73
2022-04-10 17:59:40:612 grammar LogManager.java:25 import MOD=74
2022-04-10 17:59:40:612 grammar LogManager.java:25 import PARIZQ=75
2022-04-10 17:59:40:612 grammar LogManager.java:25 import PARDER=76
2022-04-10 17:59:40:612 grammar LogManager.java:25 import LLAVEIZQ=77
2022-04-10 17:59:40:612 grammar LogManager.java:25 import LLAVEDER=78
2022-04-10 17:59:40:612 grammar LogManager.java:25 import CORIZQ=79
2022-04-10 17:59:40:612 grammar LogManager.java:25 import CORDER=80
2022-04-10 17:59:40:612 grammar LogManager.java:25 import AMP=81
2022-04-10 17:59:40:612 grammar LogManager.java:25 import WHITESPACE=82
2022-04-10 17:59:40:612 grammar LogManager.java:25 import COMMENT=83
2022-04-10 17:59:40:612 grammar LogManager.java:25 import LINE_COMMENT=84
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'i64'=1
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'f64'=2
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'bool'=3
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'char'=4
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'String'=5
2022-04-10 17:59:40:612 grammar LogManager.java:25 import '&str'=6
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'usize'=7
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'vec!'=8
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'Vec'=9
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'struct'=10
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'array'=11
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'as'=12
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'true'=13
2022-04-10 17:59:40:612 grammar LogManager.java:25 import 'false'=14
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'powf'=15
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'pow'=16
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'println!'=17
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'let'=18
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'mut'=19
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'fn'=20
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '->'=21
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '=>'=22
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'abs()'=23
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'sqrt()'=24
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'to_string()'=25
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'to_owned()'=26
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'clone()'=27
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'new'=28
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'len'=29
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'push'=30
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'remove'=31
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'contains'=32
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'insert'=33
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'capacity'=34
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'with_capacity'=35
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'main'=36
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'if'=37
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'else'=38
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'match'=39
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'loop'=40
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'while'=41
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'for'=42
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'in'=43
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'break'=44
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'continue'=45
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'return'=46
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'mod'=47
2022-04-10 17:59:40:613 grammar LogManager.java:25 import 'pub'=48
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '.'=53
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '::'=54
2022-04-10 17:59:40:613 grammar LogManager.java:25 import ':'=55
2022-04-10 17:59:40:613 grammar LogManager.java:25 import ';'=56
2022-04-10 17:59:40:613 grammar LogManager.java:25 import ','=57
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '!='=58
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '=='=59
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '!'=60
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '||'=61
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '|'=62
2022-04-10 17:59:40:613 grammar LogManager.java:25 import '_'=63
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '&&'=64
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '='=65
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '>='=66
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '<='=67
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '>'=68
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '<'=69
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '*'=70
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '/'=71
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '+'=72
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '-'=73
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '%'=74
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '('=75
2022-04-10 17:59:40:614 grammar LogManager.java:25 import ')'=76
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '{'=77
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '}'=78
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '['=79
2022-04-10 17:59:40:614 grammar LogManager.java:25 import ']'=80
2022-04-10 17:59:40:614 grammar LogManager.java:25 import '&'=81
2022-04-10 17:59:40:614 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, ARRAY=11, AS=12, TRU=13, FAL=14, POWF=15, POW=16, PRINT=17, LET=18, MUT=19, FUNC=20, ARROW1=21, ARROW2=22, ABS=23, SQRT=24, TOSTR=25, TOOWN=26, CLONE=27, NEW=28, LEN=29, PUSH=30, REMOVE=31, CONTAINS=32, INSERT=33, CAPACITY=34, WCAPACITY=35, MAIN=36, IF=37, ELSE=38, MATCH=39, LOOP=40, WHILE=41, FOR=42, IN=43, BREAK=44, CONTINUE=45, RETURN=46, MODULE=47, PUB=48, NUMBER=49, STRING=50, ID=51, CHARACTER=52, PUNTO=53, C_PTS=54, D_PTS=55, PYC=56, COMA=57, DIFERENTE=58, IG_IG=59, NOT=60, OR=61, PLEC=62, UNDERSCORE=63, AND=64, IGUAL=65, MAYORIGUAL=66, MENORIGUAL=67, MAYOR=68, MENOR=69, MUL=70, DIV=71, ADD=72, SUB=73, MOD=74, PARIZQ=75, PARDER=76, LLAVEIZQ=77, LLAVEDER=78, CORIZQ=79, CORDER=80, AMP=81, WHITESPACE=82, COMMENT=83, LINE_COMMENT=84, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec!'=8, 'Vec'=9, 'struct'=10, 'array'=11, 'as'=12, 'true'=13, 'false'=14, 'powf'=15, 'pow'=16, 'println!'=17, 'let'=18, 'mut'=19, 'fn'=20, '->'=21, '=>'=22, 'abs()'=23, 'sqrt()'=24, 'to_string()'=25, 'to_owned()'=26, 'clone()'=27, 'new'=28, 'len'=29, 'push'=30, 'remove'=31, 'contains'=32, 'insert'=33, 'capacity'=34, 'with_capacity'=35, 'main'=36, 'if'=37, 'else'=38, 'match'=39, 'loop'=40, 'while'=41, 'for'=42, 'in'=43, 'break'=44, 'continue'=45, 'return'=46, 'mod'=47, 'pub'=48, '.'=53, '::'=54, ':'=55, ';'=56, ','=57, '!='=58, '=='=59, '!'=60, '||'=61, '|'=62, '_'=63, '&&'=64, '='=65, '>='=66, '<='=67, '>'=68, '<'=69, '*'=70, '/'=71, '+'=72, '-'=73, '%'=74, '('=75, ')'=76, '{'=77, '}'=78, '['=79, ']'=80, '&'=81}
2022-04-10 17:59:40:615 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, ARRAY=11, AS=12, TRU=13, FAL=14, POWF=15, POW=16, PRINT=17, LET=18, MUT=19, FUNC=20, ARROW1=21, ARROW2=22, ABS=23, SQRT=24, TOSTR=25, TOOWN=26, CLONE=27, NEW=28, LEN=29, PUSH=30, REMOVE=31, CONTAINS=32, INSERT=33, CAPACITY=34, WCAPACITY=35, MAIN=36, IF=37, ELSE=38, MATCH=39, LOOP=40, WHILE=41, FOR=42, IN=43, BREAK=44, CONTINUE=45, RETURN=46, MODULE=47, PUB=48, NUMBER=49, STRING=50, ID=51, CHARACTER=52, PUNTO=53, C_PTS=54, D_PTS=55, PYC=56, COMA=57, DIFERENTE=58, IG_IG=59, NOT=60, OR=61, PLEC=62, UNDERSCORE=63, AND=64, IGUAL=65, MAYORIGUAL=66, MENORIGUAL=67, MAYOR=68, MENOR=69, MUL=70, DIV=71, ADD=72, SUB=73, MOD=74, PARIZQ=75, PARDER=76, LLAVEIZQ=77, LLAVEDER=78, CORIZQ=79, CORDER=80, AMP=81, WHITESPACE=82, COMMENT=83, LINE_COMMENT=84}
2022-04-10 17:59:40:615 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec!'=8, 'Vec'=9, 'struct'=10, 'array'=11, 'as'=12, 'true'=13, 'false'=14, 'powf'=15, 'pow'=16, 'println!'=17, 'let'=18, 'mut'=19, 'fn'=20, '->'=21, '=>'=22, 'abs()'=23, 'sqrt()'=24, 'to_string()'=25, 'to_owned()'=26, 'clone()'=27, 'new'=28, 'len'=29, 'push'=30, 'remove'=31, 'contains'=32, 'insert'=33, 'capacity'=34, 'with_capacity'=35, 'main'=36, 'if'=37, 'else'=38, 'match'=39, 'loop'=40, 'while'=41, 'for'=42, 'in'=43, 'break'=44, 'continue'=45, 'return'=46, 'mod'=47, 'pub'=48, '.'=53, '::'=54, ':'=55, ';'=56, ','=57, '!='=58, '=='=59, '!'=60, '||'=61, '|'=62, '_'=63, '&&'=64, '='=65, '>='=66, '<='=67, '>'=68, '<'=69, '*'=70, '/'=71, '+'=72, '-'=73, '%'=74, '('=75, ')'=76, '{'=77, '}'=78, '['=79, ']'=80, '&'=81}
2022-04-10 17:59:40:685 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-04-10 17:59:40:685 LL1 LogManager.java:25 look=[{10, 18, 20, 47}, 20]
2022-04-10 17:59:40:685 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:685 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-04-10 17:59:40:685 LL1 LogManager.java:25 look=[{10, 18, 20, 47}, <EOF>]
2022-04-10 17:59:40:685 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:685 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-04-10 17:59:40:685 LL1 LogManager.java:25 look=[18, 20, 47, 10]
2022-04-10 17:59:40:685 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:685 LL1 LogManager.java:25 
DECISION 3 in rule moduleContent
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[48, 48, 47, {10, 20}]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 4 in rule moduleContent
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[null, null, null, null]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 5 in rule moduleContent
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[null, 78]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 6 in rule moduleAction
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[20, 10]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 7 in rule instructions
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[{10, 17..18, 37, 39..42, 44..46, 51}, <EOF>]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[17, 18, 51, 37, 39, 41, 40, 42, 44, 45, 46, 10, 51]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 9 in rule insVectors
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[51, 51]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 10 in rule listParamsCall
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, 81, null]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:686 LL1 LogManager.java:25 
DECISION 11 in rule listParamsCall
2022-04-10 17:59:40:686 LL1 LogManager.java:25 look=[null, null]
2022-04-10 17:59:40:686 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:687 LL1 LogManager.java:25 
DECISION 12 in rule listParamsCall
2022-04-10 17:59:40:687 LL1 LogManager.java:25 look=[null, 76]
2022-04-10 17:59:40:687 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:687 LL1 LogManager.java:25 
DECISION 13 in rule transBreak
2022-04-10 17:59:40:687 LL1 LogManager.java:25 look=[44, 44]
2022-04-10 17:59:40:687 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:687 LL1 LogManager.java:25 
DECISION 14 in rule transReturn
2022-04-10 17:59:40:687 LL1 LogManager.java:25 look=[46, 46, 46, 46]
2022-04-10 17:59:40:687 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:687 LL1 LogManager.java:25 
DECISION 15 in rule condIf
2022-04-10 17:59:40:687 LL1 LogManager.java:25 look=[38, null]
2022-04-10 17:59:40:687 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:687 LL1 LogManager.java:25 
DECISION 16 in rule condElse
2022-04-10 17:59:40:688 LL1 LogManager.java:25 look=[38, null]
2022-04-10 17:59:40:688 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:688 LL1 LogManager.java:25 
DECISION 17 in rule block
2022-04-10 17:59:40:688 LL1 LogManager.java:25 look=[{10, 17..18, 37, 39..42, 44..46, 51}, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-04-10 17:59:40:688 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:688 LL1 LogManager.java:25 
DECISION 18 in rule block
2022-04-10 17:59:40:688 LL1 LogManager.java:25 look=[null, null]
2022-04-10 17:59:40:688 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:688 LL1 LogManager.java:25 
DECISION 19 in rule block
2022-04-10 17:59:40:688 LL1 LogManager.java:25 look=[null, {57, 78}]
2022-04-10 17:59:40:688 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:688 LL1 LogManager.java:25 
DECISION 20 in rule condMatch
2022-04-10 17:59:40:688 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, {63, 78}]
2022-04-10 17:59:40:688 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:688 LL1 LogManager.java:25 
DECISION 21 in rule listArms
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 22 in rule listMatch
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[null, 22]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 23 in rule defaultArm
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[63, 63, 78]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 24 in rule declaration
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[18, 18, 18, 18, 18, 18, 18]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 25 in rule vectDeclaration
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[18, 18, 18, 18, 18, 18]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 26 in rule typeVect
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[9, 9, 9]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 27 in rule listStructDec
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[51, 51, 51]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 28 in rule listStructDec
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[null, null, null]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 29 in rule listStructDec
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[null, 78]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 30 in rule assignment
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[51, 51, 51, 51]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 31 in rule listArrStr
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[null, 65]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 32 in rule listAccessStruct
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[null, 65]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 33 in rule listAccessArray
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[null, 65]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 34 in rule arrayType
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[79, 79, 79, 79]
2022-04-10 17:59:40:689 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:689 LL1 LogManager.java:25 
DECISION 35 in rule function
2022-04-10 17:59:40:689 LL1 LogManager.java:25 look=[20, 20, 20, 20]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 36 in rule listParamsFunc
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[55, {51, 81}]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 37 in rule listParamsFunc
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[81, 51]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 38 in rule listParamsFunc
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[51, 51, 51, 51, 51, 51, 51, 51, 51, null]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 39 in rule listParamsFunc
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 40 in rule listParamsFunc
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[null, 76]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 41 in rule types
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 6, 8, 10, 7, 11]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 42 in rule listParams
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[null, {76, 80}]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 43 in rule callFunction
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[51, 51]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 44 in rule expression
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[null, null]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 45 in rule expr_arit
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[73, {1..8, 10..11}, {1..8, 10..11}, 51, 51, 51, 60, {8..9}, 79, 51, {13..14, 49..52}, 75, 51, 51, 51, 51, 37, 39, 40, 81]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 46 in rule expr_arit
2022-04-10 17:59:40:694 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null, null, null, null, null]
2022-04-10 17:59:40:694 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:694 LL1 LogManager.java:25 
DECISION 47 in rule expr_arit
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[null, null]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:695 LL1 LogManager.java:25 
DECISION 48 in rule primitive
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[49, 50, 52, 13, 14, 51]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? true
2022-04-10 17:59:40:695 LL1 LogManager.java:25 
DECISION 49 in rule listArray
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[null, null]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:695 LL1 LogManager.java:25 
DECISION 50 in rule listArray
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[null, null]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:695 LL1 LogManager.java:25 
DECISION 51 in rule listStructExp
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[null, 78]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:695 LL1 LogManager.java:25 
DECISION 52 in rule expVectors
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[8, 8, 9, 9]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:695 LL1 LogManager.java:25 
DECISION 53 in rule listIdMod
2022-04-10 17:59:40:695 LL1 LogManager.java:25 look=[null, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-04-10 17:59:40:695 LL1 LogManager.java:25 LL(1)? false
2022-04-10 17:59:40:710 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-04-10 17:59:40:757 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-04-10 17:59:40:757 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-04-10 17:59:40:758 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-04-10 17:59:40:759 action-translator LogManager.java:25 translate  $hi = $declaration.dec 
2022-04-10 17:59:40:759 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,29:20]
2022-04-10 17:59:40:760 action-translator LogManager.java:25 qattr [@-1,8:18='declaration',<0>,29:26].[@-1,20:22='dec',<0>,29:38]
2022-04-10 17:59:40:760 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:760 action-translator LogManager.java:25 translate   
2022-04-10 17:59:40:760 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:761 action-translator LogManager.java:25 translate   
2022-04-10 17:59:40:762 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:763 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:763 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:763 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:763 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:764 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-04-10 17:59:40:764 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:764 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-04-10 17:59:40:764 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:764 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-04-10 17:59:40:765 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:765 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-10 17:59:40:765 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:766 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-04-10 17:59:40:766 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-04-10 17:59:40:766 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-04-10 17:59:40:766 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-10 17:59:40:766 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:766 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:767 action-translator LogManager.java:25 translate  $mainInst = $block.blk 
2022-04-10 17:59:40:767 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,57:52]
2022-04-10 17:59:40:767 action-translator LogManager.java:25 qattr [@-1,14:18='block',<0>,57:64].[@-1,20:22='blk',<0>,57:70]
2022-04-10 17:59:40:767 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-04-10 17:59:40:767 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,62:5]
2022-04-10 17:59:40:768 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-04-10 17:59:40:768 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,68:13]
2022-04-10 17:59:40:768 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-04-10 17:59:40:768 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,74:19]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,74:27].[@-1,21:22='pr',<0>,74:38]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-04-10 17:59:40:769 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,75:20]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,75:28].[@-1,22:24='dec',<0>,75:40]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2022-04-10 17:59:40:769 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,76:19]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,76:27].[@-1,21:23='ass',<0>,76:38]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 translate  $inst = $condIf.ifCond 
2022-04-10 17:59:40:769 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,77:11]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 qattr [@-1,10:15='condIf',<0>,77:19].[@-1,17:22='ifCond',<0>,77:26]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 translate  $inst = $condMatch.mtch 
2022-04-10 17:59:40:769 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,78:14]
2022-04-10 17:59:40:769 action-translator LogManager.java:25 qattr [@-1,10:18='condMatch',<0>,78:22].[@-1,20:23='mtch',<0>,78:32]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 translate  $inst = $loopWhile.lw 
2022-04-10 17:59:40:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,79:14]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 qattr [@-1,10:18='loopWhile',<0>,79:22].[@-1,20:21='lw',<0>,79:32]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 translate  $inst = $loopBucle.lb 
2022-04-10 17:59:40:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,80:14]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 qattr [@-1,10:18='loopBucle',<0>,80:22].[@-1,20:21='lb',<0>,80:32]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 translate  $inst = $loopForin.lfi 
2022-04-10 17:59:40:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,81:14]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 qattr [@-1,10:18='loopForin',<0>,81:22].[@-1,20:22='lfi',<0>,81:32]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 translate  $inst = $transBreak.brk 
2022-04-10 17:59:40:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,82:19]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 qattr [@-1,10:19='transBreak',<0>,82:27].[@-1,21:23='brk',<0>,82:38]
2022-04-10 17:59:40:770 action-translator LogManager.java:25 translate  $inst = $transContinue.cnt 
2022-04-10 17:59:40:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,83:22]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 qattr [@-1,10:22='transContinue',<0>,83:30].[@-1,24:26='cnt',<0>,83:44]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 translate  $inst = $transReturn.rt 
2022-04-10 17:59:40:771 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,84:16]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 qattr [@-1,10:20='transReturn',<0>,84:24].[@-1,22:23='rt',<0>,84:36]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2022-04-10 17:59:40:771 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,85:19]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,85:27].[@-1,25:27='dec',<0>,85:42]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 translate  $inst = $insVectors.iv 
2022-04-10 17:59:40:771 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,86:19]
2022-04-10 17:59:40:771 action-translator LogManager.java:25 qattr [@-1,10:19='insVectors',<0>,86:27].[@-1,21:22='iv',<0>,86:38]
2022-04-10 17:59:40:772 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:772 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:773 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:773 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:773 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:773 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:773 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-10 17:59:40:773 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:774 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-10 17:59:40:774 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:774 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-10 17:59:40:774 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-10 17:59:40:774 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:775 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:775 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:775 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:775 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:776 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:776 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:776 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:776 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:776 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:777 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:777 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:778 action-translator LogManager.java:25 translate  $blkelse = $block.blk 
2022-04-10 17:59:40:778 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,139:33]
2022-04-10 17:59:40:778 action-translator LogManager.java:25 qattr [@-1,13:17='block',<0>,139:44].[@-1,19:21='blk',<0>,139:50]
2022-04-10 17:59:40:778 action-translator LogManager.java:25 translate  $blkelse = arrayList.New() 
2022-04-10 17:59:40:778 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,140:4]
2022-04-10 17:59:40:778 action-translator LogManager.java:25 translate 
    $blk = arrayList.New()
  
2022-04-10 17:59:40:778 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,145:5]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:779 action-translator LogManager.java:25 translate  $blk.Add($instruction.inst) 
2022-04-10 17:59:40:779 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,2:43]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 qattr [@-1,11:21='instruction',<0>,2:52].[@-1,23:26='inst',<0>,2:64]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 translate  $blk.Add($expression.p) 
2022-04-10 17:59:40:779 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,3:39]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 qattr [@-1,11:20='expression',<0>,3:48].[@-1,22:22='p',<0>,3:59]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-10 17:59:40:779 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      
2022-04-10 17:59:40:779 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,7:39].[@-1,48:50='blk',<0>,7:46]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 qattr [@-1,57:67='instruction',<0>,7:55].[@-1,69:72='inst',<0>,7:67]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 attr [@-1,115:117='blk',<0>,8:39]
2022-04-10 17:59:40:779 action-translator LogManager.java:25 qattr [@-1,122:127='bloque',<0>,8:46].[@-1,129:131='blk',<0>,8:53]
2022-04-10 17:59:40:780 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-04-10 17:59:40:780 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     
2022-04-10 17:59:40:780 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,11:39].[@-1,48:50='blk',<0>,11:46]
2022-04-10 17:59:40:780 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,11:55].[@-1,68:68='p',<0>,11:66]
2022-04-10 17:59:40:780 action-translator LogManager.java:25 attr [@-1,111:113='blk',<0>,12:39]
2022-04-10 17:59:40:780 action-translator LogManager.java:25 qattr [@-1,118:123='bloque',<0>,12:46].[@-1,125:127='blk',<0>,12:53]
2022-04-10 17:59:40:780 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-10 17:59:40:780 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-04-10 17:59:40:781 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:781 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:782 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:782 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:782 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:782 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:782 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:782 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:783 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-04-10 17:59:40:783 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,174:33]
2022-04-10 17:59:40:783 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,174:41].[@-1,16:18='blk',<0>,174:47]
2022-04-10 17:59:40:783 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-04-10 17:59:40:783 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,175:51]
2022-04-10 17:59:40:784 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,175:59].[@-1,16:18='blk',<0>,175:65]
2022-04-10 17:59:40:784 action-translator LogManager.java:25 translate  $defa = arrayList.New() 
2022-04-10 17:59:40:784 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,176:4]
2022-04-10 17:59:40:784 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-04-10 17:59:40:784 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,180:35]
2022-04-10 17:59:40:784 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,180:63].[@-1,36:39='line',<0>,180:69]
2022-04-10 17:59:40:785 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,180:75].[@-1,48:50='pos',<0>,180:81]
2022-04-10 17:59:40:785 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,180:86].[@-1,64:64='l',<0>,180:97]
2022-04-10 17:59:40:786 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:786 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:786 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:786 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:787 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:787 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:787 action-translator LogManager.java:25 translate  $dec = $vectDeclaration.vec 
2022-04-10 17:59:40:787 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,190:20]
2022-04-10 17:59:40:787 action-translator LogManager.java:25 qattr [@-1,9:23='vectDeclaration',<0>,190:27].[@-1,25:27='vec',<0>,190:43]
2022-04-10 17:59:40:789 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:789 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:790 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:790 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:790 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:790 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:791 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:792 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:792 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:793 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-10 17:59:40:794 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-04-10 17:59:40:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-04-10 17:59:40:794 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-04-10 17:59:40:795 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:795 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:795 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:795 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:796 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:797 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:797 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:797 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:797 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:797 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:798 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:798 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:798 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:798 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:799 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:799 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:800 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:800 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:800 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:801 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:803 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:803 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:803 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:804 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:804 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:804 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:804 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:804 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:804 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:805 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:805 action-translator LogManager.java:25 translate  $lpf = arrayList.New() 
2022-04-10 17:59:40:805 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,11:12]
2022-04-10 17:59:40:805 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-04-10 17:59:40:805 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:806 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-04-10 17:59:40:807 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-04-10 17:59:40:808 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-04-10 17:59:40:809 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,283:8]
2022-04-10 17:59:40:809 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-04-10 17:59:40:809 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,284:10]
2022-04-10 17:59:40:809 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-04-10 17:59:40:809 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,285:9]
2022-04-10 17:59:40:809 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-04-10 17:59:40:809 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,286:9]
2022-04-10 17:59:40:809 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-04-10 17:59:40:809 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,287:9]
2022-04-10 17:59:40:809 action-translator LogManager.java:25 translate  $ty = environment.STR 
2022-04-10 17:59:40:809 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,288:9]
2022-04-10 17:59:40:810 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-04-10 17:59:40:810 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,289:12]
2022-04-10 17:59:40:810 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-04-10 17:59:40:810 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,290:11]
2022-04-10 17:59:40:810 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-04-10 17:59:40:810 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,291:10]
2022-04-10 17:59:40:810 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2022-04-10 17:59:40:810 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,292:10]
2022-04-10 17:59:40:811 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:811 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-04-10 17:59:40:811 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-04-10 17:59:40:811 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-04-10 17:59:40:811 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-04-10 17:59:40:811 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:811 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-04-10 17:59:40:811 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-04-10 17:59:40:812 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-04-10 17:59:40:812 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-04-10 17:59:40:812 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-04-10 17:59:40:812 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:812 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:812 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:813 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:813 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-04-10 17:59:40:813 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:42]
2022-04-10 17:59:40:813 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,2:47].[@-1,17:17='p',<0>,2:57]
2022-04-10 17:59:40:813 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-04-10 17:59:40:813 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:814 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-04-10 17:59:40:816 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:816 action-translator LogManager.java:25 translate $p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)
2022-04-10 17:59:40:816 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:72]
2022-04-10 17:59:40:817 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:102].[@-1,35:38='line',<0>,2:106]
2022-04-10 17:59:40:817 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:112].[@-1,45:47='pos',<0>,2:116]
2022-04-10 17:59:40:817 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:121].[@-1,55:55='p',<0>,2:126]
2022-04-10 17:59:40:817 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:817 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:817 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:818 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:818 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:818 action-translator LogManager.java:25 translate $p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)
2022-04-10 17:59:40:818 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:69]
2022-04-10 17:59:40:818 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,8:99].[@-1,35:38='line',<0>,8:103]
2022-04-10 17:59:40:818 action-translator LogManager.java:25 qattr [@-1,41:43='NOT',<0>,8:109].[@-1,45:47='pos',<0>,8:113]
2022-04-10 17:59:40:818 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,8:118].[@-1,55:55='p',<0>,8:123]
2022-04-10 17:59:40:818 action-translator LogManager.java:25 qattr [@-1,58:60='NOT',<0>,8:126].[@-1,62:65='text',<0>,8:130]
2022-04-10 17:59:40:819 action-translator LogManager.java:25 translate  $p = $expVectors.ev 
2022-04-10 17:59:40:819 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:40]
2022-04-10 17:59:40:819 action-translator LogManager.java:25 qattr [@-1,7:16='expVectors',<0>,9:45].[@-1,18:19='ev',<0>,9:56]
2022-04-10 17:59:40:819 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:819 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:819 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-04-10 17:59:40:819 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:39]
2022-04-10 17:59:40:819 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,12:44].[@-1,17:17='p',<0>,12:54]
2022-04-10 17:59:40:820 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-04-10 17:59:40:820 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:88]
2022-04-10 17:59:40:820 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,13:93].[@-1,18:18='p',<0>,13:104]
2022-04-10 17:59:40:820 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-04-10 17:59:40:820 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:42]
2022-04-10 17:59:40:820 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,14:47].[@-1,20:21='cf',<0>,14:60]
2022-04-10 17:59:40:820 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-04-10 17:59:40:820 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,15:63]
2022-04-10 17:59:40:820 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,15:68].[@-1,20:21='cf',<0>,15:81]
2022-04-10 17:59:40:821 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-04-10 17:59:40:821 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,16:40]
2022-04-10 17:59:40:821 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,16:45].[@-1,18:19='cm',<0>,16:56]
2022-04-10 17:59:40:821 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-04-10 17:59:40:821 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,17:61]
2022-04-10 17:59:40:821 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,17:66].[@-1,18:19='cm',<0>,17:77]
2022-04-10 17:59:40:821 action-translator LogManager.java:25 translate  $p = $condIf.ifCond 
2022-04-10 17:59:40:821 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,18:36]
2022-04-10 17:59:40:821 action-translator LogManager.java:25 qattr [@-1,7:12='condIf',<0>,18:41].[@-1,14:19='ifCond',<0>,18:48]
2022-04-10 17:59:40:822 action-translator LogManager.java:25 translate  $p = $condMatch.mtch 
2022-04-10 17:59:40:822 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,19:39]
2022-04-10 17:59:40:822 action-translator LogManager.java:25 qattr [@-1,7:15='condMatch',<0>,19:44].[@-1,17:20='mtch',<0>,19:54]
2022-04-10 17:59:40:822 action-translator LogManager.java:25 translate  $p = $loopBucle.lb 
2022-04-10 17:59:40:822 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,20:39]
2022-04-10 17:59:40:822 action-translator LogManager.java:25 qattr [@-1,7:15='loopBucle',<0>,20:44].[@-1,17:18='lb',<0>,20:54]
2022-04-10 17:59:40:822 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:822 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 30)
2022-04-10 17:59:40:823 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-04-10 17:59:40:823 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,24:166]
2022-04-10 17:59:40:823 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,24:196].[@-1,36:40='start',<0>,24:201]
2022-04-10 17:59:40:823 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,24:218].[@-1,58:62='start',<0>,24:223]
2022-04-10 17:59:40:823 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,24:242].[@-1,82:82='p',<0>,24:247]
2022-04-10 17:59:40:823 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,24:250].[@-1,88:91='text',<0>,24:253]
2022-04-10 17:59:40:823 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,24:259].[@-1,99:99='p',<0>,24:264]
2022-04-10 17:59:40:823 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-04-10 17:59:40:824 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-04-10 17:59:40:824 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,25:155]
2022-04-10 17:59:40:824 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,25:185].[@-1,36:40='start',<0>,25:190]
2022-04-10 17:59:40:824 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,25:207].[@-1,58:62='start',<0>,25:212]
2022-04-10 17:59:40:824 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,25:231].[@-1,82:82='p',<0>,25:236]
2022-04-10 17:59:40:824 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,25:239].[@-1,88:91='text',<0>,25:242]
2022-04-10 17:59:40:824 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,25:248].[@-1,99:99='p',<0>,25:253]
2022-04-10 17:59:40:824 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-04-10 17:59:40:824 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-04-10 17:59:40:824 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,26:265]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,26:295].[@-1,36:40='start',<0>,26:300]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,26:317].[@-1,58:62='start',<0>,26:322]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,26:341].[@-1,82:82='p',<0>,26:346]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,26:349].[@-1,88:91='text',<0>,26:352]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,26:358].[@-1,99:99='p',<0>,26:363]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-04-10 17:59:40:825 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-04-10 17:59:40:825 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,27:132]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,27:162].[@-1,36:40='start',<0>,27:167]
2022-04-10 17:59:40:825 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,27:184].[@-1,58:62='start',<0>,27:189]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,27:208].[@-1,82:82='p',<0>,27:213]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,27:216].[@-1,88:91='text',<0>,27:219]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,27:225].[@-1,99:99='p',<0>,27:230]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-04-10 17:59:40:826 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-04-10 17:59:40:826 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,28:131]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,28:161].[@-1,36:40='start',<0>,28:166]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,28:183].[@-1,58:62='start',<0>,28:188]
2022-04-10 17:59:40:826 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,28:207].[@-1,82:82='p',<0>,28:212]
2022-04-10 17:59:40:827 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,28:215].[@-1,88:91='text',<0>,28:218]
2022-04-10 17:59:40:827 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,28:224].[@-1,99:99='p',<0>,28:229]
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 29)
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 28)
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 27)
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:827 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-04-10 17:59:40:828 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 30)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 29)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 28)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 27)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-04-10 17:59:40:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-04-10 17:59:40:830 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos, num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,354:34].[@-1,43:46='text',<0>,354:41]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,355:47].[@-1,110:113='text',<0>,355:54]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,359:17]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,257:262='NUMBER',<0>,359:47].[@-1,264:267='line',<0>,359:54]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,270:275='NUMBER',<0>,359:60].[@-1,277:279='pos',<0>,359:67]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,367:372='NUMBER',<0>,361:41].[@-1,374:377='text',<0>,361:48]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 attr [@-1,486:486='p',<0>,365:17]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,516:521='NUMBER',<0>,365:47].[@-1,523:526='line',<0>,365:54]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,529:534='NUMBER',<0>,365:60].[@-1,536:538='pos',<0>,365:67]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 translate 
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,23:28='STRING',<0>,369:21].[@-1,30:33='text',<0>,369:28]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,370:14]
2022-04-10 17:59:40:830 action-translator LogManager.java:25 qattr [@-1,80:85='STRING',<0>,370:44].[@-1,87:90='line',<0>,370:51]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,94:99='STRING',<0>,370:58].[@-1,101:103='pos',<0>,370:65]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 translate 
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,22:30='CHARACTER',<0>,373:20].[@-1,32:35='text',<0>,373:30]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 attr [@-1,51:51='p',<0>,374:13]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,81:89='CHARACTER',<0>,374:43].[@-1,91:94='line',<0>,374:53]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,98:106='CHARACTER',<0>,374:60].[@-1,108:110='pos',<0>,374:70]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) 
2022-04-10 17:59:40:831 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,376:8]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,376:38].[@-1,36:39='line',<0>,376:42]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,376:49].[@-1,47:49='pos',<0>,376:53]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) 
2022-04-10 17:59:40:831 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,377:8]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,377:38].[@-1,36:39='line',<0>,377:42]
2022-04-10 17:59:40:831 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,377:49].[@-1,47:49='pos',<0>,377:53]
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate  $p = $list.p
2022-04-10 17:59:40:832 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,378:19]
2022-04-10 17:59:40:832 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,378:24].[@-1,12:12='p',<0>,378:29]
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-04-10 17:59:40:832 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:833 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate  
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate 
2022-04-10 17:59:40:834 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-04-10 17:59:41:210 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-04-10 17:59:41:210 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-04-10 17:59:41:360 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-04-10 17:59:41:360 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

