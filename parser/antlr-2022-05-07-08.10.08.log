2022-05-07 08:10:05:675 grammar LogManager.java:25 before: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module {  }) (ALT structCreation { }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER {  }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {}) (ALT (= mc moduleContent) PUB moduleAction { }) (ALT (= mc moduleContent) module { }) (ALT (= mc moduleContent) moduleAction {}) (ALT PUB module {}) (ALT PUB moduleAction {}) (ALT module {}) (ALT moduleAction { }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { $ma = $function.fun }) (ALT structCreation { }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER {}))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ block LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $block.blk) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { }) (ALT RETURN PYC { }) (ALT RETURN expression { }) (ALT RETURN { }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {}))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {}) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {}))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {}) (ALT expression { }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.ARRAY, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.ARRAY, $expression.p, false) }) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET ID D_PTS typeVect IGUAL expression { }) (ALT LET MUT ID D_PTS typeVect IGUAL expression { }))) (RULE typeVect (returns ) (BLOCK (ALT VECTOR2 MENOR (= tv typeVect) MAYOR) (ALT VECTOR2 MENOR types MAYOR) (ALT VECTOR2 MENOR ID MAYOR))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS arrayType {}) (ALT (= id1 ID) D_PTS types {}) (ALT (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= id1 ID) D_PTS arrayType {}))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { }) (ALT ID listAccessArray IGUAL expression { }) (ALT ID CORIZQ (= e1 expression) CORDER listArrStr IGUAL (= e2 expression) { }))) (RULE listArrStr (returns *arrayList.List l) (BLOCK (ALT (= list listArrStr) PUNTO ID {}) (ALT PUNTO ID {}))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {}) (ALT ID {}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {}) (ALT CORIZQ expression CORDER {}))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {}) (ALT CORIZQ types PYC expression CORDER {}) (ALT CORIZQ (= exp1 expression) PYC (= exp2 expression) CORDER {}) (ALT CORIZQ types CORDER {}))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk, $id2.text)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT (= id2 ID) {
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                 $list.lpf.Add(newParam)
                 $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS (= id2 ID) {
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                 $list.lpf.Add(newParam)
                 $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              }) (ALT ID D_PTS arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"", environment.WILDCARD)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT (= id2 ID) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) (+ (BLOCK (ALT D_PTS))) (? (BLOCK (ALT AMP MUT))) (= id2 ID) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT USIZE { $ty = environment.INTEGER }) (ALT ARRAY { $ty = environment.ARRAY }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT types C_PTS POW PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT types C_PTS POWF PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= exp expr_arit) AS types { }) (ALT (= exp expr_arit) PUNTO TOSTR {$p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p)}) (ALT (= exp expr_arit) PUNTO TOOWN { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }) (ALT (= exp expr_arit) PUNTO CLONE { }) (ALT (= exp expr_arit) PUNTO ABS { $p = expressions.NewAbs($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }) (ALT (= exp expr_arit) PUNTO SQRT { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER PYC { }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { }) (ALT (= ex1 expr_arit) PUNTO CONTAINS PARIZQ AMP (= ex2 expression) PARDER { }) (ALT (= exp expr_arit) PUNTO LEN PARIZQ PARDER { }) (ALT (= opIz expr_arit) (= op (BLOCK (ALT ADD) (ALT SUB))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT MENOR) (ALT MENORIGUAL) (ALT MAYORIGUAL) (ALT MAYOR) (ALT IG_IG) (ALT DIFERENTE))) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (= opIz expr_arit) (= op AND) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op OR) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT expVectors { $p = $expVectors.ev }) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { }) (ALT primitive { $p = $primitive.p }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT AMP (= exp expr_arit) { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos, num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT STRING {
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         }) (ALT CHARACTER {
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { }) (ALT ID { $p = expressions.NewCallVar($ID.line,$ID.pos,$ID.text) }))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {}) (ALT ID D_PTS expression {}))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT VECTOR1 CORIZQ listParams CORDER { }) (ALT VECTOR1 CORIZQ listVec CORDER { }) (ALT VECTOR2 C_PTS NEW PARIZQ PARDER { }) (ALT VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {}) (ALT ID C_PTS {})))))
2022-05-07 08:10:05:716 grammar LogManager.java:25 after: (PARSER_GRAMMAR Rust (OPTIONS (= tokenVocab RustLexer)) (@ header {
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"
}) (RULES (RULE start (returns environment.Code code) (BLOCK (ALT (* (BLOCK (ALT (+= e global_env)))) main (* (BLOCK (ALT (+= e global_env)))) {
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    }))) (RULE global_env (returns interfaces.Instruction hi) (BLOCK (ALT declaration PYC { $hi = $declaration.dec }) (ALT function { $hi = $function.fun }) (ALT module {  }) (ALT structCreation { }))) (RULE module (returns  interfaces.Instruction mod ) (BLOCK (ALT MODULE ID LLAVEIZQ moduleContent LLAVEDER {  }))) (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (= mc moduleContent) PUB module {}) (ALT (= mc moduleContent) PUB moduleAction { }) (ALT (= mc moduleContent) module { }) (ALT (= mc moduleContent) moduleAction {}) (ALT PUB module {}) (ALT PUB moduleAction {}) (ALT module {}) (ALT moduleAction { }))) (RULE moduleAction (returns interfaces.Instruction ma) (BLOCK (ALT function { $ma = $function.fun }) (ALT structCreation { }))) (RULE main (returns *arrayList.List mainInst) (BLOCK (ALT FUNC MAIN PARIZQ PARDER LLAVEIZQ block LLAVEDER { $mainInst = $block.blk }))) (RULE instructions (returns *arrayList.List insts) (@ init {
    $insts = arrayList.New()
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruction)))) {
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT impression PYC { $inst = $impression.pr }) (ALT declaration PYC { $inst = $declaration.dec }) (ALT assignment PYC { $inst = $assignment.ass }) (ALT condIf { $inst = $condIf.ifCond }) (ALT condMatch { $inst = $condMatch.mtch }) (ALT loopWhile { $inst = $loopWhile.lw }) (ALT loopBucle { $inst = $loopBucle.lb }) (ALT loopForin { $inst = $loopForin.lfi }) (ALT transBreak PYC { $inst = $transBreak.brk }) (ALT transContinue PYC { $inst = $transContinue.cnt }) (ALT transReturn { $inst = $transReturn.rt }) (ALT structCreation { $inst = $structCreation.dec }) (ALT insVectors PYC { $inst = $insVectors.iv }))) (RULE insVectors (returns interfaces.Instruction iv) (BLOCK (ALT ID PUNTO PUSH PARIZQ expression PARDER { }) (ALT ID PUNTO INSERT PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }))) (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (= list listParamsCall) COMA expression {
                                         ByRef := environment.NewByReference($expression.p, false)
                                         $list.l.Add(ByRef);
                                         $l = $list.l;
                                      }) (ALT (= list listParamsCall) COMA AMP MUT expression {
                                            ByRef := environment.NewByReference($expression.p, true)
                                            $list.l.Add(ByRef);
                                            $l = $list.l;
                                         }) (ALT expression {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT AMP MUT expression {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       }))) (RULE loopWhile (returns interfaces.Instruction lw) (BLOCK (ALT WHILE expression LLAVEIZQ block LLAVEDER { $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) }))) (RULE loopBucle (returns interfaces.Instruction lb) (BLOCK (ALT LOOP LLAVEIZQ block LLAVEDER {}))) (RULE loopForin (returns interfaces.Instruction lfi) (BLOCK (ALT FOR ID IN expression LLAVEIZQ block LLAVEDER { $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $block.blk) }))) (RULE transBreak (returns interfaces.Instruction brk) (BLOCK (ALT BREAK expression { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) }) (ALT BREAK { $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) }))) (RULE transContinue (returns interfaces.Instruction cnt) (BLOCK (ALT CONTINUE { $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) }))) (RULE transReturn (returns interfaces.Instruction rt) (BLOCK (ALT RETURN expression PYC { }) (ALT RETURN PYC { }) (ALT RETURN expression { }) (ALT RETURN { }))) (RULE condIf (returns  interfaces.Instruction ifCond ) (BLOCK (ALT IF expression LLAVEIZQ block LLAVEDER (* (BLOCK (ALT (+= e condElseIf)))) condElse {
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            }))) (RULE condElseIf (returns interfaces.Instruction elif) (BLOCK (ALT ELSE IF expression LLAVEIZQ block LLAVEDER {
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    }))) (RULE condElse (returns *arrayList.List blkelse) (BLOCK (ALT ELSE LLAVEIZQ block LLAVEDER { $blkelse = $block.blk }) (ALT { $blkelse = arrayList.New() }))) (RULE block (returns *arrayList.List blk) (@ init {
    $blk = arrayList.New()
  }) (BLOCK (ALT (= bloque block) instruction {
                            $bloque.blk.Add($instruction.inst)
                            $blk = $bloque.blk
                            }) (ALT (= bloque block) expression {
                            $bloque.blk.Add($expression.p)
                            $blk = $bloque.blk
                           }) (ALT instruction { $blk.Add($instruction.inst) }) (ALT expression { $blk.Add($expression.p) }))) (RULE condMatch (returns interfaces.Instruction mtch) (BLOCK (ALT MATCH expression LLAVEIZQ (+ (BLOCK (ALT (+= e listArms)))) defaultArm LLAVEDER {}))) (RULE listArms (returns interfaces.Instruction arms) (BLOCK (ALT listMatch ARROW2 block COMA {}) (ALT listMatch ARROW2 LLAVEIZQ block LLAVEDER COMA {}))) (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (= lma listMatch) PLEC expression {}) (ALT expression { }))) (RULE defaultArm (returns *arrayList.List defa) (BLOCK (ALT UNDERSCORE ARROW2 block COMA { $defa = $block.blk }) (ALT UNDERSCORE ARROW2 LLAVEIZQ block LLAVEDER COMA { $defa = $block.blk }) (ALT { $defa = arrayList.New() }))) (RULE impression (returns interfaces.Instruction pr) (BLOCK (ALT PRINT PARIZQ listParams PARDER { $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) }))) (RULE declaration (returns interfaces.Instruction dec) (BLOCK (ALT LET MUT ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, $types.ty, $expression.p, true) }) (ALT LET MUT ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.WILDCARD, $expression.p, true) }) (ALT LET ID D_PTS types IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, $types.ty, $expression.p, false) }) (ALT LET ID IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.WILDCARD, $expression.p, false) }) (ALT LET MUT ID D_PTS arrayType IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.ARRAY, $expression.p, true) }) (ALT LET ID D_PTS arrayType IGUAL expression { $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.ARRAY, $expression.p, false) }) (ALT vectDeclaration { $dec = $vectDeclaration.vec }))) (RULE vectDeclaration (returns interfaces.Instruction vec) (BLOCK (ALT LET ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR types MAYOR IGUAL expression { }) (ALT LET ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET MUT ID D_PTS VECTOR2 MENOR (= tipo ID) MAYOR IGUAL expression { }) (ALT LET ID D_PTS typeVect IGUAL expression { }) (ALT LET MUT ID D_PTS typeVect IGUAL expression { }))) (RULE typeVect (returns ) (BLOCK (ALT VECTOR2 MENOR (= tv typeVect) MAYOR) (ALT VECTOR2 MENOR types MAYOR) (ALT VECTOR2 MENOR ID MAYOR))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { }))) (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (= list listStructDec) COMA (= id1 ID) D_PTS types {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= list listStructDec) COMA (= id1 ID) D_PTS arrayType {}) (ALT (= id1 ID) D_PTS types {}) (ALT (= id1 ID) D_PTS (= id2 ID) {}) (ALT (= id1 ID) D_PTS arrayType {}))) (RULE assignment (returns interfaces.Instruction ass) (BLOCK (ALT ID IGUAL expression { $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)}) (ALT listAccessStruct IGUAL expression { }) (ALT ID listAccessArray IGUAL expression { }) (ALT ID CORIZQ (= e1 expression) CORDER listArrStr IGUAL (= e2 expression) { }))) (RULE listArrStr (returns *arrayList.List l) (BLOCK (ALT (= list listArrStr) PUNTO ID {}) (ALT PUNTO ID {}))) (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (= list listAccessStruct) PUNTO ID {}) (ALT ID {}))) (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (= list listAccessArray) CORIZQ expression CORDER {}) (ALT CORIZQ expression CORDER {}))) (RULE arrayType (returns *arrayList.List t) (BLOCK (ALT CORIZQ arrayType PYC expression CORDER {}) (ALT CORIZQ types PYC expression CORDER {}) (ALT CORIZQ (= exp1 expression) PYC (= exp2 expression) CORDER {}) (ALT CORIZQ types CORDER {}))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        }) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 (= id2 ID) LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       }) (ALT FUNC (= id1 ID) PARIZQ listParamsFunc PARDER ARROW1 VECTOR2 MENOR (= id2 ID) MAYOR LLAVEIZQ block LLAVEDER {
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk, $id2.text)
                       }))) (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
                   newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                   $list.lpf.Add(newParam)
                   $lpf = $list.lpf
                    }) (ALT (= list listParamsFunc) COMA ID D_PTS AMP MUT arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA ID D_PTS arrayType {
             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR {
             newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
             $list.lpf.Add(newParam)
             $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS AMP MUT (= id2 ID) {
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                 $list.lpf.Add(newParam)
                 $lpf = $list.lpf
              }) (ALT (= list listParamsFunc) COMA (= id1 ID) D_PTS (= id2 ID) {
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                 $list.lpf.Add(newParam)
                 $lpf = $list.lpf
              }) (ALT ID D_PTS types {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                $lpf.Add(newParam)
             }) (ALT ID D_PTS AMP MUT arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT VECTOR2 MENOR types MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              }) (ALT ID D_PTS arrayType {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"", environment.WILDCARD)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR (= id2 ID) MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS VECTOR2 MENOR types MAYOR {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) D_PTS AMP MUT (= id2 ID) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 ID) (+ (BLOCK (ALT D_PTS))) (? (BLOCK (ALT AMP MUT))) (= id2 ID) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CHAR { $ty = environment.CHAR }) (ALT STR1 { $ty = environment.STRING }) (ALT STR2 { $ty = environment.STR }) (ALT VECTOR1 { $ty = environment.VECTOR }) (ALT STRUCT { $ty = environment.STRUCT }) (ALT USIZE { $ty = environment.INTEGER }) (ALT ARRAY { $ty = environment.ARRAY }))) (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (= list listParams) COMA expression {
                                        $list.l.Add($expression.p)
                                        $l = $list.l
                                     }) (ALT expression {
                $l = arrayList.New()
                $l.Add($expression.p)
             }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER PYC { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }) (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE expression (returns interfaces.Expression p) (BLOCK (ALT expr_arit { $p = $expr_arit.p }) (ALT (= expuno expression) PUNTO PUNTO (= expdos expression) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))) (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT SUB (= opDe expr_arit) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT types C_PTS POW PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT types C_PTS POWF PARIZQ (= exp1 expression) COMA (= exp2 expression) PARDER { }) (ALT (= opIz expr_arit) (= op (SET MUL DIV MOD)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= exp expr_arit) AS types { }) (ALT (= exp expr_arit) PUNTO TOSTR {$p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p)}) (ALT (= exp expr_arit) PUNTO TOOWN { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }) (ALT (= exp expr_arit) PUNTO CLONE { }) (ALT (= exp expr_arit) PUNTO ABS { $p = expressions.NewAbs($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }) (ALT (= exp expr_arit) PUNTO SQRT { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER { }) (ALT ID PUNTO REMOVE PARIZQ expression PARDER PYC { }) (ALT ID PUNTO CAPACITY PARIZQ PARDER { }) (ALT (= ex1 expr_arit) PUNTO CONTAINS PARIZQ AMP (= ex2 expression) PARDER { }) (ALT (= exp expr_arit) PUNTO LEN PARIZQ PARDER { }) (ALT (= opIz expr_arit) (= op (SET ADD SUB)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op (SET MENOR MENORIGUAL MAYORIGUAL MAYOR IG_IG DIFERENTE)) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT NOT (= opDe expr_arit) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (= opIz expr_arit) (= op AND) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT (= opIz expr_arit) (= op OR) (= opDe expr_arit) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT expVectors { $p = $expVectors.ev }) (ALT CORIZQ listParams CORDER { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT ID LLAVEIZQ listStructExp LLAVEDER { }) (ALT primitive { $p = $primitive.p }) (ALT PARIZQ expression PARDER { $p = $expression.p }) (ALT callFunction { $p = $callFunction.cf }) (ALT callFunction PYC { $p = $callFunction.cf }) (ALT callModule { $p = $callModule.cm }) (ALT callModule PYC { $p = $callModule.cm }) (ALT condIf { $p = $condIf.ifCond }) (ALT condMatch { $p = $condMatch.mtch }) (ALT loopBucle { $p = $loopBucle.lb }) (ALT AMP (= exp expr_arit) { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) }))) (RULE primitive (returns interfaces.Expression p) (BLOCK (ALT NUMBER {
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos, num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        }) (ALT STRING {
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         }) (ALT CHARACTER {
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            }) (ALT TRU { $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) }) (ALT FAL { $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) }) (ALT (= list listArray) { $p = $list.p}))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expression CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT (= list listArray) PUNTO ID { }) (ALT ID { $p = expressions.NewCallVar($ID.line,$ID.pos,$ID.text) }))) (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expression {}) (ALT ID D_PTS expression {}))) (RULE expVectors (returns interfaces.Expression ev) (BLOCK (ALT VECTOR1 CORIZQ listParams CORDER { }) (ALT VECTOR1 CORIZQ listVec CORDER { }) (ALT VECTOR2 C_PTS NEW PARIZQ PARDER { }) (ALT VECTOR2 C_PTS WCAPACITY PARIZQ expression PARDER { }))) (RULE listVec (returns interfaces.Expression lv) (BLOCK (ALT (= exp1 expression) PYC (= exp2 expression) { }))) (RULE callModule (returns interfaces.Expression cm) (BLOCK (ALT listIdMod expression { }))) (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (= list listIdMod) ID C_PTS {}) (ALT ID C_PTS {})))))
2022-05-07 08:10:06:065 left-recursion LogManager.java:25 moduleContent returns [*arrayList.List m]
    :   ( {} PUB<tokenIndex=153> module<tokenIndex=155> {} 
        | PUB<tokenIndex=161> moduleAction<tokenIndex=163> {} 
        | module<tokenIndex=169> {} 
        | moduleAction<tokenIndex=175> { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> PUB<tokenIndex=113> module<tokenIndex=115> {}
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> PUB<tokenIndex=125> moduleAction<tokenIndex=127> { }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> module<tokenIndex=137> { }
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> moduleAction<tokenIndex=147> {}
        )*
    ;
2022-05-07 08:10:06:074 grammar LogManager.java:25 added: (RULE moduleContent (returns *arrayList.List m) (BLOCK (ALT (BLOCK (ALT {} (PUB (ELEMENT_OPTIONS (= tokenIndex 153))) (module (ELEMENT_OPTIONS (= tokenIndex 155))) {}) (ALT (PUB (ELEMENT_OPTIONS (= tokenIndex 161))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 163))) {}) (ALT (module (ELEMENT_OPTIONS (= tokenIndex 169))) {}) (ALT (moduleAction (ELEMENT_OPTIONS (= tokenIndex 175))) { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (PUB (ELEMENT_OPTIONS (= tokenIndex 113))) (module (ELEMENT_OPTIONS (= tokenIndex 115))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (PUB (ELEMENT_OPTIONS (= tokenIndex 125))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 127))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (module (ELEMENT_OPTIONS (= tokenIndex 137))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (moduleAction (ELEMENT_OPTIONS (= tokenIndex 147))) {}))))))
2022-05-07 08:10:06:155 left-recursion LogManager.java:25 listParamsCall returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=426> {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              } 
        | AMP<tokenIndex=432> MUT<tokenIndex=434> expression<tokenIndex=436> {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     } 
        | {
          $l = arrayList.New()
       } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=403> expression<tokenIndex=405>{
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=414> AMP<tokenIndex=416> MUT<tokenIndex=418> expression<tokenIndex=420> {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }
        )*
    ;
2022-05-07 08:10:06:175 grammar LogManager.java:25 added: (RULE listParamsCall (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 426))) {
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 432))) (MUT (ELEMENT_OPTIONS (= tokenIndex 434))) (expression (ELEMENT_OPTIONS (= tokenIndex 436))) {
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     }) (ALT {
          $l = arrayList.New()
       })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 403))) (expression (ELEMENT_OPTIONS (= tokenIndex 405))) {
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                }) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 414))) (AMP (ELEMENT_OPTIONS (= tokenIndex 416))) (MUT (ELEMENT_OPTIONS (= tokenIndex 418))) (expression (ELEMENT_OPTIONS (= tokenIndex 420))) {
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   }))))))
2022-05-07 08:10:06:239 left-recursion LogManager.java:25 block returns [*arrayList.List blk]
    :   ( {} instruction<tokenIndex=690> { $blk.Add($instruction.inst) } 
        | expression<tokenIndex=696> { $blk.Add($expression.p) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> instruction<tokenIndex=674> {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> expression<tokenIndex=684> {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }
        )*
    ;
2022-05-07 08:10:06:241 grammar LogManager.java:25 added: (RULE block (returns *arrayList.List blk) (BLOCK (ALT (BLOCK (ALT {} (instruction (ELEMENT_OPTIONS (= tokenIndex 690))) { $blk.Add($instruction.inst) }) (ALT (expression (ELEMENT_OPTIONS (= tokenIndex 696))) { $blk.Add($expression.p) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (instruction (ELEMENT_OPTIONS (= tokenIndex 674))) {
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      }) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (expression (ELEMENT_OPTIONS (= tokenIndex 684))) {
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     }))))))
2022-05-07 08:10:06:277 left-recursion LogManager.java:25 listMatch returns [*arrayList.List ma]
    :   ( {} expression<tokenIndex=783> { } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PLEC<tokenIndex=775> expression<tokenIndex=777> {}
        )*
    ;
2022-05-07 08:10:06:279 grammar LogManager.java:25 added: (RULE listMatch (returns *arrayList.List ma) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 783))) { })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PLEC (ELEMENT_OPTIONS (= tokenIndex 775))) (expression (ELEMENT_OPTIONS (= tokenIndex 777))) {}))))))
2022-05-07 08:10:06:312 left-recursion LogManager.java:25 listStructDec returns [*arrayList.List l]
    :   ( {} id1=ID<tokenIndex=1218> D_PTS<tokenIndex=1220> types<tokenIndex=1222>{} 
        | id1=ID<tokenIndex=1229> D_PTS<tokenIndex=1231> id2=ID<tokenIndex=1235> {} 
        | id1=ID<tokenIndex=1243> D_PTS<tokenIndex=1245> arrayType<tokenIndex=1247> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> COMA<tokenIndex=1164> id1=ID<tokenIndex=1168> D_PTS<tokenIndex=1170> types<tokenIndex=1172> {}
                  | {p.Precpred(p.GetParserRuleContext(), 5)}?<p=5> COMA<tokenIndex=1182> id1=ID<tokenIndex=1186> D_PTS<tokenIndex=1188> id2=ID<tokenIndex=1192> {}
                  | {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> COMA<tokenIndex=1202> id1=ID<tokenIndex=1206> D_PTS<tokenIndex=1208> arrayType<tokenIndex=1210> {}
        )*
    ;
2022-05-07 08:10:06:318 grammar LogManager.java:25 added: (RULE listStructDec (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1218)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1220))) (types (ELEMENT_OPTIONS (= tokenIndex 1222))) {}) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1229)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1231))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1235)))) {}) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1243)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1245))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1247))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1164))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1168)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1170))) (types (ELEMENT_OPTIONS (= tokenIndex 1172))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 5)}? (ELEMENT_OPTIONS (= p 5))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1182))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1186)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1188))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1192)))) {}) (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1202))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1206)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1208))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1210))) {}))))))
2022-05-07 08:10:06:371 left-recursion LogManager.java:25 listArrStr returns [*arrayList.List l]
    :   ( {} PUNTO<tokenIndex=1335> ID<tokenIndex=1337> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1327> ID<tokenIndex=1329> {}
        )*
    ;
2022-05-07 08:10:06:373 grammar LogManager.java:25 added: (RULE listArrStr (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1335))) (ID (ELEMENT_OPTIONS (= tokenIndex 1337))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1327))) (ID (ELEMENT_OPTIONS (= tokenIndex 1329))) {}))))))
2022-05-07 08:10:06:447 left-recursion LogManager.java:25 listAccessStruct returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=1362> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1354> ID<tokenIndex=1356> {}
        )*
    ;
2022-05-07 08:10:06:449 grammar LogManager.java:25 added: (RULE listAccessStruct (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1362))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1354))) (ID (ELEMENT_OPTIONS (= tokenIndex 1356))) {}))))))
2022-05-07 08:10:06:487 left-recursion LogManager.java:25 listAccessArray returns [*arrayList.List l]
    :   ( {} CORIZQ<tokenIndex=1388> expression<tokenIndex=1390> CORDER<tokenIndex=1392>{} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=1379> expression<tokenIndex=1381> CORDER<tokenIndex=1383>{}
        )*
    ;
2022-05-07 08:10:06:490 grammar LogManager.java:25 added: (RULE listAccessArray (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1388))) (expression (ELEMENT_OPTIONS (= tokenIndex 1390))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1392))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1379))) (expression (ELEMENT_OPTIONS (= tokenIndex 1381))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1383))) {}))))))
2022-05-07 08:10:06:528 left-recursion LogManager.java:25 listParamsFunc returns [*arrayList.List lpf]
    :   ( {} ID<tokenIndex=1780> D_PTS<tokenIndex=1782> types<tokenIndex=1784>{
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                $lpf.Add(newParam)
             } 
        | ID<tokenIndex=1789> D_PTS<tokenIndex=1791> AMP<tokenIndex=1793> MUT<tokenIndex=1795> arrayType<tokenIndex=1797> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1805> D_PTS<tokenIndex=1807> AMP<tokenIndex=1809> MUT<tokenIndex=1811> VECTOR2<tokenIndex=1813> MENOR<tokenIndex=1815> id2=ID<tokenIndex=1819> MAYOR<tokenIndex=1821> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1829> D_PTS<tokenIndex=1831> AMP<tokenIndex=1833> MUT<tokenIndex=1835> VECTOR2<tokenIndex=1837> MENOR<tokenIndex=1839> types<tokenIndex=1841> MAYOR<tokenIndex=1843> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              } 
        | ID<tokenIndex=1849> D_PTS<tokenIndex=1851> arrayType<tokenIndex=1853> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"", environment.WILDCARD)
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1861> D_PTS<tokenIndex=1863> VECTOR2<tokenIndex=1865> MENOR<tokenIndex=1867> id2=ID<tokenIndex=1871> MAYOR<tokenIndex=1873>  {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1881> D_PTS<tokenIndex=1883> VECTOR2<tokenIndex=1885> MENOR<tokenIndex=1887> types<tokenIndex=1889> MAYOR<tokenIndex=1891>  {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1899> D_PTS<tokenIndex=1901> AMP<tokenIndex=1903> MUT<tokenIndex=1905> id2=ID<tokenIndex=1909> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              } 
        | id1=ID<tokenIndex=1917> D_PTS<tokenIndex=1919> +(AMP<tokenIndex=1923> MUT<tokenIndex=1925>)? id2=ID<tokenIndex=1931> {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              } 
        | { $lpf = arrayList.New() } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> COMA<tokenIndex=1580> ID<tokenIndex=1582> D_PTS<tokenIndex=1584> types<tokenIndex=1586> {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> COMA<tokenIndex=1596> ID<tokenIndex=1598> D_PTS<tokenIndex=1600> AMP<tokenIndex=1602> MUT<tokenIndex=1604> arrayType<tokenIndex=1606> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> COMA<tokenIndex=1616> id1=ID<tokenIndex=1620> D_PTS<tokenIndex=1622> AMP<tokenIndex=1624> MUT<tokenIndex=1626> VECTOR2<tokenIndex=1628> MENOR<tokenIndex=1630> id2=ID<tokenIndex=1634> MAYOR<tokenIndex=1636> {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> COMA<tokenIndex=1646> id1=ID<tokenIndex=1650> D_PTS<tokenIndex=1652> AMP<tokenIndex=1654> MUT<tokenIndex=1656> VECTOR2<tokenIndex=1658> MENOR<tokenIndex=1660> types<tokenIndex=1662> MAYOR<tokenIndex=1664> {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> COMA<tokenIndex=1674> ID<tokenIndex=1676> D_PTS<tokenIndex=1678> arrayType<tokenIndex=1680> {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> COMA<tokenIndex=1690> id1=ID<tokenIndex=1694> D_PTS<tokenIndex=1696> VECTOR2<tokenIndex=1698> MENOR<tokenIndex=1700> id2=ID<tokenIndex=1704> MAYOR<tokenIndex=1706>  {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> COMA<tokenIndex=1716> id1=ID<tokenIndex=1720> D_PTS<tokenIndex=1722> VECTOR2<tokenIndex=1724> MENOR<tokenIndex=1726> types<tokenIndex=1728> MAYOR<tokenIndex=1730>  {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> COMA<tokenIndex=1740> id1=ID<tokenIndex=1744> D_PTS<tokenIndex=1746> AMP<tokenIndex=1748> MUT<tokenIndex=1750> id2=ID<tokenIndex=1754> {
                           newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                           $list.lpf.Add(newParam)
                           $lpf = $list.lpf
                        }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> COMA<tokenIndex=1764> id1=ID<tokenIndex=1768> D_PTS<tokenIndex=1770> id2=ID<tokenIndex=1774> {
                           newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                           $list.lpf.Add(newParam)
                           $lpf = $list.lpf
                        }
        )*
    ;
2022-05-07 08:10:06:544 grammar LogManager.java:25 added: (RULE listParamsFunc (returns *arrayList.List lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1780))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1782))) (types (ELEMENT_OPTIONS (= tokenIndex 1784))) {
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                $lpf.Add(newParam)
             }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1789))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1791))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1793))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1795))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1797))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1805)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1807))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1809))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1811))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1813))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1815))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1819)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1821))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1829)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1831))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1833))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1835))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1837))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1839))) (types (ELEMENT_OPTIONS (= tokenIndex 1841))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1843))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1849))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1851))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1853))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"", environment.WILDCARD)
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1861)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1863))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1865))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1867))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1871)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1873))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1881)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1883))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1885))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1887))) (types (ELEMENT_OPTIONS (= tokenIndex 1889))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1891))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1899)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1901))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1903))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1905))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1909)))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1917)))) (+ (BLOCK (ALT (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1919)))))) (? (BLOCK (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 1923))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1925)))))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1931)))) {
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              }) (ALT { $lpf = arrayList.New() })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1580))) (ID (ELEMENT_OPTIONS (= tokenIndex 1582))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1584))) (types (ELEMENT_OPTIONS (= tokenIndex 1586))) {
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1596))) (ID (ELEMENT_OPTIONS (= tokenIndex 1598))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1600))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1602))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1604))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1606))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1616))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1620)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1622))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1624))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1626))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1628))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1630))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1634)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1636))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1646))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1650)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1652))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1654))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1656))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1658))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1660))) (types (ELEMENT_OPTIONS (= tokenIndex 1662))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1664))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1674))) (ID (ELEMENT_OPTIONS (= tokenIndex 1676))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1678))) (arrayType (ELEMENT_OPTIONS (= tokenIndex 1680))) {
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1690))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1694)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1696))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1698))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1700))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1704)))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1706))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1716))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1720)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1722))) (VECTOR2 (ELEMENT_OPTIONS (= tokenIndex 1724))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1726))) (types (ELEMENT_OPTIONS (= tokenIndex 1728))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1730))) {
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1740))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1744)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1746))) (AMP (ELEMENT_OPTIONS (= tokenIndex 1748))) (MUT (ELEMENT_OPTIONS (= tokenIndex 1750))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1754)))) {
                           newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                           $list.lpf.Add(newParam)
                           $lpf = $list.lpf
                        }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1764))) (= id1 (ID (ELEMENT_OPTIONS (= tokenIndex 1768)))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1770))) (= id2 (ID (ELEMENT_OPTIONS (= tokenIndex 1774)))) {
                           newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                           $list.lpf.Add(newParam)
                           $lpf = $list.lpf
                        }))))))
2022-05-07 08:10:06:572 left-recursion LogManager.java:25 listParams returns [*arrayList.List l]
    :   ( {} expression<tokenIndex=2027> {
                $l = arrayList.New()
                $l.Add($expression.p)
             } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2019> expression<tokenIndex=2021>   {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }
        )*
    ;
2022-05-07 08:10:06:576 grammar LogManager.java:25 added: (RULE listParams (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 2027))) {
                $l = arrayList.New()
                $l.Add($expression.p)
             })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2019))) (expression (ELEMENT_OPTIONS (= tokenIndex 2021))) {
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               }))))))
2022-05-07 08:10:06:598 left-recursion LogManager.java:25 expression returns [interfaces.Expression p]
    :   ( {} expr_arit<tokenIndex=2073> { $p = $expr_arit.p } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 1)}?<p=1> PUNTO<tokenIndex=2083> PUNTO<tokenIndex=2085> expdos=expression<tokenIndex=2089,p=2> { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }
        )*
    ;
2022-05-07 08:10:06:600 grammar LogManager.java:25 added: (RULE expression (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2073))) { $p = $expr_arit.p })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 1)}? (ELEMENT_OPTIONS (= p 1))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2083))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2085))) (= expdos (expression (ELEMENT_OPTIONS (= tokenIndex 2089) (= p 2)))) { $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) }))))))
2022-05-07 08:10:06:631 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expression p]
    :   ( {} SUB<tokenIndex=2102> opDe=expr_arit<tokenIndex=2106,p=33> {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)} 
        | types<tokenIndex=2112> C_PTS<tokenIndex=2114> POW<tokenIndex=2116> PARIZQ<tokenIndex=2118> exp1=expression<tokenIndex=2122> COMA<tokenIndex=2124> exp2=expression<tokenIndex=2128> PARDER<tokenIndex=2130> { } 
        | types<tokenIndex=2136> C_PTS<tokenIndex=2138> POWF<tokenIndex=2140> PARIZQ<tokenIndex=2142> exp1=expression<tokenIndex=2146> COMA<tokenIndex=2148> exp2=expression<tokenIndex=2152> PARDER<tokenIndex=2154> { } 
        | ID<tokenIndex=2254> PUNTO<tokenIndex=2256> REMOVE<tokenIndex=2258> PARIZQ<tokenIndex=2260> expression<tokenIndex=2262> PARDER<tokenIndex=2264> { } 
        | ID<tokenIndex=2270> PUNTO<tokenIndex=2272> REMOVE<tokenIndex=2274> PARIZQ<tokenIndex=2276> expression<tokenIndex=2278> PARDER<tokenIndex=2280> PYC<tokenIndex=2282> { } 
        | ID<tokenIndex=2288> PUNTO<tokenIndex=2290> CAPACITY<tokenIndex=2292> PARIZQ<tokenIndex=2294> PARDER<tokenIndex=2296> { } 
        | NOT<tokenIndex=2388> opDe=expr_arit<tokenIndex=2392,p=16> {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)} 
        | expVectors<tokenIndex=2430> { $p = $expVectors.ev } 
        | CORIZQ<tokenIndex=2436> listParams<tokenIndex=2438> CORDER<tokenIndex=2440> { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | ID<tokenIndex=2446> LLAVEIZQ<tokenIndex=2448> listStructExp<tokenIndex=2450> LLAVEDER<tokenIndex=2452> { } 
        | primitive<tokenIndex=2458> { $p = $primitive.p } 
        | PARIZQ<tokenIndex=2464> expression<tokenIndex=2466> PARDER<tokenIndex=2468> { $p = $expression.p } 
        | callFunction<tokenIndex=2474> { $p = $callFunction.cf } 
        | callFunction<tokenIndex=2480> PYC<tokenIndex=2482> { $p = $callFunction.cf } 
        | callModule<tokenIndex=2488> { $p = $callModule.cm } 
        | callModule<tokenIndex=2494> PYC<tokenIndex=2496> { $p = $callModule.cm } 
        | condIf<tokenIndex=2502> { $p = $condIf.ifCond } 
        | condMatch<tokenIndex=2508> { $p = $condMatch.mtch } 
        | loopBucle<tokenIndex=2514> { $p = $loopBucle.lb } 
        | AMP<tokenIndex=2520> exp=expr_arit<tokenIndex=2524,p=1> { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 30)}?<p=30> op=(MUL<tokenIndex=2167>|DIV<tokenIndex=2169>|MOD<tokenIndex=2171>) opDe=expr_arit<tokenIndex=2176,p=31> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=2347>|SUB<tokenIndex=2349>) opDe=expr_arit<tokenIndex=2354,p=19> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MENOR<tokenIndex=2367>|MENORIGUAL<tokenIndex=2369>|MAYORIGUAL<tokenIndex=2371>|MAYOR<tokenIndex=2373>|IG_IG<tokenIndex=2375>|DIFERENTE<tokenIndex=2377>) opDe=expr_arit<tokenIndex=2382,p=18> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=AND<tokenIndex=2404> opDe=expr_arit<tokenIndex=2408,p=16> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=OR<tokenIndex=2420> opDe=expr_arit<tokenIndex=2424,p=15> {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 29)}?<p=29> AS<tokenIndex=2186> types<tokenIndex=2188> { }
                  | {p.Precpred(p.GetParserRuleContext(), 28)}?<p=28> PUNTO<tokenIndex=2198> TOSTR<tokenIndex=2200> {$p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p)}
                  | {p.Precpred(p.GetParserRuleContext(), 27)}?<p=27> PUNTO<tokenIndex=2210> TOOWN<tokenIndex=2212> { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 26)}?<p=26> PUNTO<tokenIndex=2222> CLONE<tokenIndex=2224> { }
                  | {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> PUNTO<tokenIndex=2234> ABS<tokenIndex=2236>  { $p = expressions.NewAbs($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> PUNTO<tokenIndex=2246> SQRT<tokenIndex=2248> { }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> PUNTO<tokenIndex=2306> CONTAINS<tokenIndex=2308> PARIZQ<tokenIndex=2310> AMP<tokenIndex=2312> ex2=expression<tokenIndex=2316> PARDER<tokenIndex=2318> { }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> PUNTO<tokenIndex=2328> LEN<tokenIndex=2330> PARIZQ<tokenIndex=2332> PARDER<tokenIndex=2334> { }
        )*
    ;
2022-05-07 08:10:06:646 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (SUB (ELEMENT_OPTIONS (= tokenIndex 2102))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2106) (= p 33)))) {$p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)}) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 2112))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2114))) (POW (ELEMENT_OPTIONS (= tokenIndex 2116))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2118))) (= exp1 (expression (ELEMENT_OPTIONS (= tokenIndex 2122)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2124))) (= exp2 (expression (ELEMENT_OPTIONS (= tokenIndex 2128)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2130))) { }) (ALT (types (ELEMENT_OPTIONS (= tokenIndex 2136))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2138))) (POWF (ELEMENT_OPTIONS (= tokenIndex 2140))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2142))) (= exp1 (expression (ELEMENT_OPTIONS (= tokenIndex 2146)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2148))) (= exp2 (expression (ELEMENT_OPTIONS (= tokenIndex 2152)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2154))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2254))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2256))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2258))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2260))) (expression (ELEMENT_OPTIONS (= tokenIndex 2262))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2264))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2270))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2272))) (REMOVE (ELEMENT_OPTIONS (= tokenIndex 2274))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2276))) (expression (ELEMENT_OPTIONS (= tokenIndex 2278))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2280))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2282))) { }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2288))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2290))) (CAPACITY (ELEMENT_OPTIONS (= tokenIndex 2292))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2294))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2296))) { }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 2388))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2392) (= p 16)))) {$p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)}) (ALT (expVectors (ELEMENT_OPTIONS (= tokenIndex 2430))) { $p = $expVectors.ev }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2436))) (listParams (ELEMENT_OPTIONS (= tokenIndex 2438))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2440))) { $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 2446))) (LLAVEIZQ (ELEMENT_OPTIONS (= tokenIndex 2448))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 2450))) (LLAVEDER (ELEMENT_OPTIONS (= tokenIndex 2452))) { }) (ALT (primitive (ELEMENT_OPTIONS (= tokenIndex 2458))) { $p = $primitive.p }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2464))) (expression (ELEMENT_OPTIONS (= tokenIndex 2466))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2468))) { $p = $expression.p }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2474))) { $p = $callFunction.cf }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 2480))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2482))) { $p = $callFunction.cf }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2488))) { $p = $callModule.cm }) (ALT (callModule (ELEMENT_OPTIONS (= tokenIndex 2494))) (PYC (ELEMENT_OPTIONS (= tokenIndex 2496))) { $p = $callModule.cm }) (ALT (condIf (ELEMENT_OPTIONS (= tokenIndex 2502))) { $p = $condIf.ifCond }) (ALT (condMatch (ELEMENT_OPTIONS (= tokenIndex 2508))) { $p = $condMatch.mtch }) (ALT (loopBucle (ELEMENT_OPTIONS (= tokenIndex 2514))) { $p = $loopBucle.lb }) (ALT (AMP (ELEMENT_OPTIONS (= tokenIndex 2520))) (= exp (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2524) (= p 1)))) { $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 30)}? (ELEMENT_OPTIONS (= p 30))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 2167))) (DIV (ELEMENT_OPTIONS (= tokenIndex 2169))) (MOD (ELEMENT_OPTIONS (= tokenIndex 2171))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2176) (= p 31)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 2347))) (SUB (ELEMENT_OPTIONS (= tokenIndex 2349))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2354) (= p 19)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MENOR (ELEMENT_OPTIONS (= tokenIndex 2367))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2369))) (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 2371))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 2373))) (IG_IG (ELEMENT_OPTIONS (= tokenIndex 2375))) (DIFERENTE (ELEMENT_OPTIONS (= tokenIndex 2377))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2382) (= p 18)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 2404)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2408) (= p 16)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 2420)))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 2424) (= p 15)))) {$p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 29)}? (ELEMENT_OPTIONS (= p 29))) (AS (ELEMENT_OPTIONS (= tokenIndex 2186))) (types (ELEMENT_OPTIONS (= tokenIndex 2188))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 28)}? (ELEMENT_OPTIONS (= p 28))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2198))) (TOSTR (ELEMENT_OPTIONS (= tokenIndex 2200))) {$p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 27)}? (ELEMENT_OPTIONS (= p 27))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2210))) (TOOWN (ELEMENT_OPTIONS (= tokenIndex 2212))) { $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 26)}? (ELEMENT_OPTIONS (= p 26))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2222))) (CLONE (ELEMENT_OPTIONS (= tokenIndex 2224))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2234))) (ABS (ELEMENT_OPTIONS (= tokenIndex 2236))) { $p = expressions.NewAbs($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2246))) (SQRT (ELEMENT_OPTIONS (= tokenIndex 2248))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2306))) (CONTAINS (ELEMENT_OPTIONS (= tokenIndex 2308))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2310))) (AMP (ELEMENT_OPTIONS (= tokenIndex 2312))) (= ex2 (expression (ELEMENT_OPTIONS (= tokenIndex 2316)))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2318))) { }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2328))) (LEN (ELEMENT_OPTIONS (= tokenIndex 2330))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 2332))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 2334))) { }))))))
2022-05-07 08:10:06:687 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=2611> { $p = expressions.NewCallVar($ID.line,$ID.pos,$ID.text) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=2587> expression<tokenIndex=2589> CORDER<tokenIndex=2591> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=2603> ID<tokenIndex=2605> { }
        )*
    ;
2022-05-07 08:10:06:689 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2611))) { $p = expressions.NewCallVar($ID.line,$ID.pos,$ID.text) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 2587))) (expression (ELEMENT_OPTIONS (= tokenIndex 2589))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 2591))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 2603))) (ID (ELEMENT_OPTIONS (= tokenIndex 2605))) { }))))))
2022-05-07 08:10:06:712 left-recursion LogManager.java:25 listStructExp returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2640> D_PTS<tokenIndex=2642> expression<tokenIndex=2644>{} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=2628> ID<tokenIndex=2630> D_PTS<tokenIndex=2632> expression<tokenIndex=2634> {}
        )*
    ;
2022-05-07 08:10:06:714 grammar LogManager.java:25 added: (RULE listStructExp (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2640))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2642))) (expression (ELEMENT_OPTIONS (= tokenIndex 2644))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 2628))) (ID (ELEMENT_OPTIONS (= tokenIndex 2630))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 2632))) (expression (ELEMENT_OPTIONS (= tokenIndex 2634))) {}))))))
2022-05-07 08:10:06:735 left-recursion LogManager.java:25 listIdMod returns [*arrayList.List l]
    :   ( {} ID<tokenIndex=2766> C_PTS<tokenIndex=2768> {} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ID<tokenIndex=2758> C_PTS<tokenIndex=2760> {}
        )*
    ;
2022-05-07 08:10:06:737 grammar LogManager.java:25 added: (RULE listIdMod (returns *arrayList.List l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 2766))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2768))) {})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (ID (ELEMENT_OPTIONS (= tokenIndex 2758))) (C_PTS (ELEMENT_OPTIONS (= tokenIndex 2760))) {}))))))
2022-05-07 08:10:06:759 grammar LogManager.java:25 import INT=1
2022-05-07 08:10:06:759 grammar LogManager.java:25 import FLOAT=2
2022-05-07 08:10:06:759 grammar LogManager.java:25 import BOOL=3
2022-05-07 08:10:06:759 grammar LogManager.java:25 import CHAR=4
2022-05-07 08:10:06:759 grammar LogManager.java:25 import STR1=5
2022-05-07 08:10:06:759 grammar LogManager.java:25 import STR2=6
2022-05-07 08:10:06:759 grammar LogManager.java:25 import USIZE=7
2022-05-07 08:10:06:759 grammar LogManager.java:25 import VECTOR1=8
2022-05-07 08:10:06:759 grammar LogManager.java:25 import VECTOR2=9
2022-05-07 08:10:06:760 grammar LogManager.java:25 import STRUCT=10
2022-05-07 08:10:06:760 grammar LogManager.java:25 import ARRAY=11
2022-05-07 08:10:06:760 grammar LogManager.java:25 import AS=12
2022-05-07 08:10:06:760 grammar LogManager.java:25 import TRU=13
2022-05-07 08:10:06:760 grammar LogManager.java:25 import FAL=14
2022-05-07 08:10:06:760 grammar LogManager.java:25 import POWF=15
2022-05-07 08:10:06:760 grammar LogManager.java:25 import POW=16
2022-05-07 08:10:06:760 grammar LogManager.java:25 import PRINT=17
2022-05-07 08:10:06:760 grammar LogManager.java:25 import LET=18
2022-05-07 08:10:06:760 grammar LogManager.java:25 import MUT=19
2022-05-07 08:10:06:760 grammar LogManager.java:25 import FUNC=20
2022-05-07 08:10:06:760 grammar LogManager.java:25 import ARROW1=21
2022-05-07 08:10:06:760 grammar LogManager.java:25 import ARROW2=22
2022-05-07 08:10:06:760 grammar LogManager.java:25 import ABS=23
2022-05-07 08:10:06:760 grammar LogManager.java:25 import SQRT=24
2022-05-07 08:10:06:760 grammar LogManager.java:25 import TOSTR=25
2022-05-07 08:10:06:760 grammar LogManager.java:25 import TOOWN=26
2022-05-07 08:10:06:760 grammar LogManager.java:25 import CLONE=27
2022-05-07 08:10:06:760 grammar LogManager.java:25 import NEW=28
2022-05-07 08:10:06:760 grammar LogManager.java:25 import LEN=29
2022-05-07 08:10:06:760 grammar LogManager.java:25 import PUSH=30
2022-05-07 08:10:06:760 grammar LogManager.java:25 import REMOVE=31
2022-05-07 08:10:06:760 grammar LogManager.java:25 import CONTAINS=32
2022-05-07 08:10:06:760 grammar LogManager.java:25 import INSERT=33
2022-05-07 08:10:06:760 grammar LogManager.java:25 import CAPACITY=34
2022-05-07 08:10:06:760 grammar LogManager.java:25 import WCAPACITY=35
2022-05-07 08:10:06:760 grammar LogManager.java:25 import MAIN=36
2022-05-07 08:10:06:760 grammar LogManager.java:25 import IF=37
2022-05-07 08:10:06:760 grammar LogManager.java:25 import ELSE=38
2022-05-07 08:10:06:760 grammar LogManager.java:25 import MATCH=39
2022-05-07 08:10:06:760 grammar LogManager.java:25 import LOOP=40
2022-05-07 08:10:06:761 grammar LogManager.java:25 import WHILE=41
2022-05-07 08:10:06:761 grammar LogManager.java:25 import FOR=42
2022-05-07 08:10:06:761 grammar LogManager.java:25 import IN=43
2022-05-07 08:10:06:761 grammar LogManager.java:25 import BREAK=44
2022-05-07 08:10:06:761 grammar LogManager.java:25 import CONTINUE=45
2022-05-07 08:10:06:761 grammar LogManager.java:25 import RETURN=46
2022-05-07 08:10:06:761 grammar LogManager.java:25 import MODULE=47
2022-05-07 08:10:06:761 grammar LogManager.java:25 import PUB=48
2022-05-07 08:10:06:761 grammar LogManager.java:25 import NUMBER=49
2022-05-07 08:10:06:761 grammar LogManager.java:25 import STRING=50
2022-05-07 08:10:06:761 grammar LogManager.java:25 import ID=51
2022-05-07 08:10:06:761 grammar LogManager.java:25 import CHARACTER=52
2022-05-07 08:10:06:761 grammar LogManager.java:25 import PUNTO=53
2022-05-07 08:10:06:761 grammar LogManager.java:25 import C_PTS=54
2022-05-07 08:10:06:761 grammar LogManager.java:25 import D_PTS=55
2022-05-07 08:10:06:761 grammar LogManager.java:25 import PYC=56
2022-05-07 08:10:06:761 grammar LogManager.java:25 import COMA=57
2022-05-07 08:10:06:761 grammar LogManager.java:25 import DIFERENTE=58
2022-05-07 08:10:06:761 grammar LogManager.java:25 import IG_IG=59
2022-05-07 08:10:06:761 grammar LogManager.java:25 import NOT=60
2022-05-07 08:10:06:761 grammar LogManager.java:25 import OR=61
2022-05-07 08:10:06:761 grammar LogManager.java:25 import PLEC=62
2022-05-07 08:10:06:761 grammar LogManager.java:25 import UNDERSCORE=63
2022-05-07 08:10:06:761 grammar LogManager.java:25 import AND=64
2022-05-07 08:10:06:761 grammar LogManager.java:25 import IGUAL=65
2022-05-07 08:10:06:761 grammar LogManager.java:25 import MAYORIGUAL=66
2022-05-07 08:10:06:762 grammar LogManager.java:25 import MENORIGUAL=67
2022-05-07 08:10:06:762 grammar LogManager.java:25 import MAYOR=68
2022-05-07 08:10:06:762 grammar LogManager.java:25 import MENOR=69
2022-05-07 08:10:06:762 grammar LogManager.java:25 import MUL=70
2022-05-07 08:10:06:762 grammar LogManager.java:25 import DIV=71
2022-05-07 08:10:06:762 grammar LogManager.java:25 import ADD=72
2022-05-07 08:10:06:762 grammar LogManager.java:25 import SUB=73
2022-05-07 08:10:06:762 grammar LogManager.java:25 import MOD=74
2022-05-07 08:10:06:762 grammar LogManager.java:25 import PARIZQ=75
2022-05-07 08:10:06:762 grammar LogManager.java:25 import PARDER=76
2022-05-07 08:10:06:762 grammar LogManager.java:25 import LLAVEIZQ=77
2022-05-07 08:10:06:762 grammar LogManager.java:25 import LLAVEDER=78
2022-05-07 08:10:06:762 grammar LogManager.java:25 import CORIZQ=79
2022-05-07 08:10:06:762 grammar LogManager.java:25 import CORDER=80
2022-05-07 08:10:06:762 grammar LogManager.java:25 import AMP=81
2022-05-07 08:10:06:762 grammar LogManager.java:25 import WHITESPACE=82
2022-05-07 08:10:06:762 grammar LogManager.java:25 import COMMENT=83
2022-05-07 08:10:06:762 grammar LogManager.java:25 import LINE_COMMENT=84
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'i64'=1
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'f64'=2
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'bool'=3
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'char'=4
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'String'=5
2022-05-07 08:10:06:762 grammar LogManager.java:25 import '&str'=6
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'usize'=7
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'vec!'=8
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'Vec'=9
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'struct'=10
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'array'=11
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'as'=12
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'true'=13
2022-05-07 08:10:06:762 grammar LogManager.java:25 import 'false'=14
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'powf'=15
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'pow'=16
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'println!'=17
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'let'=18
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'mut'=19
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'fn'=20
2022-05-07 08:10:06:763 grammar LogManager.java:25 import '->'=21
2022-05-07 08:10:06:763 grammar LogManager.java:25 import '=>'=22
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'abs()'=23
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'sqrt()'=24
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'to_string()'=25
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'to_owned()'=26
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'clone()'=27
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'new'=28
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'len'=29
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'push'=30
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'remove'=31
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'contains'=32
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'insert'=33
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'capacity'=34
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'with_capacity'=35
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'main'=36
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'if'=37
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'else'=38
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'match'=39
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'loop'=40
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'while'=41
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'for'=42
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'in'=43
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'break'=44
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'continue'=45
2022-05-07 08:10:06:763 grammar LogManager.java:25 import 'return'=46
2022-05-07 08:10:06:764 grammar LogManager.java:25 import 'mod'=47
2022-05-07 08:10:06:764 grammar LogManager.java:25 import 'pub'=48
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '.'=53
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '::'=54
2022-05-07 08:10:06:764 grammar LogManager.java:25 import ':'=55
2022-05-07 08:10:06:764 grammar LogManager.java:25 import ';'=56
2022-05-07 08:10:06:764 grammar LogManager.java:25 import ','=57
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '!='=58
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '=='=59
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '!'=60
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '||'=61
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '|'=62
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '_'=63
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '&&'=64
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '='=65
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '>='=66
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '<='=67
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '>'=68
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '<'=69
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '*'=70
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '/'=71
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '+'=72
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '-'=73
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '%'=74
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '('=75
2022-05-07 08:10:06:764 grammar LogManager.java:25 import ')'=76
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '{'=77
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '}'=78
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '['=79
2022-05-07 08:10:06:764 grammar LogManager.java:25 import ']'=80
2022-05-07 08:10:06:764 grammar LogManager.java:25 import '&'=81
2022-05-07 08:10:06:765 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, ARRAY=11, AS=12, TRU=13, FAL=14, POWF=15, POW=16, PRINT=17, LET=18, MUT=19, FUNC=20, ARROW1=21, ARROW2=22, ABS=23, SQRT=24, TOSTR=25, TOOWN=26, CLONE=27, NEW=28, LEN=29, PUSH=30, REMOVE=31, CONTAINS=32, INSERT=33, CAPACITY=34, WCAPACITY=35, MAIN=36, IF=37, ELSE=38, MATCH=39, LOOP=40, WHILE=41, FOR=42, IN=43, BREAK=44, CONTINUE=45, RETURN=46, MODULE=47, PUB=48, NUMBER=49, STRING=50, ID=51, CHARACTER=52, PUNTO=53, C_PTS=54, D_PTS=55, PYC=56, COMA=57, DIFERENTE=58, IG_IG=59, NOT=60, OR=61, PLEC=62, UNDERSCORE=63, AND=64, IGUAL=65, MAYORIGUAL=66, MENORIGUAL=67, MAYOR=68, MENOR=69, MUL=70, DIV=71, ADD=72, SUB=73, MOD=74, PARIZQ=75, PARDER=76, LLAVEIZQ=77, LLAVEDER=78, CORIZQ=79, CORDER=80, AMP=81, WHITESPACE=82, COMMENT=83, LINE_COMMENT=84, 'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec!'=8, 'Vec'=9, 'struct'=10, 'array'=11, 'as'=12, 'true'=13, 'false'=14, 'powf'=15, 'pow'=16, 'println!'=17, 'let'=18, 'mut'=19, 'fn'=20, '->'=21, '=>'=22, 'abs()'=23, 'sqrt()'=24, 'to_string()'=25, 'to_owned()'=26, 'clone()'=27, 'new'=28, 'len'=29, 'push'=30, 'remove'=31, 'contains'=32, 'insert'=33, 'capacity'=34, 'with_capacity'=35, 'main'=36, 'if'=37, 'else'=38, 'match'=39, 'loop'=40, 'while'=41, 'for'=42, 'in'=43, 'break'=44, 'continue'=45, 'return'=46, 'mod'=47, 'pub'=48, '.'=53, '::'=54, ':'=55, ';'=56, ','=57, '!='=58, '=='=59, '!'=60, '||'=61, '|'=62, '_'=63, '&&'=64, '='=65, '>='=66, '<='=67, '>'=68, '<'=69, '*'=70, '/'=71, '+'=72, '-'=73, '%'=74, '('=75, ')'=76, '{'=77, '}'=78, '['=79, ']'=80, '&'=81}
2022-05-07 08:10:06:766 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, CHAR=4, STR1=5, STR2=6, USIZE=7, VECTOR1=8, VECTOR2=9, STRUCT=10, ARRAY=11, AS=12, TRU=13, FAL=14, POWF=15, POW=16, PRINT=17, LET=18, MUT=19, FUNC=20, ARROW1=21, ARROW2=22, ABS=23, SQRT=24, TOSTR=25, TOOWN=26, CLONE=27, NEW=28, LEN=29, PUSH=30, REMOVE=31, CONTAINS=32, INSERT=33, CAPACITY=34, WCAPACITY=35, MAIN=36, IF=37, ELSE=38, MATCH=39, LOOP=40, WHILE=41, FOR=42, IN=43, BREAK=44, CONTINUE=45, RETURN=46, MODULE=47, PUB=48, NUMBER=49, STRING=50, ID=51, CHARACTER=52, PUNTO=53, C_PTS=54, D_PTS=55, PYC=56, COMA=57, DIFERENTE=58, IG_IG=59, NOT=60, OR=61, PLEC=62, UNDERSCORE=63, AND=64, IGUAL=65, MAYORIGUAL=66, MENORIGUAL=67, MAYOR=68, MENOR=69, MUL=70, DIV=71, ADD=72, SUB=73, MOD=74, PARIZQ=75, PARDER=76, LLAVEIZQ=77, LLAVEDER=78, CORIZQ=79, CORDER=80, AMP=81, WHITESPACE=82, COMMENT=83, LINE_COMMENT=84}
2022-05-07 08:10:06:766 semantics LogManager.java:25 strings={'i64'=1, 'f64'=2, 'bool'=3, 'char'=4, 'String'=5, '&str'=6, 'usize'=7, 'vec!'=8, 'Vec'=9, 'struct'=10, 'array'=11, 'as'=12, 'true'=13, 'false'=14, 'powf'=15, 'pow'=16, 'println!'=17, 'let'=18, 'mut'=19, 'fn'=20, '->'=21, '=>'=22, 'abs()'=23, 'sqrt()'=24, 'to_string()'=25, 'to_owned()'=26, 'clone()'=27, 'new'=28, 'len'=29, 'push'=30, 'remove'=31, 'contains'=32, 'insert'=33, 'capacity'=34, 'with_capacity'=35, 'main'=36, 'if'=37, 'else'=38, 'match'=39, 'loop'=40, 'while'=41, 'for'=42, 'in'=43, 'break'=44, 'continue'=45, 'return'=46, 'mod'=47, 'pub'=48, '.'=53, '::'=54, ':'=55, ';'=56, ','=57, '!='=58, '=='=59, '!'=60, '||'=61, '|'=62, '_'=63, '&&'=64, '='=65, '>='=66, '<='=67, '>'=68, '<'=69, '*'=70, '/'=71, '+'=72, '-'=73, '%'=74, '('=75, ')'=76, '{'=77, '}'=78, '['=79, ']'=80, '&'=81}
2022-05-07 08:10:06:852 LL1 LogManager.java:25 
DECISION 0 in rule start
2022-05-07 08:10:06:852 LL1 LogManager.java:25 look=[{10, 18, 20, 47}, 20]
2022-05-07 08:10:06:852 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:852 LL1 LogManager.java:25 
DECISION 1 in rule start
2022-05-07 08:10:06:852 LL1 LogManager.java:25 look=[{10, 18, 20, 47}, <EOF>]
2022-05-07 08:10:06:852 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:852 LL1 LogManager.java:25 
DECISION 2 in rule global_env
2022-05-07 08:10:06:852 LL1 LogManager.java:25 look=[18, 20, 47, 10]
2022-05-07 08:10:06:852 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:852 LL1 LogManager.java:25 
DECISION 3 in rule moduleContent
2022-05-07 08:10:06:852 LL1 LogManager.java:25 look=[48, 48, 47, {10, 20}]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 4 in rule moduleContent
2022-05-07 08:10:06:853 LL1 LogManager.java:25 look=[null, null, null, null]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 5 in rule moduleContent
2022-05-07 08:10:06:853 LL1 LogManager.java:25 look=[null, 78]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 6 in rule moduleAction
2022-05-07 08:10:06:853 LL1 LogManager.java:25 look=[20, 10]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 7 in rule instructions
2022-05-07 08:10:06:853 LL1 LogManager.java:25 look=[{10, 17..18, 37, 39..42, 44..46, 51}, <EOF>]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2022-05-07 08:10:06:853 LL1 LogManager.java:25 look=[17, 18, 51, 37, 39, 41, 40, 42, 44, 45, 46, 10, 51]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 9 in rule insVectors
2022-05-07 08:10:06:853 LL1 LogManager.java:25 look=[51, 51]
2022-05-07 08:10:06:853 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:853 LL1 LogManager.java:25 
DECISION 10 in rule listParamsCall
2022-05-07 08:10:06:854 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, 81, null]
2022-05-07 08:10:06:855 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:855 LL1 LogManager.java:25 
DECISION 11 in rule listParamsCall
2022-05-07 08:10:06:855 LL1 LogManager.java:25 look=[null, null]
2022-05-07 08:10:06:855 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:855 LL1 LogManager.java:25 
DECISION 12 in rule listParamsCall
2022-05-07 08:10:06:855 LL1 LogManager.java:25 look=[null, 76]
2022-05-07 08:10:06:855 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:855 LL1 LogManager.java:25 
DECISION 13 in rule transBreak
2022-05-07 08:10:06:855 LL1 LogManager.java:25 look=[44, 44]
2022-05-07 08:10:06:855 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:855 LL1 LogManager.java:25 
DECISION 14 in rule transReturn
2022-05-07 08:10:06:855 LL1 LogManager.java:25 look=[46, 46, 46, 46]
2022-05-07 08:10:06:855 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:855 LL1 LogManager.java:25 
DECISION 15 in rule condIf
2022-05-07 08:10:06:855 LL1 LogManager.java:25 look=[38, null]
2022-05-07 08:10:06:855 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:855 LL1 LogManager.java:25 
DECISION 16 in rule condElse
2022-05-07 08:10:06:856 LL1 LogManager.java:25 look=[38, null]
2022-05-07 08:10:06:856 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:856 LL1 LogManager.java:25 
DECISION 17 in rule block
2022-05-07 08:10:06:856 LL1 LogManager.java:25 look=[{10, 17..18, 37, 39..42, 44..46, 51}, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-05-07 08:10:06:856 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:856 LL1 LogManager.java:25 
DECISION 18 in rule block
2022-05-07 08:10:06:856 LL1 LogManager.java:25 look=[null, null]
2022-05-07 08:10:06:856 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:856 LL1 LogManager.java:25 
DECISION 19 in rule block
2022-05-07 08:10:06:856 LL1 LogManager.java:25 look=[null, {57, 78}]
2022-05-07 08:10:06:856 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:856 LL1 LogManager.java:25 
DECISION 20 in rule condMatch
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, {63, 78}]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 21 in rule listArms
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[{1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 22 in rule listMatch
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[null, 22]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 23 in rule defaultArm
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[63, 63, 78]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 24 in rule declaration
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[18, 18, 18, 18, 18, 18, 18]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 25 in rule vectDeclaration
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[18, 18, 18, 18, 18, 18]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 26 in rule typeVect
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[9, 9, 9]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 27 in rule listStructDec
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[51, 51, 51]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 28 in rule listStructDec
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[null, null, null]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 29 in rule listStructDec
2022-05-07 08:10:06:858 LL1 LogManager.java:25 look=[null, 78]
2022-05-07 08:10:06:858 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:858 LL1 LogManager.java:25 
DECISION 30 in rule assignment
2022-05-07 08:10:06:859 LL1 LogManager.java:25 look=[51, 51, 51, 51]
2022-05-07 08:10:06:859 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:859 LL1 LogManager.java:25 
DECISION 31 in rule listArrStr
2022-05-07 08:10:06:859 LL1 LogManager.java:25 look=[null, 65]
2022-05-07 08:10:06:859 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:859 LL1 LogManager.java:25 
DECISION 32 in rule listAccessStruct
2022-05-07 08:10:06:859 LL1 LogManager.java:25 look=[null, 65]
2022-05-07 08:10:06:859 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:859 LL1 LogManager.java:25 
DECISION 33 in rule listAccessArray
2022-05-07 08:10:06:859 LL1 LogManager.java:25 look=[null, 65]
2022-05-07 08:10:06:859 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:859 LL1 LogManager.java:25 
DECISION 34 in rule arrayType
2022-05-07 08:10:06:859 LL1 LogManager.java:25 look=[79, 79, 79, 79]
2022-05-07 08:10:06:859 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:859 LL1 LogManager.java:25 
DECISION 35 in rule function
2022-05-07 08:10:06:859 LL1 LogManager.java:25 look=[20, 20, 20, 20]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 36 in rule listParamsFunc
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[55, {51, 81}]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 37 in rule listParamsFunc
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[81, 51]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 38 in rule listParamsFunc
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[51, 51, 51, 51, 51, 51, 51, 51, 51, null]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 39 in rule listParamsFunc
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 40 in rule listParamsFunc
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[null, 76]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 41 in rule types
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5, 6, 8, 10, 7, 11]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 42 in rule listParams
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[null, {76, 80}]
2022-05-07 08:10:06:863 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:863 LL1 LogManager.java:25 
DECISION 43 in rule callFunction
2022-05-07 08:10:06:863 LL1 LogManager.java:25 look=[51, 51]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:864 LL1 LogManager.java:25 
DECISION 44 in rule expression
2022-05-07 08:10:06:864 LL1 LogManager.java:25 look=[null, null]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:864 LL1 LogManager.java:25 
DECISION 45 in rule expr_arit
2022-05-07 08:10:06:864 LL1 LogManager.java:25 look=[73, {1..8, 10..11}, {1..8, 10..11}, 51, 51, 51, 60, {8..9}, 79, 51, {13..14, 49..52}, 75, 51, 51, 51, 51, 37, 39, 40, 81]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:864 LL1 LogManager.java:25 
DECISION 46 in rule expr_arit
2022-05-07 08:10:06:864 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null, null, null, null, null, null]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:864 LL1 LogManager.java:25 
DECISION 47 in rule expr_arit
2022-05-07 08:10:06:864 LL1 LogManager.java:25 look=[null, null]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:864 LL1 LogManager.java:25 
DECISION 48 in rule primitive
2022-05-07 08:10:06:864 LL1 LogManager.java:25 look=[49, 50, 52, 13, 14, 51]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? true
2022-05-07 08:10:06:864 LL1 LogManager.java:25 
DECISION 49 in rule listArray
2022-05-07 08:10:06:864 LL1 LogManager.java:25 look=[null, null]
2022-05-07 08:10:06:864 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:865 LL1 LogManager.java:25 
DECISION 50 in rule listArray
2022-05-07 08:10:06:865 LL1 LogManager.java:25 look=[null, null]
2022-05-07 08:10:06:865 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:865 LL1 LogManager.java:25 
DECISION 51 in rule listStructExp
2022-05-07 08:10:06:865 LL1 LogManager.java:25 look=[null, 78]
2022-05-07 08:10:06:865 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:865 LL1 LogManager.java:25 
DECISION 52 in rule expVectors
2022-05-07 08:10:06:865 LL1 LogManager.java:25 look=[8, 8, 9, 9]
2022-05-07 08:10:06:865 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:865 LL1 LogManager.java:25 
DECISION 53 in rule listIdMod
2022-05-07 08:10:06:865 LL1 LogManager.java:25 look=[null, {1..11, 13..14, 37, 39..40, 49..52, 60, 73, 75, 79, 81}]
2022-05-07 08:10:06:865 LL1 LogManager.java:25 LL(1)? false
2022-05-07 08:10:06:889 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-05-07 08:10:06:968 action-translator LogManager.java:25 translate 
        global := arrayList.New()
        listInt := localctx.(*StartContext).GetE()
        for _, e := range listInt {
            global.Add(e.GetHi())
        }
        $code = environment.NewCode($main.mainInst, global)
    
2022-05-07 08:10:06:968 action-translator LogManager.java:25 attr [@-1,181:184='code',<0>,24:9]
2022-05-07 08:10:06:969 action-translator LogManager.java:25 qattr [@-1,209:212='main',<0>,24:37].[@-1,214:221='mainInst',<0>,24:42]
2022-05-07 08:10:06:971 action-translator LogManager.java:25 translate  $hi = $declaration.dec 
2022-05-07 08:10:06:971 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,29:20]
2022-05-07 08:10:06:971 action-translator LogManager.java:25 qattr [@-1,8:18='declaration',<0>,29:26].[@-1,20:22='dec',<0>,29:38]
2022-05-07 08:10:06:971 action-translator LogManager.java:25 translate  $hi = $function.fun 
2022-05-07 08:10:06:972 action-translator LogManager.java:25 attr [@-1,2:3='hi',<0>,30:13]
2022-05-07 08:10:06:972 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,30:19].[@-1,17:19='fun',<0>,30:28]
2022-05-07 08:10:06:972 action-translator LogManager.java:25 translate   
2022-05-07 08:10:06:972 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:973 action-translator LogManager.java:25 translate   
2022-05-07 08:10:06:974 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:975 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:975 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:975 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:975 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:976 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-05-07 08:10:06:976 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:976 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-05-07 08:10:06:976 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:976 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-05-07 08:10:06:976 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:977 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-07 08:10:06:977 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2022-05-07 08:10:06:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2022-05-07 08:10:06:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-05-07 08:10:06:978 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-07 08:10:06:979 action-translator LogManager.java:25 translate  $ma = $function.fun 
2022-05-07 08:10:06:979 action-translator LogManager.java:25 attr [@-1,2:3='ma',<0>,51:13]
2022-05-07 08:10:06:979 action-translator LogManager.java:25 qattr [@-1,8:15='function',<0>,51:19].[@-1,17:19='fun',<0>,51:28]
2022-05-07 08:10:06:979 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:980 action-translator LogManager.java:25 translate  $mainInst = $block.blk 
2022-05-07 08:10:06:980 action-translator LogManager.java:25 attr [@-1,2:9='mainInst',<0>,57:52]
2022-05-07 08:10:06:980 action-translator LogManager.java:25 qattr [@-1,14:18='block',<0>,57:64].[@-1,20:22='blk',<0>,57:70]
2022-05-07 08:10:06:981 action-translator LogManager.java:25 translate 
    $insts = arrayList.New()
  
2022-05-07 08:10:06:981 action-translator LogManager.java:25 attr [@-1,7:11='insts',<0>,62:5]
2022-05-07 08:10:06:981 action-translator LogManager.java:25 translate 
        listInt := localctx.(*InstructionsContext).GetE()
        for _, e := range listInt {
            $insts.Add(e.GetInst())
        }
    
2022-05-07 08:10:06:981 action-translator LogManager.java:25 attr [@-1,111:115='insts',<0>,68:13]
2022-05-07 08:10:06:983 action-translator LogManager.java:25 translate  $inst = $impression.pr 
2022-05-07 08:10:06:983 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,74:19]
2022-05-07 08:10:06:983 action-translator LogManager.java:25 qattr [@-1,10:19='impression',<0>,74:27].[@-1,21:22='pr',<0>,74:38]
2022-05-07 08:10:06:983 action-translator LogManager.java:25 translate  $inst = $declaration.dec 
2022-05-07 08:10:06:983 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,75:20]
2022-05-07 08:10:06:983 action-translator LogManager.java:25 qattr [@-1,10:20='declaration',<0>,75:28].[@-1,22:24='dec',<0>,75:40]
2022-05-07 08:10:06:984 action-translator LogManager.java:25 translate  $inst = $assignment.ass 
2022-05-07 08:10:06:984 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,76:19]
2022-05-07 08:10:06:984 action-translator LogManager.java:25 qattr [@-1,10:19='assignment',<0>,76:27].[@-1,21:23='ass',<0>,76:38]
2022-05-07 08:10:06:984 action-translator LogManager.java:25 translate  $inst = $condIf.ifCond 
2022-05-07 08:10:06:984 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,77:11]
2022-05-07 08:10:06:984 action-translator LogManager.java:25 qattr [@-1,10:15='condIf',<0>,77:19].[@-1,17:22='ifCond',<0>,77:26]
2022-05-07 08:10:06:984 action-translator LogManager.java:25 translate  $inst = $condMatch.mtch 
2022-05-07 08:10:06:984 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,78:14]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 qattr [@-1,10:18='condMatch',<0>,78:22].[@-1,20:23='mtch',<0>,78:32]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 translate  $inst = $loopWhile.lw 
2022-05-07 08:10:06:985 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,79:14]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 qattr [@-1,10:18='loopWhile',<0>,79:22].[@-1,20:21='lw',<0>,79:32]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 translate  $inst = $loopBucle.lb 
2022-05-07 08:10:06:985 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,80:14]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 qattr [@-1,10:18='loopBucle',<0>,80:22].[@-1,20:21='lb',<0>,80:32]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 translate  $inst = $loopForin.lfi 
2022-05-07 08:10:06:985 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,81:14]
2022-05-07 08:10:06:985 action-translator LogManager.java:25 qattr [@-1,10:18='loopForin',<0>,81:22].[@-1,20:22='lfi',<0>,81:32]
2022-05-07 08:10:06:986 action-translator LogManager.java:25 translate  $inst = $transBreak.brk 
2022-05-07 08:10:06:986 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,82:19]
2022-05-07 08:10:06:986 action-translator LogManager.java:25 qattr [@-1,10:19='transBreak',<0>,82:27].[@-1,21:23='brk',<0>,82:38]
2022-05-07 08:10:06:986 action-translator LogManager.java:25 translate  $inst = $transContinue.cnt 
2022-05-07 08:10:06:986 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,83:22]
2022-05-07 08:10:06:986 action-translator LogManager.java:25 qattr [@-1,10:22='transContinue',<0>,83:30].[@-1,24:26='cnt',<0>,83:44]
2022-05-07 08:10:06:986 action-translator LogManager.java:25 translate  $inst = $transReturn.rt 
2022-05-07 08:10:06:986 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,84:16]
2022-05-07 08:10:06:986 action-translator LogManager.java:25 qattr [@-1,10:20='transReturn',<0>,84:24].[@-1,22:23='rt',<0>,84:36]
2022-05-07 08:10:06:987 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2022-05-07 08:10:06:987 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,85:19]
2022-05-07 08:10:06:987 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,85:27].[@-1,25:27='dec',<0>,85:42]
2022-05-07 08:10:06:987 action-translator LogManager.java:25 translate  $inst = $insVectors.iv 
2022-05-07 08:10:06:987 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,86:19]
2022-05-07 08:10:06:987 action-translator LogManager.java:25 qattr [@-1,10:19='insVectors',<0>,86:27].[@-1,21:22='iv',<0>,86:38]
2022-05-07 08:10:06:988 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:989 action-translator LogManager.java:25 translate  
2022-05-07 08:10:06:989 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:990 action-translator LogManager.java:25 translate 
                 ByRef := environment.NewByReference($expression.p, false)
                 $l = arrayList.New()
                 $l.Add(ByRef)
              
2022-05-07 08:10:06:990 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,3:54].[@-1,67:67='p',<0>,3:65]
2022-05-07 08:10:06:990 action-translator LogManager.java:25 attr [@-1,96:96='l',<0>,4:18]
2022-05-07 08:10:06:990 action-translator LogManager.java:25 attr [@-1,135:135='l',<0>,5:18]
2022-05-07 08:10:06:991 action-translator LogManager.java:25 translate 
                        ByRef := environment.NewByReference($expression.p, true)
                        $l = arrayList.New()
                        $l.Add(ByRef)
                     
2022-05-07 08:10:06:991 action-translator LogManager.java:25 qattr [@-1,63:72='expression',<0>,8:61].[@-1,74:74='p',<0>,8:72]
2022-05-07 08:10:06:991 action-translator LogManager.java:25 attr [@-1,109:109='l',<0>,9:25]
2022-05-07 08:10:06:991 action-translator LogManager.java:25 attr [@-1,155:155='l',<0>,10:25]
2022-05-07 08:10:06:991 action-translator LogManager.java:25 translate 
          $l = arrayList.New()
       
2022-05-07 08:10:06:991 action-translator LogManager.java:25 attr [@-1,13:13='l',<0>,13:11]
2022-05-07 08:10:06:991 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-07 08:10:06:992 action-translator LogManager.java:25 translate 
                                                   ByRef := environment.NewByReference($expression.p, false)
                                                   $list.l.Add(ByRef);
                                                   $l = $list.l;
                                                
2022-05-07 08:10:06:992 action-translator LogManager.java:25 qattr [@-1,90:99='expression',<0>,18:88].[@-1,101:101='p',<0>,18:99]
2022-05-07 08:10:06:992 action-translator LogManager.java:25 qattr [@-1,164:167='list',<0>,19:52].[@-1,169:169='l',<0>,19:57]
2022-05-07 08:10:06:992 action-translator LogManager.java:25 setAttr [@-1,236:236='l',<0>,20:52] [@-1,239:246=' $list.l',<0>,20:55]
2022-05-07 08:10:06:992 action-translator LogManager.java:25 translate  $list.l
2022-05-07 08:10:06:992 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,17:107].[@-1,7:7='l',<0>,17:112]
2022-05-07 08:10:06:993 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-07 08:10:06:993 action-translator LogManager.java:25 translate 
                                                      ByRef := environment.NewByReference($expression.p, true)
                                                      $list.l.Add(ByRef);
                                                      $l = $list.l;
                                                   
2022-05-07 08:10:06:993 action-translator LogManager.java:25 qattr [@-1,93:102='expression',<0>,23:91].[@-1,104:104='p',<0>,23:102]
2022-05-07 08:10:06:993 action-translator LogManager.java:25 qattr [@-1,169:172='list',<0>,24:55].[@-1,174:174='l',<0>,24:60]
2022-05-07 08:10:06:993 action-translator LogManager.java:25 setAttr [@-1,244:244='l',<0>,25:55] [@-1,247:254=' $list.l',<0>,25:58]
2022-05-07 08:10:06:994 action-translator LogManager.java:25 translate  $list.l
2022-05-07 08:10:06:994 action-translator LogManager.java:25 qattr [@-1,2:5='list',<0>,22:158].[@-1,7:7='l',<0>,22:163]
2022-05-07 08:10:06:994 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-07 08:10:06:994 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-07 08:10:06:995 action-translator LogManager.java:25 translate  $lw = instructions.NewWhile($WHILE.line, $WHILE.pos, $expression.p, $block.blk ) 
2022-05-07 08:10:06:995 action-translator LogManager.java:25 attr [@-1,2:3='lw',<0>,121:45]
2022-05-07 08:10:06:995 action-translator LogManager.java:25 qattr [@-1,30:34='WHILE',<0>,121:73].[@-1,36:39='line',<0>,121:79]
2022-05-07 08:10:06:996 action-translator LogManager.java:25 qattr [@-1,43:47='WHILE',<0>,121:86].[@-1,49:51='pos',<0>,121:92]
2022-05-07 08:10:06:996 action-translator LogManager.java:25 qattr [@-1,55:64='expression',<0>,121:98].[@-1,66:66='p',<0>,121:109]
2022-05-07 08:10:06:996 action-translator LogManager.java:25 qattr [@-1,70:74='block',<0>,121:113].[@-1,76:78='blk',<0>,121:119]
2022-05-07 08:10:06:996 action-translator LogManager.java:25 translate 
2022-05-07 08:10:06:997 action-translator LogManager.java:25 translate  $lfi = instructions.NewForIn($FOR.line, $FOR.pos, $ID.text, $expression.p, $block.blk) 
2022-05-07 08:10:06:997 action-translator LogManager.java:25 attr [@-1,2:4='lfi',<0>,129:49]
2022-05-07 08:10:06:997 action-translator LogManager.java:25 qattr [@-1,31:33='FOR',<0>,129:78].[@-1,35:38='line',<0>,129:82]
2022-05-07 08:10:06:997 action-translator LogManager.java:25 qattr [@-1,42:44='FOR',<0>,129:89].[@-1,46:48='pos',<0>,129:93]
2022-05-07 08:10:06:997 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,129:99].[@-1,55:58='text',<0>,129:102]
2022-05-07 08:10:06:997 action-translator LogManager.java:25 qattr [@-1,62:71='expression',<0>,129:109].[@-1,73:73='p',<0>,129:120]
2022-05-07 08:10:06:997 action-translator LogManager.java:25 qattr [@-1,77:81='block',<0>,129:124].[@-1,83:85='blk',<0>,129:130]
2022-05-07 08:10:06:998 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, $expression.p) 
2022-05-07 08:10:06:998 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,133:21]
2022-05-07 08:10:06:998 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,133:50].[@-1,37:40='line',<0>,133:56]
2022-05-07 08:10:06:998 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,133:63].[@-1,50:52='pos',<0>,133:69]
2022-05-07 08:10:06:998 action-translator LogManager.java:25 qattr [@-1,56:65='expression',<0>,133:75].[@-1,67:67='p',<0>,133:86]
2022-05-07 08:10:06:999 action-translator LogManager.java:25 translate  $brk = instructions.NewBreak($BREAK.line, $BREAK.pos, nil) 
2022-05-07 08:10:06:999 action-translator LogManager.java:25 attr [@-1,2:4='brk',<0>,134:10]
2022-05-07 08:10:06:999 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,134:39].[@-1,37:40='line',<0>,134:45]
2022-05-07 08:10:06:999 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,134:52].[@-1,50:52='pos',<0>,134:58]
2022-05-07 08:10:06:999 action-translator LogManager.java:25 translate  $cnt = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos) 
2022-05-07 08:10:06:999 action-translator LogManager.java:25 attr [@-1,2:4='cnt',<0>,138:13]
2022-05-07 08:10:06:999 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,138:45].[@-1,43:46='line',<0>,138:54]
2022-05-07 08:10:07:000 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,138:61].[@-1,59:61='pos',<0>,138:70]
2022-05-07 08:10:07:000 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:000 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:001 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:001 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:002 action-translator LogManager.java:25 translate 
            elif := arrayList.New()
            listElif := localctx.(*CondIfContext).GetE()
            for _, e := range listElif {
                elif.Add(e.GetElif())
            }
            $ifCond = instructions.NewIf($IF.line, $IF.pos, $expression.p, $block.blk, elif, $condElse.blkelse)
            
2022-05-07 08:10:07:002 action-translator LogManager.java:25 attr [@-1,206:211='ifCond',<0>,155:13]
2022-05-07 08:10:07:002 action-translator LogManager.java:25 qattr [@-1,235:236='IF',<0>,155:42].[@-1,238:241='line',<0>,155:45]
2022-05-07 08:10:07:002 action-translator LogManager.java:25 qattr [@-1,245:246='IF',<0>,155:52].[@-1,248:250='pos',<0>,155:55]
2022-05-07 08:10:07:002 action-translator LogManager.java:25 qattr [@-1,254:263='expression',<0>,155:61].[@-1,265:265='p',<0>,155:72]
2022-05-07 08:10:07:002 action-translator LogManager.java:25 qattr [@-1,269:273='block',<0>,155:76].[@-1,275:277='blk',<0>,155:82]
2022-05-07 08:10:07:002 action-translator LogManager.java:25 qattr [@-1,287:294='condElse',<0>,155:94].[@-1,296:302='blkelse',<0>,155:103]
2022-05-07 08:10:07:003 action-translator LogManager.java:25 translate 
    elif := arrayList.New()
    condelse := arrayList.New()
    $elif = instructions.NewIf($ELSE.line, $ELSE.pos, $expression.p, $block.blk, elif, condelse)
    
2022-05-07 08:10:07:003 action-translator LogManager.java:25 attr [@-1,69:72='elif',<0>,163:5]
2022-05-07 08:10:07:003 action-translator LogManager.java:25 qattr [@-1,96:99='ELSE',<0>,163:32].[@-1,101:104='line',<0>,163:37]
2022-05-07 08:10:07:003 action-translator LogManager.java:25 qattr [@-1,108:111='ELSE',<0>,163:44].[@-1,113:115='pos',<0>,163:49]
2022-05-07 08:10:07:003 action-translator LogManager.java:25 qattr [@-1,119:128='expression',<0>,163:55].[@-1,130:130='p',<0>,163:66]
2022-05-07 08:10:07:003 action-translator LogManager.java:25 qattr [@-1,134:138='block',<0>,163:70].[@-1,140:142='blk',<0>,163:76]
2022-05-07 08:10:07:004 action-translator LogManager.java:25 translate  $blkelse = $block.blk 
2022-05-07 08:10:07:004 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,168:33]
2022-05-07 08:10:07:004 action-translator LogManager.java:25 qattr [@-1,13:17='block',<0>,168:44].[@-1,19:21='blk',<0>,168:50]
2022-05-07 08:10:07:004 action-translator LogManager.java:25 translate  $blkelse = arrayList.New() 
2022-05-07 08:10:07:004 action-translator LogManager.java:25 attr [@-1,2:8='blkelse',<0>,169:4]
2022-05-07 08:10:07:005 action-translator LogManager.java:25 translate 
    $blk = arrayList.New()
  
2022-05-07 08:10:07:005 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,174:5]
2022-05-07 08:10:07:005 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:005 action-translator LogManager.java:25 translate  $blk.Add($instruction.inst) 
2022-05-07 08:10:07:005 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,2:43]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,11:21='instruction',<0>,2:52].[@-1,23:26='inst',<0>,2:64]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 translate  $blk.Add($expression.p) 
2022-05-07 08:10:07:006 action-translator LogManager.java:25 attr [@-1,2:4='blk',<0>,3:39]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,11:20='expression',<0>,3:48].[@-1,22:22='p',<0>,3:59]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-07 08:10:07:006 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($instruction.inst)
                                      $blk = $bloque.blk
                                      
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,7:39].[@-1,48:50='blk',<0>,7:46]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,57:67='instruction',<0>,7:55].[@-1,69:72='inst',<0>,7:67]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 attr [@-1,115:117='blk',<0>,8:39]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,122:127='bloque',<0>,8:46].[@-1,129:131='blk',<0>,8:53]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-05-07 08:10:07:006 action-translator LogManager.java:25 translate 
                                      $bloque.blk.Add($expression.p)
                                      $blk = $bloque.blk
                                     
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,41:46='bloque',<0>,11:39].[@-1,48:50='blk',<0>,11:46]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 qattr [@-1,57:66='expression',<0>,11:55].[@-1,68:68='p',<0>,11:66]
2022-05-07 08:10:07:006 action-translator LogManager.java:25 attr [@-1,111:113='blk',<0>,12:39]
2022-05-07 08:10:07:007 action-translator LogManager.java:25 qattr [@-1,118:123='bloque',<0>,12:46].[@-1,125:127='blk',<0>,12:53]
2022-05-07 08:10:07:007 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-07 08:10:07:007 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-05-07 08:10:07:007 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:008 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:008 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:009 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:009 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:009 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:009 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:009 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:010 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-05-07 08:10:07:010 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,203:33]
2022-05-07 08:10:07:010 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,203:41].[@-1,16:18='blk',<0>,203:47]
2022-05-07 08:10:07:010 action-translator LogManager.java:25 translate  $defa = $block.blk 
2022-05-07 08:10:07:010 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,204:51]
2022-05-07 08:10:07:010 action-translator LogManager.java:25 qattr [@-1,10:14='block',<0>,204:59].[@-1,16:18='blk',<0>,204:65]
2022-05-07 08:10:07:010 action-translator LogManager.java:25 translate  $defa = arrayList.New() 
2022-05-07 08:10:07:010 action-translator LogManager.java:25 attr [@-1,2:5='defa',<0>,205:4]
2022-05-07 08:10:07:011 action-translator LogManager.java:25 translate  $pr = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l) 
2022-05-07 08:10:07:011 action-translator LogManager.java:25 attr [@-1,2:3='pr',<0>,209:35]
2022-05-07 08:10:07:011 action-translator LogManager.java:25 qattr [@-1,30:34='PRINT',<0>,209:63].[@-1,36:39='line',<0>,209:69]
2022-05-07 08:10:07:011 action-translator LogManager.java:25 qattr [@-1,42:46='PRINT',<0>,209:75].[@-1,48:50='pos',<0>,209:81]
2022-05-07 08:10:07:011 action-translator LogManager.java:25 qattr [@-1,53:62='listParams',<0>,209:86].[@-1,64:64='l',<0>,209:97]
2022-05-07 08:10:07:012 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, $types.ty, $expression.p, true) 
2022-05-07 08:10:07:012 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,213:46]
2022-05-07 08:10:07:012 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,213:81].[@-1,41:44='line',<0>,213:85]
2022-05-07 08:10:07:012 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,213:91].[@-1,51:53='pos',<0>,213:95]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,213:100].[@-1,59:62='text',<0>,213:103]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,66:70='types',<0>,213:110].[@-1,72:73='ty',<0>,213:116]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,77:86='expression',<0>,213:121].[@-1,88:88='p',<0>,213:132]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.WILDCARD, $expression.p, true) 
2022-05-07 08:10:07:013 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,214:46]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,214:81].[@-1,41:44='line',<0>,214:85]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,214:91].[@-1,51:53='pos',<0>,214:95]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,214:100].[@-1,59:62='text',<0>,214:103]
2022-05-07 08:10:07:013 action-translator LogManager.java:25 qattr [@-1,88:97='expression',<0>,214:132].[@-1,99:99='p',<0>,214:143]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, $types.ty, $expression.p, false) 
2022-05-07 08:10:07:014 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,215:46]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,215:81].[@-1,41:44='line',<0>,215:85]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,215:91].[@-1,51:53='pos',<0>,215:95]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,215:100].[@-1,59:62='text',<0>,215:103]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 qattr [@-1,66:70='types',<0>,215:110].[@-1,72:73='ty',<0>,215:116]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 qattr [@-1,77:86='expression',<0>,215:121].[@-1,88:88='p',<0>,215:132]
2022-05-07 08:10:07:014 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.WILDCARD, $expression.p, false) 
2022-05-07 08:10:07:015 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,216:46]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,216:81].[@-1,41:44='line',<0>,216:85]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,216:91].[@-1,51:53='pos',<0>,216:95]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,216:100].[@-1,59:62='text',<0>,216:103]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 qattr [@-1,88:97='expression',<0>,216:132].[@-1,99:99='p',<0>,216:143]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.ARRAY, $expression.p, true) 
2022-05-07 08:10:07:015 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,217:48]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,217:83].[@-1,41:44='line',<0>,217:87]
2022-05-07 08:10:07:015 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,217:93].[@-1,51:53='pos',<0>,217:97]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,217:102].[@-1,59:62='text',<0>,217:105]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 qattr [@-1,85:94='expression',<0>,217:131].[@-1,96:96='p',<0>,217:142]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line,$LET.pos,$ID.text, environment.ARRAY, $expression.p, false) 
2022-05-07 08:10:07:016 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,218:46]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,218:81].[@-1,41:44='line',<0>,218:85]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 qattr [@-1,47:49='LET',<0>,218:91].[@-1,51:53='pos',<0>,218:95]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,218:100].[@-1,59:62='text',<0>,218:103]
2022-05-07 08:10:07:016 action-translator LogManager.java:25 qattr [@-1,85:94='expression',<0>,218:129].[@-1,96:96='p',<0>,218:140]
2022-05-07 08:10:07:017 action-translator LogManager.java:25 translate  $dec = $vectDeclaration.vec 
2022-05-07 08:10:07:017 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,219:20]
2022-05-07 08:10:07:017 action-translator LogManager.java:25 qattr [@-1,9:23='vectDeclaration',<0>,219:27].[@-1,25:27='vec',<0>,219:43]
2022-05-07 08:10:07:019 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:019 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:019 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:019 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:019 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:019 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:020 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:021 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:021 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:022 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:022 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:022 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-05-07 08:10:07:022 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:022 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-07 08:10:07:022 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-07 08:10:07:023 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2022-05-07 08:10:07:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 5)
2022-05-07 08:10:07:023 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-05-07 08:10:07:024 action-translator LogManager.java:25 translate  $ass = instructions.NewAssignment($ID.line, $ID.pos, $ID.text, $expression.p)
2022-05-07 08:10:07:024 action-translator LogManager.java:25 attr [@-1,2:4='ass',<0>,254:24]
2022-05-07 08:10:07:024 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,254:58].[@-1,39:42='line',<0>,254:61]
2022-05-07 08:10:07:025 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,254:68].[@-1,49:51='pos',<0>,254:71]
2022-05-07 08:10:07:025 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,254:77].[@-1,58:61='text',<0>,254:80]
2022-05-07 08:10:07:025 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,254:87].[@-1,76:76='p',<0>,254:98]
2022-05-07 08:10:07:025 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:025 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:025 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:026 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:027 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:027 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:027 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:027 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:027 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:027 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:028 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:028 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:028 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:029 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:030 action-translator LogManager.java:25 translate 
                        $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, "")
                        
2022-05-07 08:10:07:030 action-translator LogManager.java:25 attr [@-1,27:29='fun',<0>,284:25]
2022-05-07 08:10:07:030 action-translator LogManager.java:25 qattr [@-1,59:62='FUNC',<0>,284:57].[@-1,64:67='line',<0>,284:62]
2022-05-07 08:10:07:031 action-translator LogManager.java:25 qattr [@-1,71:74='FUNC',<0>,284:69].[@-1,76:78='pos',<0>,284:74]
2022-05-07 08:10:07:031 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,284:80].[@-1,85:88='text',<0>,284:83]
2022-05-07 08:10:07:031 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,284:90].[@-1,107:109='lpf',<0>,284:105]
2022-05-07 08:10:07:032 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,284:133].[@-1,141:143='blk',<0>,284:139]
2022-05-07 08:10:07:032 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk, "")
                       
2022-05-07 08:10:07:032 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,287:24]
2022-05-07 08:10:07:032 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,287:56].[@-1,63:66='line',<0>,287:61]
2022-05-07 08:10:07:032 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,287:68].[@-1,75:77='pos',<0>,287:73]
2022-05-07 08:10:07:032 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,287:79].[@-1,84:87='text',<0>,287:82]
2022-05-07 08:10:07:032 action-translator LogManager.java:25 qattr [@-1,91:104='listParamsFunc',<0>,287:89].[@-1,106:108='lpf',<0>,287:104]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 qattr [@-1,112:116='types',<0>,287:110].[@-1,118:119='ty',<0>,287:116]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 qattr [@-1,123:127='block',<0>,287:121].[@-1,129:131='blk',<0>,287:127]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.WILDCARD, $block.blk, $id2.text)
                       
2022-05-07 08:10:07:033 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,290:24]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,290:56].[@-1,63:66='line',<0>,290:61]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,290:68].[@-1,75:77='pos',<0>,290:73]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 qattr [@-1,81:83='id1',<0>,290:79].[@-1,85:88='text',<0>,290:83]
2022-05-07 08:10:07:033 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,290:90].[@-1,107:109='lpf',<0>,290:105]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,135:139='block',<0>,290:133].[@-1,141:143='blk',<0>,290:139]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,147:149='id2',<0>,290:145].[@-1,151:154='text',<0>,290:149]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 translate 
                       $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $id1.text, $listParamsFunc.lpf, environment.VECTOR, $block.blk, $id2.text)
                       
2022-05-07 08:10:07:034 action-translator LogManager.java:25 attr [@-1,26:28='fun',<0>,293:24]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,58:61='FUNC',<0>,293:56].[@-1,63:66='line',<0>,293:61]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,70:73='FUNC',<0>,293:68].[@-1,75:77='pos',<0>,293:73]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,81:83='id1',<0>,293:79].[@-1,85:88='text',<0>,293:83]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,92:105='listParamsFunc',<0>,293:90].[@-1,107:109='lpf',<0>,293:105]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,133:137='block',<0>,293:131].[@-1,139:141='blk',<0>,293:137]
2022-05-07 08:10:07:034 action-translator LogManager.java:25 qattr [@-1,145:147='id2',<0>,293:143].[@-1,149:152='text',<0>,293:147]
2022-05-07 08:10:07:037 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:037 action-translator LogManager.java:25 translate 
                $lpf = arrayList.New()
                newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                $lpf.Add(newParam)
             
2022-05-07 08:10:07:037 action-translator LogManager.java:25 attr [@-1,19:21='lpf',<0>,3:17]
2022-05-07 08:10:07:037 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:63].[@-1,108:111='line',<0>,4:66]
2022-05-07 08:10:07:037 action-translator LogManager.java:25 qattr [@-1,115:116='ID',<0>,4:73].[@-1,118:120='pos',<0>,4:76]
2022-05-07 08:10:07:037 action-translator LogManager.java:25 qattr [@-1,124:125='ID',<0>,4:82].[@-1,127:130='text',<0>,4:85]
2022-05-07 08:10:07:037 action-translator LogManager.java:25 qattr [@-1,134:138='types',<0>,4:92].[@-1,140:141='ty',<0>,4:98]
2022-05-07 08:10:07:037 action-translator LogManager.java:25 attr [@-1,188:190='lpf',<0>,5:17]
2022-05-07 08:10:07:038 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:038 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,8:18]
2022-05-07 08:10:07:038 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,9:64].[@-1,110:113='line',<0>,9:67]
2022-05-07 08:10:07:038 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,9:74].[@-1,120:122='pos',<0>,9:77]
2022-05-07 08:10:07:038 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,9:83].[@-1,129:132='text',<0>,9:86]
2022-05-07 08:10:07:038 action-translator LogManager.java:25 attr [@-1,199:201='lpf',<0>,10:18]
2022-05-07 08:10:07:039 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:039 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,13:18]
2022-05-07 08:10:07:039 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,14:64].[@-1,111:114='line',<0>,14:68]
2022-05-07 08:10:07:039 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,14:75].[@-1,122:124='pos',<0>,14:79]
2022-05-07 08:10:07:039 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,14:85].[@-1,132:135='text',<0>,14:89]
2022-05-07 08:10:07:039 action-translator LogManager.java:25 qattr [@-1,159:161='id2',<0>,14:116].[@-1,163:166='text',<0>,14:120]
2022-05-07 08:10:07:039 action-translator LogManager.java:25 attr [@-1,208:210='lpf',<0>,15:18]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:040 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,18:18]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,19:64].[@-1,111:114='line',<0>,19:68]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,19:75].[@-1,122:124='pos',<0>,19:79]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,19:85].[@-1,132:135='text',<0>,19:89]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 qattr [@-1,159:161='id2',<0>,19:116].[@-1,163:166='text',<0>,19:120]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 qattr [@-1,170:174='types',<0>,19:127].[@-1,176:177='ty',<0>,19:133]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 attr [@-1,199:201='lpf',<0>,20:18]
2022-05-07 08:10:07:040 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY,"", environment.WILDCARD)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:040 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,23:18]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 qattr [@-1,107:108='ID',<0>,24:64].[@-1,110:113='line',<0>,24:67]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 qattr [@-1,117:118='ID',<0>,24:74].[@-1,120:122='pos',<0>,24:77]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 qattr [@-1,126:127='ID',<0>,24:83].[@-1,129:132='text',<0>,24:86]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 attr [@-1,198:200='lpf',<0>,25:18]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:041 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,28:18]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,29:64].[@-1,111:114='line',<0>,29:68]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,29:75].[@-1,122:124='pos',<0>,29:79]
2022-05-07 08:10:07:041 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,29:85].[@-1,132:135='text',<0>,29:89]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,29:118].[@-1,165:168='text',<0>,29:122]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 attr [@-1,210:212='lpf',<0>,30:18]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:042 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,33:18]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,34:64].[@-1,111:114='line',<0>,34:68]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,34:75].[@-1,122:124='pos',<0>,34:79]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,34:85].[@-1,132:135='text',<0>,34:89]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 qattr [@-1,159:161='id2',<0>,34:116].[@-1,163:166='text',<0>,34:120]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 qattr [@-1,170:174='types',<0>,34:127].[@-1,176:177='ty',<0>,34:133]
2022-05-07 08:10:07:042 action-translator LogManager.java:25 attr [@-1,199:201='lpf',<0>,35:18]
2022-05-07 08:10:07:043 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:043 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,38:18]
2022-05-07 08:10:07:043 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,39:64].[@-1,111:114='line',<0>,39:68]
2022-05-07 08:10:07:043 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,39:75].[@-1,122:124='pos',<0>,39:79]
2022-05-07 08:10:07:043 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,39:85].[@-1,132:135='text',<0>,39:89]
2022-05-07 08:10:07:043 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,39:118].[@-1,165:168='text',<0>,39:122]
2022-05-07 08:10:07:043 action-translator LogManager.java:25 attr [@-1,210:212='lpf',<0>,40:18]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 translate 
                 $lpf = arrayList.New()
                 newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                 $lpf.Add(newParam)
              
2022-05-07 08:10:07:044 action-translator LogManager.java:25 attr [@-1,20:22='lpf',<0>,43:18]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 qattr [@-1,107:109='id1',<0>,44:64].[@-1,111:114='line',<0>,44:68]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 qattr [@-1,118:120='id1',<0>,44:75].[@-1,122:124='pos',<0>,44:79]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 qattr [@-1,128:130='id1',<0>,44:85].[@-1,132:135='text',<0>,44:89]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 qattr [@-1,161:163='id2',<0>,44:118].[@-1,165:168='text',<0>,44:122]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 attr [@-1,210:212='lpf',<0>,45:18]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 translate  $lpf = arrayList.New() 
2022-05-07 08:10:07:044 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,47:12]
2022-05-07 08:10:07:044 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-05-07 08:10:07:045 action-translator LogManager.java:25 translate 
                             newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty, "", environment.WILDCARD)
                             $list.lpf.Add(newParam)
                             $lpf = $list.lpf
                              
2022-05-07 08:10:07:045 action-translator LogManager.java:25 qattr [@-1,78:79='ID',<0>,51:76].[@-1,81:84='line',<0>,51:79]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 qattr [@-1,88:89='ID',<0>,51:86].[@-1,91:93='pos',<0>,51:89]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 qattr [@-1,97:98='ID',<0>,51:95].[@-1,100:103='text',<0>,51:98]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 qattr [@-1,107:111='types',<0>,51:105].[@-1,113:114='ty',<0>,51:111]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 qattr [@-1,174:177='list',<0>,52:30].[@-1,179:181='lpf',<0>,52:35]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 attr [@-1,228:230='lpf',<0>,53:30]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 qattr [@-1,235:238='list',<0>,53:37].[@-1,240:242='lpf',<0>,53:42]
2022-05-07 08:10:07:045 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-05-07 08:10:07:046 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-05-07 08:10:07:046 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,56:70].[@-1,75:78='line',<0>,56:73]
2022-05-07 08:10:07:046 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,56:80].[@-1,85:87='pos',<0>,56:83]
2022-05-07 08:10:07:046 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,56:89].[@-1,94:97='text',<0>,56:92]
2022-05-07 08:10:07:046 action-translator LogManager.java:25 qattr [@-1,170:173='list',<0>,57:24].[@-1,175:177='lpf',<0>,57:29]
2022-05-07 08:10:07:046 action-translator LogManager.java:25 attr [@-1,218:220='lpf',<0>,58:24]
2022-05-07 08:10:07:046 action-translator LogManager.java:25 qattr [@-1,225:228='list',<0>,58:31].[@-1,230:232='lpf',<0>,58:36]
2022-05-07 08:10:07:046 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-05-07 08:10:07:046 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, environment.STRUCT)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-05-07 08:10:07:046 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,61:70].[@-1,76:79='line',<0>,61:74]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,61:81].[@-1,87:89='pos',<0>,61:85]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,61:91].[@-1,97:100='text',<0>,61:95]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,124:126='id2',<0>,61:122].[@-1,128:131='text',<0>,61:126]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,179:182='list',<0>,62:24].[@-1,184:186='lpf',<0>,62:29]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 attr [@-1,227:229='lpf',<0>,63:24]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,234:237='list',<0>,63:31].[@-1,239:241='lpf',<0>,63:36]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-05-07 08:10:07:047 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,66:70].[@-1,76:79='line',<0>,66:74]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,66:81].[@-1,87:89='pos',<0>,66:85]
2022-05-07 08:10:07:047 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,66:91].[@-1,97:100='text',<0>,66:95]
2022-05-07 08:10:07:048 action-translator LogManager.java:25 qattr [@-1,124:126='id2',<0>,66:122].[@-1,128:131='text',<0>,66:126]
2022-05-07 08:10:07:048 action-translator LogManager.java:25 qattr [@-1,135:139='types',<0>,66:133].[@-1,141:142='ty',<0>,66:139]
2022-05-07 08:10:07:048 action-translator LogManager.java:25 qattr [@-1,170:173='list',<0>,67:24].[@-1,175:177='lpf',<0>,67:29]
2022-05-07 08:10:07:048 action-translator LogManager.java:25 attr [@-1,218:220='lpf',<0>,68:24]
2022-05-07 08:10:07:048 action-translator LogManager.java:25 qattr [@-1,225:228='list',<0>,68:31].[@-1,230:232='lpf',<0>,68:36]
2022-05-07 08:10:07:048 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-05-07 08:10:07:048 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, environment.ARRAY, "", environment.WILDCARD)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-05-07 08:10:07:049 action-translator LogManager.java:25 qattr [@-1,72:73='ID',<0>,71:70].[@-1,75:78='line',<0>,71:73]
2022-05-07 08:10:07:049 action-translator LogManager.java:25 qattr [@-1,82:83='ID',<0>,71:80].[@-1,85:87='pos',<0>,71:83]
2022-05-07 08:10:07:049 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,71:89].[@-1,94:97='text',<0>,71:92]
2022-05-07 08:10:07:049 action-translator LogManager.java:25 qattr [@-1,170:173='list',<0>,72:24].[@-1,175:177='lpf',<0>,72:29]
2022-05-07 08:10:07:049 action-translator LogManager.java:25 attr [@-1,218:220='lpf',<0>,73:24]
2022-05-07 08:10:07:049 action-translator LogManager.java:25 qattr [@-1,225:228='list',<0>,73:31].[@-1,230:232='lpf',<0>,73:36]
2022-05-07 08:10:07:049 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-05-07 08:10:07:050 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.STRUCT)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-05-07 08:10:07:050 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,76:70].[@-1,76:79='line',<0>,76:74]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,76:81].[@-1,87:89='pos',<0>,76:85]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,76:91].[@-1,97:100='text',<0>,76:95]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 qattr [@-1,126:128='id2',<0>,76:124].[@-1,130:133='text',<0>,76:128]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 qattr [@-1,181:184='list',<0>,77:24].[@-1,186:188='lpf',<0>,77:29]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 attr [@-1,229:231='lpf',<0>,78:24]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 qattr [@-1,236:239='list',<0>,78:31].[@-1,241:243='lpf',<0>,78:36]
2022-05-07 08:10:07:050 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-05-07 08:10:07:051 action-translator LogManager.java:25 translate 
                       newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.VECTOR, $id2.text, $types.ty)
                       $list.lpf.Add(newParam)
                       $lpf = $list.lpf
                        
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,72:74='id1',<0>,81:70].[@-1,76:79='line',<0>,81:74]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,83:85='id1',<0>,81:81].[@-1,87:89='pos',<0>,81:85]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,93:95='id1',<0>,81:91].[@-1,97:100='text',<0>,81:95]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,124:126='id2',<0>,81:122].[@-1,128:131='text',<0>,81:126]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,135:139='types',<0>,81:133].[@-1,141:142='ty',<0>,81:139]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,170:173='list',<0>,82:24].[@-1,175:177='lpf',<0>,82:29]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 attr [@-1,218:220='lpf',<0>,83:24]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 qattr [@-1,225:228='list',<0>,83:31].[@-1,230:232='lpf',<0>,83:36]
2022-05-07 08:10:07:051 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-05-07 08:10:07:052 action-translator LogManager.java:25 translate 
                           newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                           $list.lpf.Add(newParam)
                           $lpf = $list.lpf
                        
2022-05-07 08:10:07:052 action-translator LogManager.java:25 qattr [@-1,76:78='id1',<0>,86:74].[@-1,80:83='line',<0>,86:78]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 qattr [@-1,87:89='id1',<0>,86:85].[@-1,91:93='pos',<0>,86:89]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 qattr [@-1,97:99='id1',<0>,86:95].[@-1,101:104='text',<0>,86:99]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 qattr [@-1,130:132='id2',<0>,86:128].[@-1,134:137='text',<0>,86:132]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,87:28].[@-1,196:198='lpf',<0>,87:33]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 attr [@-1,243:245='lpf',<0>,88:28]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 qattr [@-1,250:253='list',<0>,88:35].[@-1,255:257='lpf',<0>,88:40]
2022-05-07 08:10:07:052 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-05-07 08:10:07:053 action-translator LogManager.java:25 translate 
                           newParam := instructions.NewParamsDeclaration($id1.line, $id1.pos, $id1.text, environment.WILDCARD, $id2.text, environment.WILDCARD)
                           $list.lpf.Add(newParam)
                           $lpf = $list.lpf
                        
2022-05-07 08:10:07:053 action-translator LogManager.java:25 qattr [@-1,76:78='id1',<0>,91:74].[@-1,80:83='line',<0>,91:78]
2022-05-07 08:10:07:053 action-translator LogManager.java:25 qattr [@-1,87:89='id1',<0>,91:85].[@-1,91:93='pos',<0>,91:89]
2022-05-07 08:10:07:053 action-translator LogManager.java:25 qattr [@-1,97:99='id1',<0>,91:95].[@-1,101:104='text',<0>,91:99]
2022-05-07 08:10:07:053 action-translator LogManager.java:25 qattr [@-1,130:132='id2',<0>,91:128].[@-1,134:137='text',<0>,91:132]
2022-05-07 08:10:07:054 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,92:28].[@-1,196:198='lpf',<0>,92:33]
2022-05-07 08:10:07:054 action-translator LogManager.java:25 attr [@-1,243:245='lpf',<0>,93:28]
2022-05-07 08:10:07:054 action-translator LogManager.java:25 qattr [@-1,250:253='list',<0>,93:35].[@-1,255:257='lpf',<0>,93:40]
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2022-05-07 08:10:07:054 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2022-05-07 08:10:07:055 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-05-07 08:10:07:055 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,393:8]
2022-05-07 08:10:07:055 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2022-05-07 08:10:07:055 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,394:10]
2022-05-07 08:10:07:055 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2022-05-07 08:10:07:055 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,395:9]
2022-05-07 08:10:07:055 action-translator LogManager.java:25 translate  $ty = environment.CHAR 
2022-05-07 08:10:07:055 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,396:9]
2022-05-07 08:10:07:056 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2022-05-07 08:10:07:056 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,397:9]
2022-05-07 08:10:07:056 action-translator LogManager.java:25 translate  $ty = environment.STR 
2022-05-07 08:10:07:056 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,398:9]
2022-05-07 08:10:07:056 action-translator LogManager.java:25 translate  $ty = environment.VECTOR 
2022-05-07 08:10:07:056 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,399:12]
2022-05-07 08:10:07:056 action-translator LogManager.java:25 translate  $ty = environment.STRUCT 
2022-05-07 08:10:07:056 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,400:11]
2022-05-07 08:10:07:056 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2022-05-07 08:10:07:056 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,401:10]
2022-05-07 08:10:07:056 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2022-05-07 08:10:07:056 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,402:10]
2022-05-07 08:10:07:057 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:057 action-translator LogManager.java:25 translate 
                $l = arrayList.New()
                $l.Add($expression.p)
             
2022-05-07 08:10:07:057 action-translator LogManager.java:25 attr [@-1,19:19='l',<0>,3:17]
2022-05-07 08:10:07:057 action-translator LogManager.java:25 attr [@-1,57:57='l',<0>,4:17]
2022-05-07 08:10:07:057 action-translator LogManager.java:25 qattr [@-1,64:73='expression',<0>,4:24].[@-1,75:75='p',<0>,4:35]
2022-05-07 08:10:07:057 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:057 action-translator LogManager.java:25 translate 
                                                  $list.l.Add($expression.p)
                                                  $l = $list.l
                                               
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,53:56='list',<0>,9:51].[@-1,58:58='l',<0>,9:56]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,65:74='expression',<0>,9:63].[@-1,76:76='p',<0>,9:74]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 attr [@-1,131:131='l',<0>,10:51]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,136:139='list',<0>,10:56].[@-1,141:141='l',<0>,10:61]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:058 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-05-07 08:10:07:058 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,417:42]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,417:71].[@-1,34:37='line',<0>,417:74]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,417:81].[@-1,44:46='pos',<0>,417:84]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,417:90].[@-1,53:56='text',<0>,417:93]
2022-05-07 08:10:07:058 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,417:100].[@-1,75:75='l',<0>,417:115]
2022-05-07 08:10:07:059 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2022-05-07 08:10:07:059 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,418:42]
2022-05-07 08:10:07:059 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,418:71].[@-1,34:37='line',<0>,418:74]
2022-05-07 08:10:07:059 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,418:81].[@-1,44:46='pos',<0>,418:84]
2022-05-07 08:10:07:059 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,418:90].[@-1,53:56='text',<0>,418:93]
2022-05-07 08:10:07:059 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,418:100].[@-1,75:75='l',<0>,418:115]
2022-05-07 08:10:07:059 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:059 action-translator LogManager.java:25 translate  $p = $expr_arit.p 
2022-05-07 08:10:07:060 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:42]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 qattr [@-1,7:15='expr_arit',<0>,2:47].[@-1,17:17='p',<0>,2:57]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-05-07 08:10:07:060 action-translator LogManager.java:25 translate  $p = expressions.NewRange($expuno.start.GetLine(),$expuno.start.GetColumn(), $expuno.p, $expdos.p) 
2022-05-07 08:10:07:060 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:145]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 qattr [@-1,28:33='expuno',<0>,5:171].[@-1,35:39='start',<0>,5:178]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 qattr [@-1,52:57='expuno',<0>,5:195].[@-1,59:63='start',<0>,5:202]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 qattr [@-1,79:84='expuno',<0>,5:222].[@-1,86:86='p',<0>,5:229]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 qattr [@-1,90:95='expdos',<0>,5:233].[@-1,97:97='p',<0>,5:240]
2022-05-07 08:10:07:060 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 1)
2022-05-07 08:10:07:063 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:063 action-translator LogManager.java:25 translate $p = expressions.NewOperation($SUB.line,$SUB.pos,$opDe.p,"MENOS_UNARIO",nil)
2022-05-07 08:10:07:063 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,2:72]
2022-05-07 08:10:07:063 action-translator LogManager.java:25 qattr [@-1,31:33='SUB',<0>,2:102].[@-1,35:38='line',<0>,2:106]
2022-05-07 08:10:07:063 action-translator LogManager.java:25 qattr [@-1,41:43='SUB',<0>,2:112].[@-1,45:47='pos',<0>,2:116]
2022-05-07 08:10:07:063 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,2:121].[@-1,55:55='p',<0>,2:126]
2022-05-07 08:10:07:063 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:064 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:064 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:064 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:064 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:064 action-translator LogManager.java:25 translate $p = expressions.NewOperation($NOT.line,$NOT.pos,$opDe.p,$NOT.text,nil)
2022-05-07 08:10:07:064 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,8:69]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,8:99].[@-1,35:38='line',<0>,8:103]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 qattr [@-1,41:43='NOT',<0>,8:109].[@-1,45:47='pos',<0>,8:113]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 qattr [@-1,50:53='opDe',<0>,8:118].[@-1,55:55='p',<0>,8:123]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 qattr [@-1,58:60='NOT',<0>,8:126].[@-1,62:65='text',<0>,8:130]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 translate  $p = $expVectors.ev 
2022-05-07 08:10:07:065 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,9:40]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 qattr [@-1,7:16='expVectors',<0>,9:45].[@-1,18:19='ev',<0>,9:56]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 translate  $p = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2022-05-07 08:10:07:065 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,10:88]
2022-05-07 08:10:07:065 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,10:114].[@-1,35:38='line',<0>,10:121]
2022-05-07 08:10:07:066 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,10:128].[@-1,49:51='pos',<0>,10:135]
2022-05-07 08:10:07:066 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,10:141].[@-1,66:66='l',<0>,10:152]
2022-05-07 08:10:07:066 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:066 action-translator LogManager.java:25 translate  $p = $primitive.p 
2022-05-07 08:10:07:066 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,12:39]
2022-05-07 08:10:07:066 action-translator LogManager.java:25 qattr [@-1,7:15='primitive',<0>,12:44].[@-1,17:17='p',<0>,12:54]
2022-05-07 08:10:07:066 action-translator LogManager.java:25 translate  $p = $expression.p 
2022-05-07 08:10:07:066 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,13:88]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 qattr [@-1,7:16='expression',<0>,13:93].[@-1,18:18='p',<0>,13:104]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-05-07 08:10:07:067 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,14:42]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,14:47].[@-1,20:21='cf',<0>,14:60]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 translate  $p = $callFunction.cf 
2022-05-07 08:10:07:067 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,15:63]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,15:68].[@-1,20:21='cf',<0>,15:81]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-05-07 08:10:07:067 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,16:40]
2022-05-07 08:10:07:067 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,16:45].[@-1,18:19='cm',<0>,16:56]
2022-05-07 08:10:07:068 action-translator LogManager.java:25 translate  $p = $callModule.cm 
2022-05-07 08:10:07:068 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,17:61]
2022-05-07 08:10:07:068 action-translator LogManager.java:25 qattr [@-1,7:16='callModule',<0>,17:66].[@-1,18:19='cm',<0>,17:77]
2022-05-07 08:10:07:068 action-translator LogManager.java:25 translate  $p = $condIf.ifCond 
2022-05-07 08:10:07:068 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,18:36]
2022-05-07 08:10:07:068 action-translator LogManager.java:25 qattr [@-1,7:12='condIf',<0>,18:41].[@-1,14:19='ifCond',<0>,18:48]
2022-05-07 08:10:07:068 action-translator LogManager.java:25 translate  $p = $condMatch.mtch 
2022-05-07 08:10:07:068 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,19:39]
2022-05-07 08:10:07:068 action-translator LogManager.java:25 qattr [@-1,7:15='condMatch',<0>,19:44].[@-1,17:20='mtch',<0>,19:54]
2022-05-07 08:10:07:069 action-translator LogManager.java:25 translate  $p = $loopBucle.lb 
2022-05-07 08:10:07:069 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,20:39]
2022-05-07 08:10:07:069 action-translator LogManager.java:25 qattr [@-1,7:15='loopBucle',<0>,20:44].[@-1,17:18='lb',<0>,20:54]
2022-05-07 08:10:07:069 action-translator LogManager.java:25 translate  $p = expressions.NewAmp($AMP.line, $AMP.pos, $exp.p ) 
2022-05-07 08:10:07:069 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,21:68]
2022-05-07 08:10:07:069 action-translator LogManager.java:25 qattr [@-1,26:28='AMP',<0>,21:92].[@-1,30:33='line',<0>,21:96]
2022-05-07 08:10:07:070 action-translator LogManager.java:25 qattr [@-1,37:39='AMP',<0>,21:103].[@-1,41:43='pos',<0>,21:107]
2022-05-07 08:10:07:070 action-translator LogManager.java:25 qattr [@-1,47:49='exp',<0>,21:113].[@-1,51:51='p',<0>,21:117]
2022-05-07 08:10:07:070 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 30)
2022-05-07 08:10:07:070 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-05-07 08:10:07:070 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,24:166]
2022-05-07 08:10:07:070 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,24:196].[@-1,36:40='start',<0>,24:201]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,24:218].[@-1,58:62='start',<0>,24:223]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,24:242].[@-1,82:82='p',<0>,24:247]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,24:250].[@-1,88:91='text',<0>,24:253]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,24:259].[@-1,99:99='p',<0>,24:264]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-05-07 08:10:07:071 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-05-07 08:10:07:071 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,25:155]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,25:185].[@-1,36:40='start',<0>,25:190]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,25:207].[@-1,58:62='start',<0>,25:212]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,25:231].[@-1,82:82='p',<0>,25:236]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,25:239].[@-1,88:91='text',<0>,25:242]
2022-05-07 08:10:07:071 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,25:248].[@-1,99:99='p',<0>,25:253]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-05-07 08:10:07:072 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-05-07 08:10:07:072 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,26:265]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,26:295].[@-1,36:40='start',<0>,26:300]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,26:317].[@-1,58:62='start',<0>,26:322]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,26:341].[@-1,82:82='p',<0>,26:346]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,26:349].[@-1,88:91='text',<0>,26:352]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,26:358].[@-1,99:99='p',<0>,26:363]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-05-07 08:10:07:072 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-05-07 08:10:07:072 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,27:132]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,27:162].[@-1,36:40='start',<0>,27:167]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,27:184].[@-1,58:62='start',<0>,27:189]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,27:208].[@-1,82:82='p',<0>,27:213]
2022-05-07 08:10:07:072 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,27:216].[@-1,88:91='text',<0>,27:219]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,27:225].[@-1,99:99='p',<0>,27:230]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-05-07 08:10:07:073 action-translator LogManager.java:25 translate $p = expressions.NewOperation($opIz.start.GetLine(),$opIz.start.GetColumn(),$opIz.p,$op.text,$opDe.p)
2022-05-07 08:10:07:073 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,28:131]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 qattr [@-1,31:34='opIz',<0>,28:161].[@-1,36:40='start',<0>,28:166]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 qattr [@-1,53:56='opIz',<0>,28:183].[@-1,58:62='start',<0>,28:188]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 qattr [@-1,77:80='opIz',<0>,28:207].[@-1,82:82='p',<0>,28:212]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 qattr [@-1,85:86='op',<0>,28:215].[@-1,88:91='text',<0>,28:218]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 qattr [@-1,94:97='opDe',<0>,28:224].[@-1,99:99='p',<0>,28:229]
2022-05-07 08:10:07:073 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 29)
2022-05-07 08:10:07:073 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:073 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 28)
2022-05-07 08:10:07:073 action-translator LogManager.java:25 translate $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p)
2022-05-07 08:10:07:073 action-translator LogManager.java:25 attr [@-1,1:1='p',<0>,30:117]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 qattr [@-1,30:32='exp',<0>,30:146].[@-1,34:38='start',<0>,30:150]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 qattr [@-1,51:53='exp',<0>,30:167].[@-1,55:59='start',<0>,30:171]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 qattr [@-1,75:77='exp',<0>,30:191].[@-1,79:79='p',<0>,30:195]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 27)
2022-05-07 08:10:07:074 action-translator LogManager.java:25 translate  $p = expressions.NewToString($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) 
2022-05-07 08:10:07:074 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,31:118]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 qattr [@-1,31:33='exp',<0>,31:147].[@-1,35:39='start',<0>,31:151]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 qattr [@-1,52:54='exp',<0>,31:168].[@-1,56:60='start',<0>,31:172]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 qattr [@-1,76:78='exp',<0>,31:192].[@-1,80:80='p',<0>,31:196]
2022-05-07 08:10:07:074 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-05-07 08:10:07:074 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:074 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2022-05-07 08:10:07:074 action-translator LogManager.java:25 translate  $p = expressions.NewAbs($exp.start.GetLine(),$exp.start.GetColumn(), $exp.p) 
2022-05-07 08:10:07:074 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,33:117]
2022-05-07 08:10:07:075 action-translator LogManager.java:25 qattr [@-1,26:28='exp',<0>,33:141].[@-1,30:34='start',<0>,33:145]
2022-05-07 08:10:07:075 action-translator LogManager.java:25 qattr [@-1,47:49='exp',<0>,33:162].[@-1,51:55='start',<0>,33:166]
2022-05-07 08:10:07:075 action-translator LogManager.java:25 qattr [@-1,71:73='exp',<0>,33:186].[@-1,75:75='p',<0>,33:190]
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 30)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 29)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 28)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 27)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2022-05-07 08:10:07:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2022-05-07 08:10:07:076 action-translator LogManager.java:25 translate 
            if (strings.Contains($NUMBER.text,".")){
                num,err := strconv.ParseFloat($NUMBER.text, 64);
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos, num,environment.FLOAT)
            }else{
                num,err := strconv.Atoi($NUMBER.text)
                if err!= nil{
                    fmt.Println(err)
                }
                $p = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
            }
        
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,36:41='NUMBER',<0>,464:34].[@-1,43:46='text',<0>,464:41]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,103:108='NUMBER',<0>,465:47].[@-1,110:113='text',<0>,465:54]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 attr [@-1,227:227='p',<0>,469:17]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,257:262='NUMBER',<0>,469:47].[@-1,264:267='line',<0>,469:54]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,270:275='NUMBER',<0>,469:60].[@-1,277:279='pos',<0>,469:67]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,367:372='NUMBER',<0>,471:41].[@-1,374:377='text',<0>,471:48]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 attr [@-1,486:486='p',<0>,475:17]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,516:521='NUMBER',<0>,475:47].[@-1,523:526='line',<0>,475:54]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,529:534='NUMBER',<0>,475:60].[@-1,536:538='pos',<0>,475:67]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 translate 
             str := $STRING.text
             $p = expressions.NewPrimitive($STRING.line, $STRING.pos,str[1:len(str)-1],environment.STR)
         
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,23:28='STRING',<0>,479:21].[@-1,30:33='text',<0>,479:28]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 attr [@-1,50:50='p',<0>,480:14]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,80:85='STRING',<0>,480:44].[@-1,87:90='line',<0>,480:51]
2022-05-07 08:10:07:076 action-translator LogManager.java:25 qattr [@-1,94:99='STRING',<0>,480:58].[@-1,101:103='pos',<0>,480:65]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 translate 
            chr := $CHARACTER.text
            $p = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos,chr[1:len(chr)-1],environment.CHAR)
            
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,22:30='CHARACTER',<0>,483:20].[@-1,32:35='text',<0>,483:30]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 attr [@-1,51:51='p',<0>,484:13]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,81:89='CHARACTER',<0>,484:43].[@-1,91:94='line',<0>,484:53]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,98:106='CHARACTER',<0>,484:60].[@-1,108:110='pos',<0>,484:70]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($TRU.line, $TRU.pos,true,environment.BOOLEAN) 
2022-05-07 08:10:07:077 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,486:8]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,486:38].[@-1,36:39='line',<0>,486:42]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,486:49].[@-1,47:49='pos',<0>,486:53]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 translate  $p = expressions.NewPrimitive($FAL.line, $FAL.pos,false,environment.BOOLEAN) 
2022-05-07 08:10:07:077 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,487:8]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,487:38].[@-1,36:39='line',<0>,487:42]
2022-05-07 08:10:07:077 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,487:49].[@-1,47:49='pos',<0>,487:53]
2022-05-07 08:10:07:078 action-translator LogManager.java:25 translate  $p = $list.p
2022-05-07 08:10:07:078 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,488:19]
2022-05-07 08:10:07:078 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,488:24].[@-1,12:12='p',<0>,488:29]
2022-05-07 08:10:07:078 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:078 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line,$ID.pos,$ID.text) 
2022-05-07 08:10:07:079 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2022-05-07 08:10:07:079 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2022-05-07 08:10:07:079 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,2:72].[@-1,42:44='pos',<0>,2:75]
2022-05-07 08:10:07:079 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,2:80].[@-1,50:53='text',<0>,2:83]
2022-05-07 08:10:07:079 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-05-07 08:10:07:079 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expression.p) 
2022-05-07 08:10:07:079 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:136]
2022-05-07 08:10:07:079 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:168].[@-1,39:43='start',<0>,5:173]
2022-05-07 08:10:07:080 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:191].[@-1,62:66='start',<0>,5:196]
2022-05-07 08:10:07:080 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:216].[@-1,87:87='p',<0>,5:221]
2022-05-07 08:10:07:080 action-translator LogManager.java:25 qattr [@-1,91:100='expression',<0>,5:225].[@-1,102:102='p',<0>,5:236]
2022-05-07 08:10:07:080 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:080 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:080 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-05-07 08:10:07:080 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:081 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:081 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:081 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:081 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:081 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate  
2022-05-07 08:10:07:082 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:083 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:083 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:083 action-translator LogManager.java:25 translate 
2022-05-07 08:10:07:083 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-05-07 08:10:07:777 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-05-07 08:10:07:777 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-05-07 08:10:08:021 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

2022-05-07 08:10:08:021 action-translator LogManager.java:25 translate 
    import arrayList "github.com/colegno/arraylist"
    import "OLC2/interfaces"
    import "OLC2/expressions"
    import "OLC2/instructions"
    import "OLC2/environment"
    import "strings"

